<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何使用Navicat查看自己的数据库密码</title>
      <link href="/2024/030735801.html"/>
      <url>/2024/030735801.html</url>
      
        <content type="html"><![CDATA[<h1 id="如何使用Navicat查看自己的数据库密码"><a href="#如何使用Navicat查看自己的数据库密码" class="headerlink" title="如何使用Navicat查看自己的数据库密码"></a>如何使用Navicat查看自己的数据库密码</h1><p>今天在使用IDEA连接数据库时，出现了一个连接错误：**ERROR 1045 (28000): Access denied for user  root @ localhost  (using password: YES)**，仔细分析了一下报错原因，意思就是：用户root@localhost的访问被拒绝（使用密码：YES），因为我电脑上的数据库是很早之前安装的，密码以及忘记了~，于是我灵机一动打开了Navicat，利用Navicat中连好的数据库查看密码。</p><p>首先打开一个以及链接成功的数据库：</p><p><img src="C:\Users\Bumble\Pictures\笔记图片\Navicat+数据库.png"></p><p>此时我们可以看到，密码并不会直接显示出来……</p><p>但是不用慌，我们可以导出这个数据库的全部数据：</p><p><img src="C:\Users\Bumble\Pictures\笔记图片\Navica+数据库2.png"></p><p>注意导出的时候要勾选：导出密码</p><p><img src="C:\Users\Bumble\Pictures\笔记图片\Navica+数据库3.png"></p><p>之后我们会得到一个名为：connections.ncx 的文件</p><p><img src="C:\Users\Bumble\Pictures\笔记图片\Navica+数据库4.png"></p><p>打开文件我们可以得到一个加密过的密码：</p><p><img src="C:\Users\Bumble\Pictures\笔记图片\Navica+数据库5.png"></p><p>到这一步我们只需要将加密后的密码进行解码就可以了。</p><ol><li><p>打开<a href="https://tool.lu/coderunner%EF%BC%8C%E4%BD%BF%E7%94%A8PHP%E5%9C%A8%E7%BA%BF%E8%BF%90%E8%A1%8C%E5%B7%A5%E5%85%B7">https://tool.lu/coderunner，使用PHP在线运行工具</a></p></li><li><p>粘贴如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>php<span class="token keyword">class</span> <span class="token class-name">NavicatPassword</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> $version <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> $aesKey <span class="token operator">=</span> <span class="token string">'libcckeylibcckey'</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> $aesIv <span class="token operator">=</span> <span class="token string">'libcciv libcciv '</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> $blowString <span class="token operator">=</span> <span class="token string">'3DC5CA39'</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> $blowKey <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">protected</span> $blowIv <span class="token operator">=</span> null<span class="token punctuation">;</span>         <span class="token keyword">public</span> function <span class="token function">__construct</span><span class="token punctuation">(</span>$version <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>version <span class="token operator">=</span> $version<span class="token punctuation">;</span>        $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>blowKey <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token string">'3DC5CA39'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>blowIv <span class="token operator">=</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token string">'d9c7c3c8870d64bd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">public</span> function <span class="token function">encrypt</span><span class="token punctuation">(</span>$string<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        $result <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>version<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>                $result <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">encryptEleven</span><span class="token punctuation">(</span>$string<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>                $result <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">encryptTwelve</span><span class="token punctuation">(</span>$string<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                 <span class="token keyword">return</span> $result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">protected</span> function <span class="token function">encryptEleven</span><span class="token punctuation">(</span>$string<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        $round <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>$string<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $leftLength <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>$string<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">;</span>        $result <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        $currentVector <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>blowIv<span class="token punctuation">;</span>                 <span class="token keyword">for</span> <span class="token punctuation">(</span>$i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> $i <span class="token operator">&lt;</span> $round<span class="token punctuation">;</span> $i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            $temp <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">encryptBlock</span><span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">xorBytes</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span>$string<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">*</span> $i<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> $currentVector<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $currentVector <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">xorBytes</span><span class="token punctuation">(</span>$currentVector<span class="token punctuation">,</span> $temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            $result <span class="token punctuation">.</span>= $temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>$leftLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>            $currentVector <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">encryptBlock</span><span class="token punctuation">(</span>$currentVector<span class="token punctuation">)</span><span class="token punctuation">;</span>            $result <span class="token punctuation">.</span>= $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">xorBytes</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span>$string<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">*</span> $i<span class="token punctuation">,</span> $leftLength<span class="token punctuation">)</span><span class="token punctuation">,</span> $currentVector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                 <span class="token keyword">return</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token function">bin2hex</span><span class="token punctuation">(</span>$result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">protected</span> function <span class="token function">encryptBlock</span><span class="token punctuation">(</span>$block<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">openssl_encrypt</span><span class="token punctuation">(</span>$block<span class="token punctuation">,</span> <span class="token string">'BF-ECB'</span><span class="token punctuation">,</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>blowKey<span class="token punctuation">,</span> OPENSSL_RAW_DATA<span class="token operator">|</span>OPENSSL_NO_PADDING<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">protected</span> function <span class="token function">decryptBlock</span><span class="token punctuation">(</span>$block<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">openssl_decrypt</span><span class="token punctuation">(</span>$block<span class="token punctuation">,</span> <span class="token string">'BF-ECB'</span><span class="token punctuation">,</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>blowKey<span class="token punctuation">,</span> OPENSSL_RAW_DATA<span class="token operator">|</span>OPENSSL_NO_PADDING<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">protected</span> function <span class="token function">xorBytes</span><span class="token punctuation">(</span>$str1<span class="token punctuation">,</span> $str2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        $result <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>$i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> $i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>$str1<span class="token punctuation">)</span><span class="token punctuation">;</span> $i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            $result <span class="token punctuation">.</span>= <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>$str1<span class="token punctuation">[</span>$i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">ord</span><span class="token punctuation">(</span>$str2<span class="token punctuation">[</span>$i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                 <span class="token keyword">return</span> $result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">protected</span> function <span class="token function">encryptTwelve</span><span class="token punctuation">(</span>$string<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        $result <span class="token operator">=</span> <span class="token function">openssl_encrypt</span><span class="token punctuation">(</span>$string<span class="token punctuation">,</span> <span class="token string">'AES-128-CBC'</span><span class="token punctuation">,</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>aesKey<span class="token punctuation">,</span> OPENSSL_RAW_DATA<span class="token punctuation">,</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>aesIv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token function">bin2hex</span><span class="token punctuation">(</span>$result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">public</span> function <span class="token function">decrypt</span><span class="token punctuation">(</span>$string<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        $result <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>version<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>                $result <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">decryptEleven</span><span class="token punctuation">(</span>$string<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>                $result <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">decryptTwelve</span><span class="token punctuation">(</span>$string<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                 <span class="token keyword">return</span> $result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">protected</span> function <span class="token function">decryptEleven</span><span class="token punctuation">(</span>$upperString<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        $string <span class="token operator">=</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span>$upperString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 $round <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>$string<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $leftLength <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>$string<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">;</span>        $result <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        $currentVector <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>blowIv<span class="token punctuation">;</span>                 <span class="token keyword">for</span> <span class="token punctuation">(</span>$i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> $i <span class="token operator">&lt;</span> $round<span class="token punctuation">;</span> $i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            $encryptedBlock <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span>$string<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">*</span> $i<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $temp <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">xorBytes</span><span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">decryptBlock</span><span class="token punctuation">(</span>$encryptedBlock<span class="token punctuation">)</span><span class="token punctuation">,</span> $currentVector<span class="token punctuation">)</span><span class="token punctuation">;</span>            $currentVector <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">xorBytes</span><span class="token punctuation">(</span>$currentVector<span class="token punctuation">,</span> $encryptedBlock<span class="token punctuation">)</span><span class="token punctuation">;</span>            $result <span class="token punctuation">.</span>= $temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>$leftLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>            $currentVector <span class="token operator">=</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">encryptBlock</span><span class="token punctuation">(</span>$currentVector<span class="token punctuation">)</span><span class="token punctuation">;</span>            $result <span class="token punctuation">.</span>= $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">xorBytes</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span>$string<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">*</span> $i<span class="token punctuation">,</span> $leftLength<span class="token punctuation">)</span><span class="token punctuation">,</span> $currentVector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                 <span class="token keyword">return</span> $result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">protected</span> function <span class="token function">decryptTwelve</span><span class="token punctuation">(</span>$upperString<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        $string <span class="token operator">=</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span>$upperString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">openssl_decrypt</span><span class="token punctuation">(</span>$string<span class="token punctuation">,</span> <span class="token string">'AES-128-CBC'</span><span class="token punctuation">,</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>aesKey<span class="token punctuation">,</span> OPENSSL_RAW_DATA<span class="token punctuation">,</span> $<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>aesIv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//需要指定版本两种，11或12</span><span class="token comment" spellcheck="true">//$navicatPassword = new NavicatPassword(11);</span>$navicatPassword <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NavicatPassword</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解密</span><span class="token comment" spellcheck="true">//$decode = $navicatPassword->decrypt('15057D7BA390');</span>$decode <span class="token operator">=</span> $navicatPassword<span class="token operator">-</span><span class="token operator">></span><span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token string">'2C6C64D650CADE7B9C8CD834A01A4C85'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>echo $decode<span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token operator">?</span><span class="token operator">></span></code></pre></li><li><p>点击运行，就可以得到自己数据库的密码了</p><p><img src="C:\Users\Bumble\Pictures\笔记图片\Navica+数据库6.png"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot + Dubbo + Zookeeper</title>
      <link href="/2024/03061.html"/>
      <url>/2024/03061.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Dubbo-Zookeeper"><a href="#SpringBoot-Dubbo-Zookeeper" class="headerlink" title="SpringBoot + Dubbo + Zookeeper"></a>SpringBoot + Dubbo + Zookeeper</h1><p><strong>前提：Zookeeper服务已开启！！！</strong></p><h4 id="1、提供者提供服务"><a href="#1、提供者提供服务" class="headerlink" title="1、提供者提供服务"></a>1、提供者提供服务</h4><ul><li>导入依赖：</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 导入依赖 Dubbo + zookeeper --></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.sgroschupf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-recipes --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-recipes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-framework --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li><p>配置中心注册的地址，以及服务名和要扫描的包</p><pre class=" language-xml"><code class="language-xml">server.port=8001#服务应用的名字dubbo.application.name=provider-serve#注册中心地址dubbo.registry.address=zookeeper://127.0.0.1:2181#哪些服务要被注册dubbo.scan.base-packages=com.shan.service</code></pre></li><li><p>在想要注册的服务上面增加一个注解@DubboSerive（之前版本的@Service以及被淘汰，目前普遍使用@DubboService）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>DubboService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@DubboService</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TicketService</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">getTicketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"《狂神说Java》"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="2、消费者获取产品资源"><a href="#2、消费者获取产品资源" class="headerlink" title="2、消费者获取产品资源"></a>2、消费者获取产品资源</h4><ul><li><p>导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 导入依赖 Dubbo + zookeeper --></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.sgroschupf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-recipes --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-recipes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-framework --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置自己的服务名，配置注册中心地址</p><pre class=" language-xml"><code class="language-xml">server.port=8002#消费者去拿资源之前需要先暴露自己的名字dubbo.application.name=consumer-sever#去注册中心拿产品dubbo.registry.address=zookeeper://127.0.0.1:2181</code></pre></li><li><p>从远程注入服务@Reference</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Reference<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//想拿到provider-serve的票,需要去注册中心拿到服务</span>    <span class="token annotation punctuation">@Reference</span> <span class="token comment" spellcheck="true">//引用 POM坐标，可以定义相同路径的接口名</span>    TicketService ticketService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String ticket <span class="token operator">=</span> ticketService<span class="token punctuation">.</span><span class="token function">getTicketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从注册中心得到-->"</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot Dubbo Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud</title>
      <link href="/2024/03062.html"/>
      <url>/2024/03062.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring-Cloud"></a>Spring-Cloud</h1><p>首先回顾一下自己之前所学的知识~</p><p>串一下自己会的东西~</p><p>这个阶段应该做什么？如何学习？~</p><h2 id="Eureka服务注册与实现"><a href="#Eureka服务注册与实现" class="headerlink" title="Eureka服务注册与实现"></a>Eureka服务注册与实现</h2><h3 id="作为服务中心，Eureka和zooKeeper好在哪里？"><a href="#作为服务中心，Eureka和zooKeeper好在哪里？" class="headerlink" title="作为服务中心，Eureka和zooKeeper好在哪里？"></a>作为服务中心，Eureka和zooKeeper好在哪里？</h3><p>（1）首先来了解一下CAP的概念：</p><p><strong>CAP</strong>：<a href="https://m.baidu.com/s?word=CAP%E7%90%86%E8%AE%BA&amp;sa=re_dqa_zy">CAP理论</a>，又称CAP定理，是分布式系统设计中的一个核心原则，由<a href="https://m.baidu.com/s?word=%E5%8A%A0%E5%B7%9E%E4%BC%AF%E5%85%8B%E5%88%A9%E5%88%86%E6%A0%A1&amp;sa=re_dqa_zy">加州伯克利分校</a>的计算机科学家[Eric Brewer](<a href="https://m.baidu.com/s?word=Eric">https://m.baidu.com/s?word=Eric</a> Brewer&amp;sa=re_dqa_zy)教授在1998年提出。CAP理论指的是在一个分布式系统中，<a href="https://m.baidu.com/s?word=%E4%B8%80%E8%87%B4%E6%80%A7&amp;sa=re_dqa_zy">一致性</a>（Consistency）、<a href="https://m.baidu.com/s?word=%E5%8F%AF%E7%94%A8%E6%80%A7&amp;sa=re_dqa_zy">可用性</a>（Availability）、<a href="">分区容错性</a>（Partition tolerance）这三个要素最多只能同时实现两点，不可能三者兼顾。</p><p>CAP理论的核心是，分布式系统在设计时必须在一致性和可用性之间做出权衡。这意味着，为了保证系统的可用性，可能需要在一定程度上牺牲数据的一致性。例如，在大多数Web应用中，并不需要强一致性，因此牺牲一致性以换取高可用性是常见的做法。</p><p>CAP理论是横向可扩展分布系统设计的理论基石，对大数据产生的生态环境具有重要意义。</p><p>==CAP理论的核心：==</p><ul><li>一个分布式系统不可能同时满足很好的一致性，可用性和分区容错性的三大要求</li><li>根据CAP原理，将NoSQL数据库分成了满足CA原则，满足CP原则，满足AP原则三大类：<ul><li>CA：单点集群，满足一致性，可用性系统，通常可扩展性较差</li><li>CP：满足一致性，分区容错性的系统，通常性能不是很好</li><li>AP：满足可用性，分区容错性的系统，通常可能对一致性的要求较低</li></ul></li></ul><p>简单来说就是，在分布式系统的设计中不可能同时满足 C（一致性）A（可用性）P（容错性）的条件，由于分区容错（P）必不可少，因此我们需要对 C（一致性）和 A（可用性）进行取舍。</p><ul><li>ZooKeeper保证的是CP</li><li>Eureka保证的是AP</li></ul><h4 id="ZooKeeper保证的是CP"><a href="#ZooKeeper保证的是CP" class="headerlink" title="ZooKeeper保证的是CP"></a>ZooKeeper保证的是CP</h4><p>​    当我们向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但是不能接受服务直接down掉不可用。也就是说服务注册功能对可用性的要求要高于一致性，但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系的时候，剩余节点会重新进行leader的选举。<strong>但是问题在于</strong> 如果选举leader的时间过长（30~120s），且选举的期间整个ZK集群处于不可用的状态，这就导致在选举期间注册服务会处于瘫痪状态，在云部署的环境下，因为网络问题使得整个zk集群失去master节点是一种较大概率发生的事件，虽然最终服务能够修复，但是过长时间的选举导致注册服务长期不可用是无法忍受的。</p><h4 id="Eureka保证的是AP"><a href="#Eureka保证的是AP" class="headerlink" title="Eureka保证的是AP"></a>Eureka保证的是AP</h4><p>Eureka在设计的时候优先保证了可用性，<strong>Eureka中的各个节点都是平等的</strong>，几个节点挂掉不会影响到正常节点的工作，剩余的节点依然可以提供注册和查询服务，而Eureka的客户端在向某个Eureka注册时，如果发现连接失败，则会自动转换到其他的节点，只要还有一台Eureka存在，就能够保证服务的可用性，只不过接收到的信息肯不是最新的。除此之外，Eureka还存在一种自我保护的机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就会默认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p><ol><li>Eureka不再从注册列表中移除长时间没有收到心跳而应该过期的服务</li><li>Eureka依然可以接受服务注册和查询请求，但是不会被同步到其他节点上</li><li>当网络稳定是，当前实例新的注册信息会被同步到其他的节点中</li></ol><p><strong>==因此，Eureka可以很好的应对因为网络故障导致部分节点失去联系的情况，而不会像ZooKeeper那样使得整个注册服务瘫痪。==</strong></p><h2 id="Ribbon负载均衡实现"><a href="#Ribbon负载均衡实现" class="headerlink" title="Ribbon负载均衡实现"></a>Ribbon负载均衡实现</h2><h3 id="（1）ribbon是什么？"><a href="#（1）ribbon是什么？" class="headerlink" title="（1）ribbon是什么？"></a>（1）ribbon是什么？</h3><ul><li>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套==<strong>客户端负载均衡的工具</strong>==</li><li>简单来说，Ribbon的主要功能是提供客户端的软件负载均衡算法，将Netflix的中间层服务连接在一起，Ribbon的客户端组件提供一种完整的配置项目：如连接超时，重试等。简单来说，就是在配置文件中列出LoadBalance（简称LB：负载均衡）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机链接等）去连接这些机器，我们也很容易使用Ribbon实现自定义的负载均衡。</li></ul><h3 id="（2）ribbon能干嘛？"><a href="#（2）ribbon能干嘛？" class="headerlink" title="（2）ribbon能干嘛？"></a>（2）ribbon能干嘛？</h3><ol><li>负载均衡：Ribbon 可以根据特定的负载均衡策略，将请求分发到多个服务实例。</li><li>容错机制：Ribbon 提供了一些容错机制，如超时重试、熔断器、断路器等，以保证系统的可靠性。</li><li>易于定制：Ribbon 提供了各种配置选项，使用户可以对其进行灵活定制。</li><li>支持多种协议：Ribbon 支持 HTTP 和 TCP 等多种协议的负载均衡。</li><li>和其他组件集成：Ribbon 可以和其他微服务组件如 Eureka、Zookeeper 等集成，提供完整的微服务解决方案。</li></ol><h2 id="Feign负载均衡实现"><a href="#Feign负载均衡实现" class="headerlink" title="Feign负载均衡实现"></a>Feign负载均衡实现</h2><h3 id="（1）简介"><a href="#（1）简介" class="headerlink" title="（1）简介"></a>（1）简介</h3><p>Feign是Spring Cloud提供的声明式、模板化的HTTP客户端， 它使得调用远程服务就像调用本地服务一样简单，只需要创建一个接口并添加一个注解即可。</p><p>Spring Cloud集成Feign并对其进行了增强，使Feign支持了Spring MVC注解；Feign默认集成了Ribbon，所以Fegin默认就实现了负载均衡的效果。</p><p>只需要创建一个接口，然后加注释即可！</p><p>fegin，主要是社区，大家都很习惯面向的接口，是很多开发过人员的规范，调用微服务访问的两种方法：</p><ul><li>微服务名字【ribbon】</li><li>接口和注释【fegin】</li></ul><h3 id="（2）fegin能干什么？"><a href="#（2）fegin能干什么？" class="headerlink" title="（2）fegin能干什么？"></a>（2）fegin能干什么？</h3><ul><li>旨在使编写Java Http客户端变得更加容易</li><li>==在fegin的实现下，我们只需要创建一个接口并使用注解的方式来配置他（类似于之前Dao接口上标注Mapper注解，现在要一个微服务接口上标注一个fegin注解）==即可完成对服务提供方的接口绑定，简化了使用 Spring Cloud Ribbon时，自动封装服务调用客户端的开发量。</li></ul><p><strong>分布式系统面临的问题：</strong></p><p>复杂的分布式系统结构中的应用程序有数十个甚至更多的依赖关系，每个依赖关系在某些时刻会发生一些不可避免的失败！</p><p>==服务雪崩：==</p><p>服务雪崩，指的是由于服务提供者不可用导致服务调用者不可用，并且在生产过程中，这种不可用逐渐扩大的现象。</p><pre class=" language-xml"><code class="language-xml">举个例子：    比如我们现在的系统中有个日志服务姑且叫A，现在有个课表服务（暂且叫B）需要使用日志服务，然后又有其他服务（暂且叫C），他们都是分布式并且做了一定的可用性，但是有一天，日志服务中有一个实例异常了那会有什么影响    1.如果服务B正在调用这个异常实例，那么B会不可用。    2.比如原来能容纳3000的并发，由于一台服务不可用，那么系统容忍并发量下降。    3.在2的基础上，如果刚好处于一个高并发的时间点，容忍并发量下降，在高并发的时候也许就会出现许多用户的请结果都是异常，甚至，A服务直接回因为高并发给压蹦。    4.服务A全部宕机，如果是强依赖的系统，那么也许整个系统都不可用。</code></pre><p>发生原因：</p><pre class=" language-xml"><code class="language-xml">服务雪崩的发生时间主要可归类为三个阶段：1.服务提供者不可用2.重复调用3.服务调用者不可用</code></pre><h2 id="Hystrix断路器"><a href="#Hystrix断路器" class="headerlink" title="Hystrix断路器"></a>Hystrix断路器</h2><h3 id="（1）什么是Hystrix？"><a href="#（1）什么是Hystrix？" class="headerlink" title="（1）什么是Hystrix？"></a>（1）什么是<strong>Hystrix</strong>？</h3><p>在<a href="">分布式</a>环境中，许多服务依赖项不可避免地将会失败。Hystrix是一个通过添加延迟容忍和容错逻辑来帮助您控制这些分布式服务之间的交互的库。Hystrix通过隔离服务之间的访问点来实现这一点，停止跨级的级联故障，并提供备用选项，所有这些都可以提高系统的整体弹性。</p><p>“断路器” 本身是一种开关装置， 当某个服务单元发生故障之后,通过断路器的故障监控(类似熔断保险丝)，向调用方返回一个符合预期的、可处理的备选响应(FallBack) ，而不是长时间的等待或者抛出调用方无法处理的异常,这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><h3 id="（2）Hystrix的设计目的是什么？"><a href="#（2）Hystrix的设计目的是什么？" class="headerlink" title="（2）Hystrix的设计目的是什么？"></a>（2）Hystrix的<strong>设计目的</strong>是什么？</h3><ol><li>通过第三方客户端库，对访问（通常是通过网络）的依赖项进行保护，并控制延迟和失败。</li><li>在一个复杂的分布式系统中停止级联故障。</li><li>快速失败，迅速恢复。</li><li>在可能的情况下，后退并优雅地降级。</li><li>启用近实时监控、警报和操作控制。</li></ol><h3 id="（3）Hystrix的实现方式："><a href="#（3）Hystrix的实现方式：" class="headerlink" title="（3）Hystrix的实现方式："></a>（3）Hystrix的实现方式：</h3><ul><li><p>==服务降级==（客户端）</p><ol><li><p>什么是服务降级？</p><p>服务降级是一种应对系统负载过高或者服务不可用的策略，通过临时屏蔽某些非核心功能来保证系统的可用性。在Spring Cloud中，服务降级是通过在调用链路中 <strong>使用备用方法</strong>  or 准备一个 <strong>FallbackFactory来返回一个默认值（缺省值）</strong> 来处理异常情况的过程。</p></li><li><p>有什么好处？</p><p>服务降级可以有效地保护整个系统免受故障的影响，提高系统的可用性和稳定性。</p></li></ol></li><li><p>==服务熔断==（服务端）</p><ol><li><p><strong>什么是服务熔断？</strong></p><p>服务熔断的原理是通过在服务调用的过程中设置一个熔断器，并监控服务的调用情况。当服务的错误率或失败次数超过设定的阈值时，熔断器会打开，将后续的请求快速失败，而不是继续调用具有高延迟或已经失效的服务。当熔断器打开后，可以选择返回一个预设的默认值或者执行降级逻辑，以保证系统的相应性能。<em>熔断机制的注解是 @HystrixCommand</em></p></li><li><p><strong>有什么好处？</strong></p><p>服务熔断的好处是可以避免因为某个服务的故障或延迟而导致整个系统的崩溃，通过快速失败和降级处理，可以提高系统的可用性和稳定性。在Spring Cloud中，常用的服务熔断器是Netflix开源的Hystrix，它提供了丰富的配置选项和监控功能，可以方便地集成到微服务架构中。通过使用Hystrix，我们可以在服务调用出现问题时进行故障处理，例如返回默认值、执行降级逻辑或者触发自定义的告警机制，以保证系统的可靠性。</p></li></ol></li><li><p>==接近实时的监控==</p><p>Dashboard监控流</p><p>依赖包：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--断路器仪表盘依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-netflix-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.netflix.hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hystrix-javanica<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>然后在主启动类添加注解@EnableHystrixDashboard开启监控：并且添加一个servlet：”/actuator/hystrix.stream”，就可以实现监控</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token annotation punctuation">@EnableHystrix</span><span class="token annotation punctuation">@EnableHystrixDashboard</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceBApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ServiceBApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//增加一个servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">hystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ServletRegistrationBean servletRegistrationBean <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/actuator/hystrix.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  servletRegistrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后就可以进入对应服务端口下的/hystrix页面进行监控。</p></li></ul><h2 id="Zuul路由网关"><a href="#Zuul路由网关" class="headerlink" title="Zuul路由网关"></a>Zuul路由网关</h2><h3 id="（1）什么是Zuul"><a href="#（1）什么是Zuul" class="headerlink" title="（1）什么是Zuul ?"></a>（1）什么是Zuul ?</h3><p>​Zuul包含了对请求的路由和过滤两个最主要的功能：</p><p>​其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础，而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础。Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获取其他的为服务信息，即以后访问微服务都是通过Zuul跳转后获得。</p><ul><li>注意：Zuul服务最终还是会注册进Eureka</li><li>提供：代理 + 路由 + 过滤三大功能</li></ul><h3 id="（2）Zuul能干嘛-？"><a href="#（2）Zuul能干嘛-？" class="headerlink" title="（2）Zuul能干嘛 ？"></a>（2）Zuul能干嘛 ？</h3><ul><li>路由</li><li>过滤</li></ul><h2 id="SpringCloud-config分布式配置"><a href="#SpringCloud-config分布式配置" class="headerlink" title="SpringCloud config分布式配置"></a>SpringCloud config分布式配置</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>分布式系统面临的-配置文件的问题</p><p>微服务意味着要将单体应用中的业务拆分成一个个的子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务，由于每个服务都需要必要的配置信息才能运行，所以一套集中式的，动态的配置管理设备是必不可少的。</p><p>SpringCloud提供了ConfigServer来解决这个问题，我们每一个微服务自己带着一个 application.yml，那上百个配置文件怎么办？？</p><h3 id="什么是SpringCloud-config分布式配置中心"><a href="#什么是SpringCloud-config分布式配置中心" class="headerlink" title="什么是SpringCloud config分布式配置中心"></a>什么是SpringCloud config分布式配置中心</h3><p>SpringCloud config为微服务架构中的微服务提供集中化的外部配置文件，配置服务为各个不同的微服务应用的所有环节提供了一个中心化的外部配置</p><p>SpringCloud config分为服务端和客户端两个部分：</p><ul><li>服务端也称 分布式配置中心，他是一个独立的微服务应用，用来连接配置服务器并为客户端提供配置信息加密，解密信息等访问接口</li><li>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获得和加载配置信息，配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具方便的管理和访问配置内容。</li></ul><h3 id="SpringCloud-config分布式配置中心能干嘛"><a href="#SpringCloud-config分布式配置中心能干嘛" class="headerlink" title="SpringCloud config分布式配置中心能干嘛"></a>SpringCloud config分布式配置中心能干嘛</h3><ul><li>集中管理配置文件</li><li>不同环境，不同配置，动态化的更新配置，分环境部署，比如 /dev   /test  /prod  ……</li><li>运行期间动态调整配置，不再需要在每个服务器上编写配置文件，服务会想配置中心统一拉去配置自己的信息</li><li>当配置发生变动时，服务不需要重启，即可感知到配置的变化，并应用新的配置</li><li>将配置信息系以REST接口的形式暴露</li></ul><h3 id="SpringCloud-config分布式配置中心与-GitHub-整合"><a href="#SpringCloud-config分布式配置中心与-GitHub-整合" class="headerlink" title="SpringCloud config分布式配置中心与 GitHub 整合"></a>SpringCloud config分布式配置中心与 GitHub 整合</h3><p>​由于SpringCloud config默认使用git来存储文件（也有其他的方式，例如支持SVN和本地文件），但是最推荐的还是git，而且使用的是 HTTP / https 访问的形式。</p><h2 id="A-Little-Tip"><a href="#A-Little-Tip" class="headerlink" title="A Little Tip"></a>A Little Tip</h2><p>在 xx.yml文件中配置Eureka时， <code>erueka.instance.prefer-ip-address:true  </code> 可以显示注册服务网的ip地址</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM学习</title>
      <link href="/2024/03052.html"/>
      <url>/2024/03052.html</url>
      
        <content type="html"><![CDATA[<h1 id="JVM学习"><a href="#JVM学习" class="headerlink" title="JVM学习"></a>JVM学习</h1><ul><li><p>JVM的位置</p><p> <img src="D:\JAVA学习\JVM学习\笔记图片\JVM位置.png"></p></li><li><p>JVM的体系结构</p><p><img src="D:\JAVA学习\JVM学习\笔记图片\JVM结构图.png"></p></li><li><p>类加载器和<strong>双亲委派机制</strong></p><p>作用：加载 Class 类</p><p><img src="D:\JAVA学习\JVM学习\笔记图片\类加载器.png"></p><ol><li><p>虚拟机自带的加载器</p></li><li><p>启动类（根）加载器</p></li><li><p>扩展类加载器（Ext）</p></li><li><p>应用程序加载器 （APP）</p></li><li><p>加载器之间的层级关系：</p><p><img src="D:\JAVA学习\JVM学习\笔记图片\类加载器的层级关系.png"></p></li></ol><ul><li><p>类加载的机制：在 xx.java 文件经过编译后变成 xx.class 文件，类的加载过程就是把 xx.class 文件加载到 JVM 的内存里，当装载               完成后就会得到一个 Class 对象，进而使用 new 来进行对象的实例化。在类记载的过程中需要使用到类加载器，JVM在运行过程中会产生三个具有层级关系的类加载器，每一个类加载器分别作用于不同作用范围的 jar 包</p></li><li><p>双亲委派机制：</p><ol><li>类加载器收到类加载的请求</li><li>将这个请求委托给父类加载器去完成，一直向上层委托，直到最高层启动类加载器</li><li>加载器会检查能否加载当前这个类，能加载就结束，使用当前加载器；若不能，就抛出异常，通知子加载器进行加载</li><li>重复步骤 3</li></ol><p>百度解释：</p><p><strong>双亲委派机</strong>制是Java类加载器中采用的一种类加载策略。该机制的核心思想是：如果一个类加载器收到了类加载请求，默认先将该请求委托给其父类加载器处理。只有当父级加载器无法加载该类时，才会尝试自行加载。</p><p>具体来说，一个类在收到类加载请求后不会尝试自己加载这个类，而是把该类加载请求向上委派给其父类加载器去完成，其父类加载器在接收到该类加载请求后又会将其委派给自己的父类，以此类推，这样所有的类加载请求都被向上委派到启动类加载器中。若父类加载器在接收到类加载请求后发现自己也无法加载该类（通常原因是该类的Class文件在父类的类加载路径中不存在），则父类会将该信息反馈给子类并向下委派子类加载器加载该类，直到该类被成功加载，若找不到该类，则 JVM 会抛出ClassNotFoud异常。</p><p>这种加载方式的优点：</p><ul><li>1、提高安全性，防止加载器所加载的 jar包中的功能类被覆盖</li><li>2、避免重复加载导致的程序混乱</li></ul></li></ul></li><li><p>沙箱安全机制</p></li><li><p>Native本地方法栈</p></li><li><p>方法区：static, final, Class, 常量池~</p></li><li><p>深入理解栈</p><ol><li><p>堆，栈，方法区的 <strong>交互关系</strong></p><p><img src="D:\JAVA学习\JVM学习\笔记图片\堆栈方法层的关系.png"></p></li></ol></li><li><p>新生区：</p><p>类：诞生，成长甚至消亡的地方</p><p>伊甸园：所有的对象都是在伊甸园区 new出来的</p><p>幸存者区：0区和1区</p><p><img src="D:\JAVA学习\JVM学习\笔记图片\新生区老年区永久区的示例图.png"></p></li><li><p>养老区：</p><p>从新生区经过轻GC淘汰之后依然存活的数据会进入老年区</p></li><li><p>永久区：<strong>这个区域常驻内存，用来存放自身携带的Class对象。InterFace元数据，存储的是 java运行时的一些环境或类信息，这个区域不存在垃圾回收，关闭VM虚拟机会释放这个区域</strong></p><ul><li>jdk 1.6以前：永久代，常量池在方法区中</li><li>jdk 1.7        ：永久代，但是慢慢退化了，出现了 <code>去永久代</code> 概念，常量池在堆中</li><li>jdk1.8以后 ：无永久代，常量池在元空间</li></ul></li></ul><p><img src="D:\JAVA学习\JVM学习\笔记图片\区域模型.png"></p><p>OOM（OutOfMemoryError)：内存满了需要进行调优</p><ul><li>1、尝试扩大堆内存看结果（-Xms1024m -Xmx1024m -XX:+PrintGCDetails）</li><li>2、分析内存，看一下代码那个地方出现了问题（有专业分析工具）</li></ul><p>使用 JPofiler工具分析OOM原因</p><p>-Xms 分配默认初始化内存，默认1/64</p><p>-Xmx 设置最大内存分配，默认1/4</p><p>-XX:+PrintDumpOnOutOfMemoryError</p><p>GC：垃圾回收</p><p>只有在堆和方法区存在，GC共有两种类型，一种是轻GC，一种是重GC（FULL GC）</p><p>GC相关题目：</p><ul><li>JVM的内存模型和分区——详细到每个区是什么？</li><li>堆里面的分区有那些？Eden（伊甸园区），from（幸存者0区），to（幸存者1区），老年区都有哪些特点？</li><li>GC算法有哪些？标记清除法，标记整理，复制算法，引用计数法</li></ul><p><strong>引用计数法</strong></p><p><img src="D:\JAVA学习\JVM学习\笔记图片\引用计数法.png"></p><p><strong>复制算法</strong></p><p><img src="D:\JAVA学习\JVM学习\笔记图片\复制算法.png"></p><ul><li>好处：没有多余的碎片</li><li>坏处：浪费了内存空间，多了一半的 幸存区空间（to）</li></ul><p>复制算法的使用场景：新生对象的存活度较低（一般来说较为适应新生区的内存操作）</p><p><strong>标记清除法</strong></p><p><img src="D:\JAVA学习\JVM学习\笔记图片\标记清除法.png"></p><ul><li>优点：不需要额外的空间</li><li>缺点：需要多次扫描浪费时间，会产生内存碎片</li></ul><p><strong>标记压缩</strong></p><p><img src="D:\JAVA学习\JVM学习\笔记图片\标记压缩.png"></p><p>总结：</p><ol><li>内存效率：复制算法 &gt; 标记消除法 &gt; 标记压缩存储 （时间复杂度）</li><li>内存整齐度：复制算法 = 标记压缩存储 &gt; 标记消除法</li><li>内存利用率：标记压缩存储  = 标记消除法 &gt; 复制算法</li></ol><p>思考：有没有最优的算法？</p><p>答案：没有最优的，只有最合适的，需要根据不同的场景选择最合适的方法！！！</p><p>新生区：</p><ul><li>存活率低</li><li>适合使用复制算法</li></ul><p>老年区：</p><ul><li>区域大：存活率高</li><li>标记清除法（内存碎片不是太多）- 标记压缩 混合实现</li></ul><h1 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h1><ol><li><p>什么是JMM？</p></li><li><p>他是干嘛的？</p></li><li><p>他该如何学习？</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java多线程</title>
      <link href="/2024/03045.html"/>
      <url>/2024/03045.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h2><h5 id="1、什么是多线程？"><a href="#1、什么是多线程？" class="headerlink" title="1、什么是多线程？"></a>1、什么是多线程？</h5><p>指在软件或者硬件中同一时间并行实现多个线程并发执行的技术（即在一个程序中运行多个不同的线程来执行不同的任务）</p><hr><h5 id="2、他有什么作用？优缺点有哪些？"><a href="#2、他有什么作用？优缺点有哪些？" class="headerlink" title="2、他有什么作用？优缺点有哪些？"></a>2、他有什么作用？优缺点有哪些？</h5><p><strong>作用：</strong>　</p><p>（1）在单核CPU中，将CPU分为很小的时间片，在每一时刻只能有一个线程在执行，是一种微观上轮流占用CPU的机制。由于CPU轮询的速度非常快，所以看起来像是“同时”在执行一样。多线程会存在线程上下文切换，会导致程序执行速度变慢;</p><p>（2）多线程不会提高程序的执行速度，反而会降低速度。但是对于用户来说，可以减少用户的等待响应时间，提高了资源的利用效率。</p><p>（3）多线程并发利用了CPU轮询时间片的特点，在一个线程进入阻塞状态时，可以快速切换到其余线程执行其余操作，这有利于提高资源的利用率，限度的利用系统提供的处理能力，有效减少了用户的等待响应时间。</p><p>（4）便于建模，这是另外个没有这么明显的优点了。假设有一个大的任务A，单线程编程，那么就要考虑很多，建立整个程序模型比较麻烦。但是如果把这个大的任务A分解成几个小任务，任务B、任务C、任务D，分别建立程序模型，并通过多线程分别运行这几个任务，那就简单很多了。</p><p><strong>优点：</strong></p><ol><li>提高性能：现在计算机绝大多数拥有多核处理器，多线程技术可以充分利用多个核心，同时执行多个不同的任务，大大提升了程序的吞吐率和运行速度；</li><li>共享资源：多个线程可以共享同一进程的内存空间，从而实现线程之间的资源共享；</li><li>并发处理：多线程允许程序同时处理多个任务，从而更加快速有效的处理并发请求、消息和数据；</li><li>异步编程：多线程可用于实现异步编程模型，通过在后台执行任务来提高程序的执行效率；</li><li>模块化设计：使用多线程可以将程序分化为多个不同的模块，每个模块都拥有单独的线程来完成任务，<strong>降低了代码之间的耦合度</strong>，更加便于管理和维护；</li><li>改善用户体验：使用多线程可以提高程序的运行速度，在GUI程序中可以确保界面响应灵敏，不会因为一个耗时过大的操作浪费时间</li></ol><p><strong>缺点：</strong></p><ol><li>线程切换和调度开销：线程的切换和调度需要消耗系统资源，过多的线程切换可能会影响程序性能。</li><li>线程安全问题：多个线程访问共享资源时，可能会出现死锁、竞态条件等安全问题。</li><li>调试和测试难度：由于线程之间相互独立，调试和测试多线程程序可能需要特殊的工具和技巧。</li><li>代码可读性差：多线程程序的代码结构可能变得复杂，影响代码的可读性。</li><li>资源消耗：每个线程都需要占用内存空间和系统资源，<strong>过多的线程</strong>会增加系统资源的消耗。</li><li>数据同步问题：在多线程编程中，如果不正确地处理数据同步和互斥访问，可能会导致<strong>数据竞争</strong>和<strong>程序不稳定</strong>。</li></ol><hr><h5 id="3、他应该怎样实现？创建多线程的方式有哪些？这些方法有什么区别？"><a href="#3、他应该怎样实现？创建多线程的方式有哪些？这些方法有什么区别？" class="headerlink" title="3、他应该怎样实现？创建多线程的方式有哪些？这些方法有什么区别？"></a>3、他应该怎样实现？创建多线程的方式有哪些？这些方法有什么区别？</h5><p>可以继承Thread类，或者调用Runnable / Callable接口来实现</p><ul><li><p>继承Thread类：</p><pre class=" language-Java"><code class="language-Java">// 继承多线程类public class TestThread extends Thread{    @Override    public void run() {        // run()函数，多线程执行体        for (int i = 0; i < 20; i++) {            System.out.println("i am studying--" + i);        }    }    public static void main(String[] args) {        //main()函数，为主函数        TestThread testThread = new TestThread();        testThread.start();        for (int i = 0; i < 200; i++) {            System.out.println("我在学习多线程--" + i);        }    }}</code></pre></li><li><p>调用Runnable接口：</p><pre class=" language-Java"><code class="language-Java">//基础调用方式public class TestNew {    public static void main(String[] args) {        MyThread2 myThread2 = new MyThread2();//调用Runnable接口需要一个代理对象        new Thread(myThread2).start(); //需要调用Thread.start()启动线程     }}class MyThread2 implements Runnable{    @Override    public void run() {        System.out.println("这是调用Runnable接口使用线程的方法");    }}</code></pre><pre class=" language-Java"><code class="language-Java">import org.apache.commons.io.FileUtils;import java.io.File;import java.net.URL;//多线程下载图片//调用 Runnable接口public class TestThread2 implements Runnable{    private String url;    private String name;    public TestThread2(String url, String name) {        this.url = url;        this.name = name;    }    @Override    public void run() {        WebDownLoader webDownLoader = new WebDownLoader();        webDownLoader.downLoader(url, name);        System.out.println("正在下载，文件下载名为：" + name);    }    public static void main(String[] args) {        TestThread2 t1 = new TestThread2("https://imga2.5054399.com/upload_pic/2024/2/26/4399_16291960410.jpg","1.jpg");        TestThread2 t2 = new TestThread2("https://imga2.5054399.com/upload_pic/2024/3/1/4399_17225675210.jpg","2.jpg");        TestThread2 t3 = new TestThread2("https://imga1.5054399.com/upload_pic/2017/1/24/4399_10181217218.jpg","3.jpg");        // runnable方法需要 new一个 Thread对象进行        new Thread(t1).start();        new Thread(t2).start();        new Thread(t3).start();    }}//下载器class WebDownLoader {    public void downLoader(String url, String name) {        try {            FileUtils.copyURLToFile(new URL(url), new File(name));        }catch (Exception e) {            System.out.println("IO异常，downLoader方法出现问题："+e);        }    }}</code></pre></li><li><p>调用callable接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestNew</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FutureTask<span class="token operator">&lt;</span>Object<span class="token operator">></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String s <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyThread3</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"这是调用callable接口使用线程的方法"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>三种实现方式的区别：</p><ol><li><p>callable和runnable区别</p><ul><li><p>使用方法不同：</p><ul><li>Runnable接口只有一个 run( ) 方法，该方法不返回任何值，因此无法抛出任何checked Exception。</li><li>Callable接口则有一个 call( ) 方法，它可以返回一个值，并且可以抛出一个checked Exception。</li></ul></li><li><p>返回值不同：</p><ul><li>Runnable的 run( ) 方法没有返回值，只是一个void类型的方法。</li><li>Callable的 call( ) 方法却必须有一个返回值，并且返回值的类型可以通过 **泛型 **进行指定。</li></ul></li><li><p>异常处理不同：</p><ul><li>在Runnable中，我们无法对run()方法抛出的异常进行任何处理。</li><li>但在Callable中，自定义的call()方法可以抛出一个checked Exception，并由其执行者Handler进行捕获并处理。</li></ul></li><li><p>使用场景不同：</p><ul><li><p>Runnable适用于那些不需要返回值，且不会抛出checked Exception的情况，比如简单的打印输出或者修改一些共享的变量。</p></li><li><p>Callable适用于那些需要返回值或者需要抛出checked Exception的情况，比如对某个任务的计算结果进行处理，或者需要进行网络或IO操作等。</p></li><li><p>在Java中，常常使用Callable来实现异步任务的处理，以提高系统的吞吐量和响应速度。</p></li></ul></li></ul><p><strong>注意点：</strong>Callable接口支持返回执行结果，此时需要调用 FutureTask.get() 方法实现，此方法会<strong>阻塞主线程</strong>直到获取 ”将来“ 的结果；当不调用此方法时，主线程不会阻塞！</p></li></ol><hr><h5 id="4、使用多线程的过程中是否会出现问题？会出现哪些问题？应该怎么解决？"><a href="#4、使用多线程的过程中是否会出现问题？会出现哪些问题？应该怎么解决？" class="headerlink" title="4、使用多线程的过程中是否会出现问题？会出现哪些问题？应该怎么解决？"></a>4、使用多线程的过程中是否会出现问题？会出现哪些问题？应该怎么解决？</h5><p>虽然多线程的使用可以带来很多的便利，但同时也会带来一些问题</p><p>下面是一些常见问题的代码案例：</p><ul><li><p>多窗口售卖火车票：</p><pre class=" language-Java"><code class="language-Java">//不安全的买票机制//线程不安全，会出现负数public class UnsafeBuyTicket {    public static void main(String[] args) {        buyTicket buyTicket = new buyTicket();        new Thread(buyTicket,"苦逼的我").start();        new Thread(buyTicket,"幸运的你").start();        new Thread(buyTicket,"天杀的黄牛").start();    }}class buyTicket implements Runnable{    //票的数量    private int ticketNums = 20;    //判断程序停止的条件    boolean flag = true;    @Override    public void run() {        //抢票        while (flag) {            try {                rubberyTicket();            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    //抢票的方法    private void rubberyTicket() throws InterruptedException {        //首先判断票还在不在        if (ticketNums <= 0) {            flag = false;            return;        }        //模拟延时        Thread.sleep(100);        //抢票        System.out.println(Thread.currentThread().getName() + "-->抢到了第" + ticketNums-- + "张票");    }}</code></pre><p>运行结果：</p><p><img src="D:\JAVA学习\多线程学习\多线程笔记图片\火车售票运行结果.png"></p><p>我们可以看到上面的运行结果不仅出现了抢到重复的票，甚至出现了负数；</p></li><li><p>银行取钱：</p><pre class=" language-Java"><code class="language-Java">//不安全银行取钱public class UnsafeBank {    public static void main(String[] args) {        //账户        Account account = new Account(100, "结婚基金");        Drawing you = new Drawing(account, 50, "你");        Drawing girlFriend = new Drawing(account, 100, "girlFriend");        you.start();        girlFriend.start();    }}//规定一个账户class Account {    int money; //余额    String name; // 用户名    public Account(int money, String name) {        this.money = money;        this.name = name;    }}//银行：模拟取款class Drawing extends Thread{    //账户    Account account;    //取了多少钱    private int drawingMoney;    //还剩多少钱    private int nowMoney;    public Drawing(Account account,int drawingMoney, String name) {        super(name);        this.account = account;        this.drawingMoney = drawingMoney;    }    //synchronized默认锁的是 this    @Override    public void run() {            //取钱之前先看看余额够不够取            if (account.money - drawingMoney < 0) {                System.out.println(Thread.currentThread().getName() + "钱不够，取不了");                return;            }            //模拟延时            try {                Thread.sleep(1000);            } catch (InterruptedException e) {                e.printStackTrace();            }            //账户余额的钱 = 账户存款 - 取的钱            account.money = account.money - drawingMoney;            //你现在手里的钱 = 手里的钱 + 取的钱            nowMoney = nowMoney + drawingMoney;            System.out.println(account.name + "余额为：" + account.money);            System.out.println(this.getName() + "手里的钱为：" + nowMoney);    }}</code></pre></li></ul><p>运行结果：</p><p><img src="D:\JAVA学习\多线程学习\多线程笔记图片\银行取钱运行结果.png"></p><p>通过这个结果我们发现，账户余额也出现了负数的情况；</p><p>这两个demo都出现了一些不合理的情况，比如出现抢到 第 -1张票，或是抢到重复的票，或者是余额剩余 -50元，产生这种情况大的原因是由多线程操作共享资源tickets所导致的线程安全问题。在多个线程在执行售票的任务的时候，由于在售票的代码中访问了同一个成员变量tickets。可是在操作tickets的这些语句中，一个线程操作到其中的一部分代码的时候，CPU切换到其他的线程上开始执行代码。这样就会导致tickets变量中的值被修改的不一致。</p><p><strong>总结多线程的安全问题发生的原因：</strong></p><ol><li><em>首先必须有多线程。</em></li><li>多个线程在操作共享的数据,并且对共享数据有修改。</li><li>本质原因是CPU在处理多个线程的时候，在操作共享数据的多条代码之间进行切换导致的。</li></ol><p><strong>多线程可能会出现的问题总结：</strong></p><ol><li><em>线程安全问题</em>：当多个线程访问同一块共享内存区域时，如果这些访问不是原子的，可能会发生数据的不一致或丢失。这是因为线程可能在访问过程中被暂停或取消，导致对共享资源的未完成操作被其他线程看到已完成的情形。</li><li><em>性能问题</em>：线程的创建和销毁会对系统内存产生较大的开销。如果线程的数量超过了处理器的核心数量，许多线程可能会处于空闲状态，从而浪费系统的资源和影响垃圾回收过程。此外，频繁的线程创建和销毁会影响程序的执行效率。</li><li><em>活跃性问题</em>：死锁是一种常见的并发错误，当两个或更多的线程都在争夺同一个资源，并且它们都需要对方释放这个资源时，会发生死锁。另一种问题是饥饿，这是指某个线程或多个线程因无法获得所需资源而长时间得不到执行的情况。</li><li><em>调度开销</em>：操作系统会根据调度算法为线程分配时间片，以便线程能够有机会执行。这种上下文切换的开销较大，尤其是在线程数量远超过处理器核心数量的场景下。此外，缓存失效也是多线程环境中的一种性能问题，因为线程调度可能导致缓存中的数据不再有效。</li><li><em>协作开销</em>：在多线程环境中，为了确保数据的一致性和安全性，可能需要牺牲一些性能以避免数据冲突和不一致。例如，为了保证线程安全，编译器和CPU可能不会进行某些优化，或者线程之间的通信操作会增加额外的开销。</li></ol><p>既然存在这么多问题，自然会有<strong>解决问题的方法</strong>：</p><ol><li><p>同步代码块：</p><p>说明：我们了解到线程的安全问题其实就是由多个线程同时处理共享资源所导致的,要想解决线程的安全问题,必须保证下面用于处理共享资源的代码在任何时刻只能被一个线程访问。</p><p>为了实现这种限制,Java中提供了同步机制,当多个线程使用同一个共享资源时,可以将处理共享资源的代码放置在一个代码块中,使用Synchronized关键字来修饰.被称作同步代码块.</p><p>Synchronized(锁对象) {</p><p>}</p><ul><li>锁对象是任意的一个对象</li><li>资源操作的所有代码需要被同步</li></ul><p>要想保证线程的安全：需要在操作共享数据的地方，加上线程的同步锁。<br>锁对象的前提条件 :必须要保证 <code>锁对象</code>的唯一性.</p><p>这样做的好处是, 同步方法被所有线程所共享, 方法所在的对象相对于所有线程来说是唯一的, 从而保证了锁的唯一性. 当一个线程执行该方法时, 其它的线程就不能进入到该方法中, 直到这个线程执行完该方法为止, 从而达到了线程同步的效果.</p><p>以抢票为例：给 rubberyTicket()方法添加一个 synchronized关键字</p><p><img src="D:\JAVA学习\多线程学习\多线程笔记图片\同步线程方法.png"></p></li></ol><p>​运行结果变为正常，不会出现 第0/-1张票，也不会出现多人抢到同一张票的情况</p><p>​<img src="D:\JAVA学习\多线程学习\多线程笔记图片\同步锁之后售票运行结果.png"></p><p><strong>注意</strong>：同步代码块中的锁对象可以是任意类型的对象,但多个线程共享的锁对象必须是唯一的.。<code>任意</code> 说的是共享锁对象的类型， 所以,，锁对象的创建代码不能放在 run() 方法中。否则每个线程运行到 run()方法都会创建一个新对象，这样每个线程都会有一个不同的锁, 每个锁都有自己的标志位. 线程之间便不能产生同步的效果。</p><hr><h5 id="5、什么是高并发？他会导致那些问题？如何解决高并发问题？"><a href="#5、什么是高并发？他会导致那些问题？如何解决高并发问题？" class="headerlink" title="5、什么是高并发？他会导致那些问题？如何解决高并发问题？"></a>5、什么是高并发？他会导致那些问题？如何解决高并发问题？</h5><p>（1）高并发介绍：</p><p>高并发（High Concurrency）通常是指通过设计保证系统能够同时并行处理很多请求。通俗来讲，高并发是指系统在同一时间段内处理大量并发请求的能力。</p><p>（2）可能会导致的问题：</p><ol><li>资源竞争：多个线程同时访问共享的资源，如数据库连接、文件等，可能导致资源竞争问题，包括数据不一致、死锁等。</li><li>线程安全问题：多个线程同时访问共享的变量或对象时，可能会导致数据错误或不一致的问题。</li><li>性能瓶颈：高并发情况下，系统的性能可能会受到限制，导致响应时间延长或系统崩溃。</li></ol><p>（3）解决方法：</p><ol><li>使用线程池：通过线程池来管理线程，控制线程的数量，避免线程创建和销毁的开销，并能限制并发请求数量，避免资源耗尽。</li><li>使用缓存：通过使用缓存技术，将计算结果或数据库查询结果缓存起来，减少对数据库等资源的访问，提高系统的并发处理能力。</li><li>数据库优化：对数据库进行优化，包括索引的设计、查询语句的优化等，提高数据库的并发处理能力。</li><li>使用分布式系统：将系统拆分成多个独立的服务，通过分布式部署来提高系统的并发处理能力。</li><li>使用消息队列：将请求转化为消息，通过消息队列来异步处理请求，减少直接面对高并发带来的压力。</li><li>使用缓存技术：通过使用缓存技术，将计算结果或数据库查询结果缓存起来，减少对数据库等资源的访问，提高系统的并发处理能力。</li></ol><p>以上这些方法并非适用于所有场景，具体的解决方案需要根据具体的业务和系统需求来确定。</p><hr><h5 id="6、死锁是什么？他的产生原因有哪些？有什么解决办法？"><a href="#6、死锁是什么？他的产生原因有哪些？有什么解决办法？" class="headerlink" title="6、死锁是什么？他的产生原因有哪些？有什么解决办法？"></a>6、死锁是什么？他的产生原因有哪些？有什么解决办法？</h5><p>死锁：是指两个或者两个以上的线程在执行的过程中，因争夺资源产生的一种互相等待现象（就是指两个或多个进程持有对方进程所需要的资源，形成僵持）</p><p>例如两个女孩都需要化妆，灰姑娘首先拿到了口红，而白雪公主首先拿到了镜子，但是两人都不愿意让出自己的东西，还想要对方的资源，于是双方相互等待造成死锁，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">deathLock1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        makeup girl1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">makeup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"灰姑娘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        makeup girl2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">makeup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"白雪公主"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动线程</span>        girl1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        girl2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//化妆</span><span class="token comment" spellcheck="true">//1. 定义一个口红类</span><span class="token keyword">class</span> <span class="token class-name">Lipstick</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2. 定义一个镜子类</span><span class="token keyword">class</span> <span class="token class-name">Mirror</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3. 定义一个执行类并继承 Thread方法</span><span class="token keyword">class</span> <span class="token class-name">makeup</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//要化妆首先要获取装备，需要添加 static否则不会发生死锁</span>    <span class="token comment" spellcheck="true">//类在 main方法中被 new 了二次，td1和 td2各自分别产生了 o1,o2。</span>    <span class="token comment" spellcheck="true">//如果没有static，创建的就是各个线程各自对象，就没法在线程之间共享了</span>    <span class="token keyword">static</span> Lipstick lipstick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lipstick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> Mirror mirror <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//其次要获取执行对象</span>    <span class="token keyword">int</span> chance<span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">makeup</span><span class="token punctuation">(</span><span class="token keyword">int</span> chance<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>chance <span class="token operator">=</span> chance<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//化妆</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">makingUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义一个化妆的方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">makingUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chance <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipstick<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 获取口红的锁</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"拿到了口红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 停止一秒后去拿镜子</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirror<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 获取镜子的锁</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"拿到了镜子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirror<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 获取镜子的锁</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"拿到了镜子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 停止2秒后去拿口红</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipstick<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 获取口红的锁</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"拿到了口红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p><img src="D:\JAVA学习\多线程学习\多线程笔记图片\死锁问题.png"></p><pre class=" language-Java"><code class="language-Java">* 产生死锁的必要条件：* 1. 互斥条件：一个资源每次只能被一个进程使用* 2. 请求与保持条件：一个进程因请求资源在阻塞时，对已获得的资源不放* 3. 不剥夺条件：进程已获得资源，在未完成时，不可以剥夺资源* 4. 循环等待条件：在若干个进程之间形成一种头尾相接的循环等待资源关系。</code></pre><p>1. </p><p>解决死锁的办法：解决上述条件的一个或多个，就可以解决死锁问题</p><ol><li>避免使用多个锁：当多个线程需要获取多个锁时，可以尝试将多个锁合并为一个锁，或者将一个锁拆分为多个锁，以避免死锁的发生。</li><li>保持锁的顺序一致：当多个线程需要获取多个锁时，确保它们获取锁的顺序是一致的，避免不同线程以不同的顺序获取锁而导致死锁。</li><li>设置获取锁的超时时间：在获取锁时设置一个超时时间，如果在指定的时间内无法获取到锁，则放弃当前获取的锁，等待一段时间后重新尝试获取锁。</li></ol><p>具体代码实现如下：</p><p>（1）使用synchronized关键字：</p><ul><li><p>synchronized修饰的方法会自动获取对象的内置锁（也称为同步锁），只有当前线程能够进入该方法并执行其中的代码。其他线程需要等待当前线程释放锁才能进入该方法。这样就确保了每次只有一个线程能够执行被synchronized修饰的代码段，从而保证了线程的安全性。</p><p>修改后代码如下：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">makingUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chance <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipstick<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 获取口红的锁</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"拿到了口红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 停止一秒后去拿镜子</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirror<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 获取镜子的锁</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"拿到了镜子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mirror<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 获取镜子的锁</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"拿到了镜子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 停止2秒后去拿口红</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lipstick<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 获取口红的锁</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"拿到了口红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>运行结果：</p><p><img src="D:\JAVA学习\多线程学习\多线程笔记图片\死锁修改完成后.png"></p><p>可以看到死锁问题已经得到解决。</p></li></ul><p>（2）使用 ReentrantLock 类：</p><ul><li><p>ReentrantLock 提供了更加灵活、功能更强大的锁机制。与synchronized不同，ReentrantLock 支持公平锁和非公平锁两种模式，还可以设置超时等待时间。</p><p>修改后代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义一个Lock锁</span><span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加锁</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticketNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ticketNum<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解锁</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">*</span> <span class="token keyword">synchronized</span> 与 <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>锁的区别：<span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">.</span> lock是显式锁，需要手动的开关锁；<span class="token keyword">synchronized</span>是隐式锁，出了作用区域会自动释放<span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">.</span> lock只有代码块锁；<span class="token keyword">synchronized</span>有代码块锁和方法锁<span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">.</span> 使用 lock锁，JVM会花费较少的时间来调度线程，性能更好一点。并且具有良好的可扩展性（有更多的子类）<span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">.</span> 优先使用顺序<span class="token operator">*</span>    Lock <span class="token operator">></span> 同步代码块（已经进入了方法体，分配了相应的资源）<span class="token operator">></span> 同步方法（在方法体之外）</code></pre><h5 id="8、三大不安全案例分别是什么？有没有解决办法？"><a href="#8、三大不安全案例分别是什么？有没有解决办法？" class="headerlink" title="8、三大不安全案例分别是什么？有没有解决办法？"></a>8、三大不安全案例分别是什么？有没有解决办法？</h5><p>经典的三大多线程不安全案例分别是：</p><ol><li>竞态条件（Race Condition）：竞态条件指的是多个线程并发执行时，最终的结果取决于线程的执行顺序。当多个线程同时访问和修改共享的数据时，如果执行顺序不确定或者不正确，可能导致数据的不一致性。例如，多个线程同时对同一个计数器进行自增操作，如果没有适当的同步机制，可能导致计数结果错误。</li><li>死锁（Deadlock）：死锁指的是多个线程因为相互等待对方释放资源而无法继续执行的情况。当多个线程同时持有一些共享资源，并且每个线程都在等待其他线程释放它所需要的资源时，就可能发生死锁。如果没有合适的策略来避免死锁或解决死锁，程序将无法继续执行。</li><li>数据竞争（Data Race）：数据竞争指的是多个线程同时访问共享的可变数据，并且至少有一个线程对数据进行写操作，而没有适当的同步机制来保护数据的一致性。当多个线程并发读写共享数据时，可能导致数据损坏或不一致。例如，一个线程正在修改某个对象的属性，而另一个线程同时读取该属性的值，可能读取到的是不一致的结果。</li></ol><p>针对以上三个不安全的问题，相对应的解决方法如下：</p><ol><li>竞态条件（Race Condition）：<ul><li>使用互斥锁（Mutex）或信号量（Semaphore）等同步机制来保护共享数据的访问，确保同一时间只有一个线程能够修改共享数据。</li><li>使用原子操作或原子类型（Atomic Type）来进行数据的读写操作，确保原子性，避免竞态条件的发生。</li><li>使用条件变量（Condition Variable）来进行线程之间的等待和通知，以控制线程的执行顺序。</li></ul></li><li>死锁（Deadlock）：<ul><li>避免循环等待（Circular Wait）的情况，即线程获取资源的顺序应该是一致的，可以通过按照预定的顺序获取资源来避免死锁。</li><li>使用资源分级策略，确保线程按照一定的优先级来获取和释放资源，避免出现所有线程都无法继续执行的情况。</li><li>引入超时机制，当线程等待资源的时间超过一定阈值时，可以主动释放已持有的资源，避免死锁的发生。</li></ul></li><li>数据竞争（Data Race）：<ul><li>使用互斥锁（Mutex）或读写锁（Read-Write Lock）来保护共享数据的读写操作，确保同一时间只有一个线程能够修改共享数据。</li><li>使用原子操作或原子类型（Atomic Type）来进行数据的读写操作，确保原子性，避免数据竞争的发生。</li><li>使用线程局部存储（Thread-Local Storage）来保证每个线程都有自己独立的数据副本，避免共享数据的读写冲突。</li></ul></li></ol><hr><h5 id="9、什么是生产者消费者模式？有那些实现方式？实现方式的优缺点有哪些？这种模式有什么优点？"><a href="#9、什么是生产者消费者模式？有那些实现方式？实现方式的优缺点有哪些？这种模式有什么优点？" class="headerlink" title="9、什么是生产者消费者模式？有那些实现方式？实现方式的优缺点有哪些？这种模式有什么优点？"></a>9、什么是生产者消费者模式？有那些实现方式？实现方式的优缺点有哪些？这种模式有什么优点？</h5><p>（1）什么是生产者消费者模式：</p><p>生产者消费者模式是一种常见的多线程设计模式，用于解决生产者和消费者之间的数据交换和协作问题。在该模式中，生产者负责生成数据并将其放入共享的缓冲区，而消费者则从缓冲区中取出数据进行处理。</p><p>生产者消费者模式的基本思想是将生产者和消费者解耦，使它们能够并发地执行，同时通过共享的缓冲区来进行数据交换，从而提高系统的效率和资源利用率。</p><p>以下是生产者消费者模式的基本组件和流程：</p><ol><li>缓冲区（Buffer）：用于存储生产者生成的数据，供消费者消费。缓冲区可以是一个队列、一个缓冲池或者其他数据结构。</li><li>生产者（Producer）：负责生成数据，并将数据放入缓冲区。生产者可以是一个线程或者多个线程。</li><li>消费者（Consumer）：从缓冲区中取出数据，并进行相应的处理。消费者可以是一个线程或者多个线程。</li></ol><p>它的基本流程如下：</p><ul><li>当缓冲区为空时，消费者等待，直到生产者向缓冲区放入数据。</li><li>当缓冲区满时，生产者等待，直到消费者从缓冲区取出数据。</li><li>生产者生成数据并放入缓冲区。</li><li>消费者从缓冲区取出数据并进行处理。</li></ul><p>（2）管程法和信号灯法都是实现生产者消费者模式的经典方法。</p><ol><li><p>管程法（Monitor）：</p><ul><li>管程是一种高级的同步机制，它封装了共享数据和操作共享数据的方法。在管程中，通过定义条件变量和操作方法来实现对共享数据的访问和同步。</li><li>在生产者消费者模式中，可以使用管程来实现对缓冲区的访问和同步。管程提供了等待和通知的机制，使得生产者和消费者可以在缓冲区满或空的情况下进行等待和唤醒操作，以保证生产者和消费者的正确协作。</li></ul><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gaoji<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试生产者消费者模型：</span><span class="token comment" spellcheck="true">//利用缓存区解决-->管程法</span><span class="token comment" spellcheck="true">//生产者，消费者，产品，缓冲区</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SynContainer container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//生产者</span><span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    SynContainer container<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Product</span><span class="token punctuation">(</span>SynContainer container<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产了"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"只鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            container<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//消费者</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    SynContainer container<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>SynContainer synContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> synContainer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃掉了"</span> <span class="token operator">+</span> container<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">"只鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            container<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//产品</span><span class="token keyword">class</span> <span class="token class-name">Chicken</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Chicken</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//缓冲区</span><span class="token keyword">class</span> <span class="token class-name">SynContainer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要一个容器的大小</span>    Chicken<span class="token punctuation">[</span><span class="token punctuation">]</span> chickens <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//容器的计数器</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//生产者放入产品</span>    <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>Chicken chicken<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> chickens<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果容器满了，需要等待消费者消费,生产者等待</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SynContainer区类中的Push方法出现异常-->"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果没有满，则继续放入产品</span>        chickens<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> chicken<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//可以通知消费者消费</span>        <span class="token comment" spellcheck="true">//notifyAll()唤醒正在等待此对象监视器锁的所有线程。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//消费者消费产品</span>    <span class="token keyword">synchronized</span> Chicken <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//首先判断是否满足消费条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待生产者生产，消费者等待</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SynContainer区类中的Push方法出现异常-->"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果可以消费</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        Chicken chicken <span class="token operator">=</span> chickens<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//产品用完了，通知生产者生产</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chicken<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>信号灯法（Semaphore）：</p><ul><li>信号灯是一种计数器，用于控制访问共享资源的线程数量。通过对信号灯的操作，可以实现对线程的同步和互斥。</li><li>在生产者消费者模式中，可以使用信号灯来控制缓冲区的空槽数量或者已填充的数据数量。生产者和消费者在访问缓冲区之前，需要通过对信号灯进行操作来获取相应的许可（P操作），并在访问完毕后释放许可（V操作）。</li></ul></li></ol><p>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试生产者消费者 2：信号灯法，标志位解决</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPC2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Item item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//生产者（演员）</span><span class="token keyword">class</span> <span class="token class-name">Actor</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//首先需要一个节目对象</span>    Item item<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Actor</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//产出节目</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token string">"正在播放电视剧。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token string">"广告ing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//消费者（观众）</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//首先需要一个节目对象</span>    Item item<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Watcher</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//观众只需要消费产品即可</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//产品（节目）</span><span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//演员演完了，观众来看 T</span>    <span class="token comment" spellcheck="true">//观众看完了，演员来演 F</span>    String voice<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表演的节目</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//演员表演节目</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span>String voice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//首先判断是否需要表演</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果没有节目，则演员继续表演节目</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"演员表演了："</span> <span class="token operator">+</span> voice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//表演完了，通知观众观看节目</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>voice <span class="token operator">=</span> voice<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 更换一下 flag的状态</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//观众看节目</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//首先判断是否有节目观看</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//无节目，则需暂停，等待演员表演完成</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"观众观看了："</span> <span class="token operator">+</span> voice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通知演员表演节目</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（3）两种方法的优缺点：</p><p>管程法的优点：</p><ol><li>封装性好：管程将共享数据和操作共享数据的方法封装在一起，使得代码结构清晰、易于理解和维护。</li><li>简洁明了：通过定义条件变量和操作方法，可以直接表达生产者消费者之间的协作关系，代码逻辑清晰。</li><li>安全性高：管程提供了等待和通知的机制，避免了死锁和竞态条件的发生。</li></ol><p>管程法的缺点：</p><ol><li>语言依赖性：管程法是一种高级的同步机制，需要编程语言或操作系统提供对管程的支持。不是所有编程语言或平台都直接支持管程。</li><li>功能相对局限：管程法主要用于描述共享数据和操作，对于更复杂的同步问题可能不够灵活。</li></ol><p>信号灯法的优点：</p><ol><li>通用性强：信号灯是一种通用的同步机制，可以用于各种不同的同步问题，不仅限于生产者消费者模式。</li><li>可扩展性强：通过对信号灯的计数器进行适当的设置，可以控制线程的并发数量，适应不同的需求。</li><li>灵活性高：信号灯法提供了P操作和V操作，可以在任意位置进行信号量的操作，对于复杂的同步逻辑更加灵活。</li></ol><p>信号灯法的缺点：</p><ol><li>容易出错：使用信号灯需要手动编写P操作和V操作，容易出现错误，例如遗漏或错误的信号量操作。</li><li>可能产生死锁：使用信号灯时，需要谨慎设置信号量的初始值和操作顺序，否则可能导致死锁的发生。</li></ol><p>（4）生产者消费者模式的优缺点：</p><p>优点：</p><ol><li>并发性和吞吐量：生产者消费者模式允许生产者和消费者以不同的速度工作，从而提高系统的并发性和吞吐量。生产者和消费者可以并行执行，充分利用系统资源，提高系统的效率。</li><li>解耦和灵活性：生产者消费者模式将生产者和消费者解耦，使它们能够独立地演化和调整。生产者和消费者可以在不影响对方的情况下进行修改和优化，从而提高系统的灵活性和可维护性。</li><li>缓冲和异步处理：通过引入缓冲区，生产者消费者模式可以平衡生产者和消费者之间的速度差异。生产者可以在缓冲区中存储数据，而消费者可以异步地从缓冲区中取出数据进行处理，提供了更好的流量控制和数据处理能力。</li></ol><p>缺点：</p><ol><li>同步和竞态条件：生产者消费者模式需要合适的同步机制来确保生产者和消费者之间的正确协作。如果同步机制设计不当或实现有误，可能会导致竞态条件、死锁等问题的发生，增加了系统设计和调试的复杂性。</li><li>内存开销：由于需要引入缓冲区来存储数据，生产者消费者模式可能会增加系统的内存开销。缓冲区的大小需要合理设置，以保证系统性能和资源的有效利用，避免过大或过小的缓冲区带来的问题。</li><li>数据一致性：生产者消费者模式需要确保数据的一致性和正确性，特别是在多个生产者和消费者的情况下。需要仔细考虑数据的同步、顺序和处理逻辑，以避免数据丢失、重复或错误的情况发生。</li></ol><p>综上所述，生产者消费者模式在提高并发性、解耦和灵活性方面具有明显的优势，但也需要合理考虑同步机制、内存开销和数据一致性等问题。在实际应用中，需要根据具体的需求和系统特点，综合考虑优缺点来选择是否采用生产者消费者模式。</p><hr><h5 id="11、什么是线程池？他有什么作用？如何实现？线程池大小如何确定？"><a href="#11、什么是线程池？他有什么作用？如何实现？线程池大小如何确定？" class="headerlink" title="11、什么是线程池？他有什么作用？如何实现？线程池大小如何确定？"></a>11、什么是线程池？他有什么作用？如何实现？线程池大小如何确定？</h5><p>线程池是一种用于管理和重用线程的机制。它由一组预先创建的线程组成，这些线程可以被反复使用来执行任务，而不需要频繁地创建和销毁线程。</p><p>线程池的作用：</p><ol><li>提高性能和效率：线程池可以减少线程创建和销毁的开销，避免了频繁创建线程的系统开销。通过重用线程，可以降低线程创建和销毁的时间成本，提高系统的性能和效率。</li><li>提供资源管理和限制：线程池可以限制系统中同时运行的线程数量，从而控制系统的资源使用情况。通过设置线程池的大小和队列容量等参数，可以合理分配系统资源，避免资源耗尽的问题。</li><li>提供任务调度和处理：线程池可以接受并处理任务，通过任务队列和线程调度算法，可以合理地分配和执行任务。线程池可以根据系统的负载情况，自动调整线程数量和任务处理速度，提供灵活的任务调度和处理能力。</li></ol><p>线程池的实现：<br>线程池的实现可以分为以下几个步骤：</p><ol><li>创建线程池对象：创建一个线程池对象，包含线程池的属性和方法。</li><li>初始化线程池：在线程池对象中初始化线程池的大小、线程超时时间、任务队列等参数。</li><li>创建线程：根据线程池的大小，预先创建一定数量的线程，并将它们添加到线程池中。</li><li>接受任务：线程池提供一个任务队列，任务可以通过提交到任务队列中进行排队等待执行。</li><li>任务调度和执行：线程池中的线程从任务队列中获取任务，并执行任务的操作。线程池可以使用合适的调度算法来决定任务的执行顺序和线程的分配方式。</li><li>完成任务：线程执行完任务后，可以继续从任务队列中获取新的任务进行处理，直到线程池关闭或任务队列为空。</li><li>关闭线程池：当不再需要线程池时，可以调用关闭方法来停止线程池的运行，释放资源。</li></ol><p>具体线程池的实现方式可以依赖于编程语言和平台的特性。在许多编程语言中，都提供了线程池的标准库或框架，可以直接使用或进行扩展实现。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL连接错误2003处理方法</title>
      <link href="/2024/013160.html"/>
      <url>/2024/013160.html</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL连接错误2003处理方法"><a href="#MySQL连接错误2003处理方法" class="headerlink" title="MySQL连接错误2003处理方法"></a>MySQL连接错误2003处理方法</h2><p><strong>MySQL连接错误2003 - Can‘t connect to MySQL server on ‘‘(10060 “Unknown error“)处理方法</strong></p><p><img src="C:\Users\Bumble\Pictures\笔记图片\MySQL链接错误.png" alt="MySQL链接错误"></p><p>MySQL 错误代码 10060 表示无法连接到 MySQL 服务器。这个错误通常与网络连接问题或服务器配置问题有关。</p><hr><p><strong>去他* * *的直接卸载重装！！！</strong></p><hr><h3 id="1、卸载mysql"><a href="#1、卸载mysql" class="headerlink" title="1、卸载mysql"></a>1、卸载mysql</h3><p>1、首先，先在服务（开始——&gt;控制面板——&gt;管理工具——&gt;服务）里停掉MySQL的服务。打开控制面板-添加删除程序，找到MySQL，卸载。或者用360安全卫士来卸载也行。也可以用mysql的那个安装程序删除</p><p>2、把安装好的MYSQL卸载了，但这对于卸载MySQL来说这只是一半，还有重要的另一半是要清理注册表。我们要进入注册表在开始-运行里面输入regedit，打开注册表</p><p>3、 找到关于MYSQL的项把他们都删除，要一个项一个项的查找把他们都删除，这样在安装的时候就可以了。其实注册表里MySQL的项就是这三项：<br>HKEY_LOCAL_MACHINE/SYSTEM/ControlSet001/Services/Eventlog/Application/MySQL</p><p>HKEY_LOCAL_MACHINE/SYSTEM/ControlSet002/Services/Eventlog/Application/MySQL<br>HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Services/Eventlog/Application/MySQL</p><p>4、还有就是C:/WINDOWS 下的my.ini文件也删除！</p><hr><h3 id="2、重装mysql"><a href="#2、重装mysql" class="headerlink" title="2、重装mysql"></a>2、重装mysql</h3><ol><li><p>下载MySQL</p><ol><li><p><a href="https://dev.mysql.com/downloads/mysql/">官网</a>下载MySQL，步骤如下：</p><p><img src="C:\Users\Bumble\Pictures\笔记图片\MySQL相关问题\安装相关\MySQL安装001.png"></p><p><img src="C:\Users\Bumble\Pictures\笔记图片\MySQL相关问题\安装相关\MySQL安装002.png" alt="MySQL安装002"></p><p><img src="C:\Users\Bumble\Pictures\笔记图片\MySQL相关问题\安装相关\MySQL安装003.png" alt="MySQL安装003"></p></li></ol></li><li><p>安装MySQL</p><p>下载完成后直接双击进行安装，步骤如下：</p><ul><li>选择自定义custom，接着下一步</li><li><img src="C:\Users\Bumble\Pictures\笔记图片\MySQL相关问题\安装相关\MySQL安装004.png"></li><li><img src="C:\Users\Bumble\Pictures\笔记图片\MySQL相关问题\安装相关\MySQL安装005.png"></li><li><img src="C:\Users\Bumble\Pictures\笔记图片\MySQL相关问题\安装相关\MySQL安装006.png"></li><li>选好后点击OK，然后点击Next </li><li>然后等待运行完成，然后连续点击下一步</li><li><img src="C:\Users\Bumble\Pictures\笔记图片\MySQL相关问题\安装相关\MySQL安装007.png"></li><li>设置自己的mysql密码，确认好了点击Next即可</li><li>继续下一步，不作修改。 </li><li>点击Execute进行执行（需要等待一小会儿） </li><li>执行完成点击Finish即可，然后点击next，再点击Finish即可、</li></ul><p>到这已实现了Mysql的安装 </p></li><li><p>配置MySQL</p><ul><li><p>安装好之后，在桌面右键点击我的电脑(有些是此电脑)，然后点击属性，进入系统信息设置</p></li><li><p><img src="C:\Users\Bumble\Pictures\笔记图片\MySQL相关问题\配置相关\MySQL配置001.png"></p></li><li><p><img src="C:\Users\Bumble\Pictures\笔记图片\MySQL相关问题\配置相关\MySQL配置002.png"></p></li><li><p><img src="C:\Users\Bumble\Pictures\笔记图片\MySQL相关问题\配置相关\MySQL配置003.png"></p></li><li><p><img src="C:\Users\Bumble\Pictures\笔记图片\MySQL相关问题\配置相关\MySQL配置004.png"></p></li><li><p><img src="C:\Users\Bumble\Pictures\笔记图片\MySQL相关问题\配置相关\MySQL配置005.png"></p></li><li><p>然后点击确定，再确定即可</p><p>接着按住win+r ，输入cmd，打开命令提示符</p></li><li><p>输入命令行</p><pre class=" language-mysql"><code class="language-mysql">mysql -u root -p</code></pre></li><li><p><img src="C:\Users\Bumble\Pictures\笔记图片\MySQL相关问题\配置相关\MySQL配置006.png"></p></li><li><p>当输入mysql的密码后。出现了mysql的版本信息即说明配置成功了。</p><p>mysql密码即是你安装MySQL时设置的密码</p></li></ul></li></ol><h3 id="3、测试连接"><a href="#3、测试连接" class="headerlink" title="3、测试连接"></a>3、测试连接</h3><p>在Navicat连接数据库测试即可</p><h3 id="4、可能遇到的问题"><a href="#4、可能遇到的问题" class="headerlink" title="4、可能遇到的问题"></a>4、可能遇到的问题</h3><h4 id="1-忘记密码或登录失败"><a href="#1-忘记密码或登录失败" class="headerlink" title="(1) 忘记密码或登录失败"></a>(1) 忘记密码或登录失败</h4><h5 id="第一步：关闭Mysql服务"><a href="#第一步：关闭Mysql服务" class="headerlink" title="第一步：关闭Mysql服务"></a>第一步：关闭Mysql服务</h5><p>在开始搜索cmd,右键以管理员身份打开。</p><p>停止mysql服务，输入net stop mysql命令。</p><h5 id="第二步：跳过Mysql密码验证"><a href="#第二步：跳过Mysql密码验证" class="headerlink" title="第二步：跳过Mysql密码验证"></a>第二步：跳过Mysql密码验证</h5><p>进入命令提示符（管理员登陆）操作，进入mysql目录中bin文件夹下:<br>盘符: &gt; 回车 &gt; (&gt;cd) &gt; 进入bin文件后的文件路径 &gt; 回车</p><pre class=" language-mysql"><code class="language-mysql"> - mysql8.0版本使用mysqld -console --skip-grant-tables --shared-memory命令来跳过权限验证。 -  - 其他版本使用mysqld --skip-grant-tables来跳过密码登录 （这里我们使用第一种）</code></pre><p>执行后如图所示没有反应，接下来不要关闭此窗口，<strong>不要关闭此窗口</strong>，<strong>不要关闭此窗口</strong>（<strong>重要的事说三遍</strong>）重新打开一个管理员cmd窗口。</p><p>继续在mysql源文件bin目录下进行操作：输入<code>mysqld --console --skip-grant-tables --shared-memory </code> ，输入这行代码之后，如下显示，表示已经成功跳过Mysql的密码登录</p><h5 id="第三步：无密码方式进入Mysql"><a href="#第三步：无密码方式进入Mysql" class="headerlink" title="第三步：无密码方式进入Mysql"></a>第三步：无密码方式进入Mysql</h5><p>接下来<strong>不要关闭此窗口</strong>，<strong>不要关闭</strong>，<strong>不要关闭</strong><br><strong>重新打开一个管理员cmd窗口</strong>。<br>继续在mysql源文件bin目录下进行操作：输入<code>mysql -u root -p</code><br>此时会显示让你输入密码，直接回车，就可以成功连接Mysql。</p><h5 id="第四步：将登陆密码设置为空"><a href="#第四步：将登陆密码设置为空" class="headerlink" title="第四步：将登陆密码设置为空"></a>第四步：将登陆密码设置为空</h5><p>输入代码，将密码设置为空：</p><pre class=" language-mysql"><code class="language-mysql">1. use mysql; (使用mysql数据表)2. update user set authentication_string='' where user='root';（将密码置为空）3. quit; (然后退出Mysql)</code></pre><h5 id="第五步：更改自己的登陆密码"><a href="#第五步：更改自己的登陆密码" class="headerlink" title="第五步：更改自己的登陆密码"></a>第五步：更改自己的登陆密码</h5><p><strong>关闭前两个cmd窗口</strong><br><strong>关闭前两个cmd窗口</strong><br><strong>关闭前两个cmd窗口</strong><br>（<strong>重要的事说三遍</strong>）</p><p>接着在新建的第三个管理员cmd窗口中输入代码：</p><pre class=" language-mysql"><code class="language-mysql">net stop mysql(关闭mysql服务,虽然会显示没有开启服务，但是以防万一)net start mysql(再打开mysql服务)</code></pre><p>接着将目录切换到mysql的bin目录下（切换目录的方法在第一步）输入：</p><pre class=" language-mysql"><code class="language-mysql">mysql -u root -p(此处会显示输入密码，直接回车就好了，第四步我们已经将他置为空了)ALTER USER 'root'@'localhost' IDENTIFIED BY 'root';（更改密码，不是一定要将密码设为root，by后面的"root"为设置的密码，可以随意设置）</code></pre><p>之后我们输入quit退出Mysql。验证是否更改成功（修改密码后需重启一下mysql服务）：</p><pre class=" language-mysql"><code class="language-mysql">net stop mysqlnet start mysqlmysql -u root -p</code></pre><p>回车后输入自己设置的密码， 如果成功进入mysql则mysql重置成功！登录后即可进行其他操作。</p><p>找问题修改错误搞了大半天，网上找了很多博客，也借鉴了许多方法，但都没什么用，最后还是卸载重装才可以使用 mysql 服务，太痛了~~~。（卸载重装无敌克制一切问题，但是要注意卸载的时候 <strong>一定要删干净！！！</strong> <strong>一定要删干净！！！</strong> <strong>一定要删干净！！！</strong>，重要的事情说三遍，否则会出现一些其他的错误。）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言中 const 与</title>
      <link href="/2024/01312.html"/>
      <url>/2024/01312.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-语言中-const-与-define-的区别"><a href="#C-语言中-const-与-define-的区别" class="headerlink" title="C 语言中 const 与 #define 的区别"></a>C 语言中 const 与 #define 的区别</h2><p>关键字const用来定义常量，如果一个变量被const修饰，那么它的值就不能再被改变</p><pre class=" language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> N 1e6 + 10</span><span class="token comment" spellcheck="true">//两种表述方式都代表了把 N 赋值为100010</span></code></pre><ol><li><strong>就起作用的阶段而言</strong>： #define是在编译的预处理阶段起作用，而const是在编译、运行的时候起作用；</li><li><strong>就起作用的方式而言</strong>： #define只是简单的字符替换，没有类型检查，存在边界的错误；const对应数据类型，进行类型检查；</li><li><strong>就存储方式而言</strong>：#define只是进行展开，有多少地方使用，就替换多少次，它定义的宏常量在内存中有若干个备份,占用代码段空间；const定义的只读变量在程序运行过程中只有一份备份，占用数据段空间；</li><li><strong>从代码调试的方便程度而言</strong>： const常量可以进行调试的，define是不能进行调试的，因为在预编译阶段就已经替换掉了；</li><li><strong>从是否可以再定义的角度而言</strong>： const不足的地方，是与生俱来的，const不能重定义，而#define可以通过#undef取消某个符号的定义，再重新定义；</li><li><strong>从某些特殊功能而言</strong>： define可以用来防止头文件重复引用，而const不能；</li><li><strong>从用于类中来看</strong>：const用于类成员变量的定义，只要一定义，不可修改。define 不可用于类成员变量的定义，但是可以用于全局变量；</li><li>const采用一个普通的常量名称，define可以采用表达式作为名称；</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客系统问题总结</title>
      <link href="/2024/01064.html"/>
      <url>/2024/01064.html</url>
      
        <content type="html"><![CDATA[<h2 id="个人博客系统总结"><a href="#个人博客系统总结" class="headerlink" title="个人博客系统总结"></a>个人博客系统总结</h2><h4 id="1、logger-error报错"><a href="#1、logger-error报错" class="headerlink" title="1、logger.error报错"></a>1、logger.error报错</h4><p>报错信息：Cannot resolve method ‘error’ in ‘Logger’</p><p>报错原因：导包错误（import java.util.logging.Logger;）</p><p>修改方法：导入包（import org.slf4j.Logger;）</p><h4 id="2、Junit-Before-After-BeforeClass-AfterClass-控制台不输出"><a href="#2、Junit-Before-After-BeforeClass-AfterClass-控制台不输出" class="headerlink" title="2、Junit @Before @After @BeforeClass @AfterClass 控制台不输出"></a>2、Junit @Before @After @BeforeClass @AfterClass 控制台不输出</h4><p>进行如下替换即可 </p><p>@Before——@BeforeEach</p><p>@After——@AfterEach</p><p>@BeforeClass——@BeforeAll</p><p>@AfterClass——@AfterAll</p><p>BeforeAll和AfterAll的方法必须是静态方法，因为他希望每个类的只初始化一次 </p><h4 id="3、-Entity注解"><a href="#3、-Entity注解" class="headerlink" title="3、@Entity注解"></a>3、@Entity注解</h4><ol><li><p>导包</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>javax<span class="token punctuation">.</span>persistence<span class="token operator">/</span>persistence<span class="token operator">-</span>api <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>javax<span class="token punctuation">.</span>persistence<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>persistence<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre></li><li><p>@Entity是指这个类映射到数据库表， 当你不使用这个类（被注解的类）时，后台不会对其进行处理，只有当你从数据库读取数据时，由于你要读取的表映射有<a href="https://so.csdn.net/so/search?q=%E5%AE%9E%E4%BD%93%E7%B1%BB&amp;spm=1001.2101.3001.7020">实体类</a>（被@Entity注释的）， 那么后台应该会自动帮你实例化一个对象， 然后将数据库中的数据填充到对象中</p></li><li><p>avax.persistence这个包的作用是持久化，集体的说就是在实体类中进行元数据标签的作用，就是使得实体类与数据库中的表建立映射关系</p><pre class=" language-xml"><code class="language-xml">   还有一个点就是JPA与hibernate的区别， JPA不等同于hibernate，Hibernate 是作为JPA的一种实现， JPA的注解已经是hibernate的核心了，hibernate只是提供了一些补充，JPA和hibernate也不是俩套注解，hibernate对jpa的支持够足量的，在使用hibernate注解建议使用jpa</code></pre></li></ol><h4 id="4、JPA构建实体类无法生成数据表"><a href="#4、JPA构建实体类无法生成数据表" class="headerlink" title="4、JPA构建实体类无法生成数据表"></a>4、JPA构建实体类无法生成数据表</h4><p>一般解决方法：</p><ol><li>菜单栏view ——&gt; Tool Windows ——&gt;Persistence</li><li>右击项目，选择Assign Data Source</li><li>选择数据库</li></ol><p><strong>PS：若以上执行完成后依然无法创建数据表，可能是因为没有选择正确的数据库。</strong></p><h4 id="5、-Notblank用法"><a href="#5、-Notblank用法" class="headerlink" title="5、@Notblank用法"></a>5、@Notblank用法</h4><ol><li>引入依赖</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>实体类上加注解</li></ol><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"验证标准不能为空"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> String trialStandardCode<span class="token punctuation">;</span></code></pre><ol start="3"><li>接收该类的controller方法里加注解 @Valid</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> R <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> TrialItem trialItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> springboot 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>acwing算法基础</title>
      <link href="/2024/01062.html"/>
      <url>/2024/01062.html</url>
      
        <content type="html"><![CDATA[<h1 id="acwing算法基础"><a href="#acwing算法基础" class="headerlink" title="acwing算法基础"></a>acwing算法基础</h1><h3 id="DAY-01"><a href="#DAY-01" class="headerlink" title="DAY_01"></a>DAY_01</h3><h4 id="一、快速排序"><a href="#一、快速排序" class="headerlink" title="一、快速排序"></a>一、快速排序</h4><p>基本思路：</p><ol><li>首先任取一个分界点 x，设两个指针i,  j 分别位于数组两侧</li><li>让指针 i 逐渐向右移，若有 q[i] &gt; x，则指针 i 停止移动，指针 j 开始向左移，直到 q[j] &lt; x 时停止移动</li><li>交换 q[i] 与 q[j] ，i 指针继续向右移， j 指针继续向左移，重复过程 2 直到 i = j</li><li>此时数组被分为两部分，i 的左半部分（即 L - i）为 &lt;= x；j 的右半部分（即 j + 1 - R）为 &gt;= x，调用递归对左右两部分进行排序即可完成快速排序</li></ol><p>核心代码：</p><pre class=" language-c++"><code class="language-c++">void quick_sort(int q[], int l, int r) {    if (l >= r) return;    //取一个分界点    int x = q[l]; // int x = q[r] | int x = q[(l + r) / 2]    int i = l - 1; int j = r + 1;    while(i < j) {        do i++; while(q[i] < x); // 当 i遍历到 q[i] > x 时停止         do j--; while(q[j] > x); // 当 j遍历到 q[j] < x 时停止         if(i < j) swap(q[i], q[j]); //若此时有 i < j，这交换 q[i], q[j]     }    quick_sort(q, l, i);    quick_sort(q, j + 1, r); }</code></pre><h4 id="二、归并排序"><a href="#二、归并排序" class="headerlink" title="二、归并排序"></a>二、归并排序</h4><p>基本思路:</p><ol><li>确定分界点 mid = (l + r) / 2</li><li>递归排序 left 和 right 两边</li><li>归并，left 和 right 合并</li></ol><p>核心代码：</p><pre class=" language-c++"><code class="language-c++">void merge_sort(int q[], int l, int r) {    if (l >= r) return;    int mid = l + r  >> 1;    cout<<mid<<" \n";    //递归排序左边和右边     merge_sort(q, l ,mid); merge_sort(q, mid + 1, r);    //需要一个数组用来存储比较后的数     int k = 0, i = l, j = mid + 1;    while(i <= mid && j <= r) {        if (q[i] <= q[j]) tmp[k++] = q[i++];        else tmp[k++] = q[j++];    }     //判断若左半边每循环完毕，则直接加入tmp数组，右半边同理     while(i <= mid) tmp[k++] = q[i++];    while(j <= r) tmp[k++] = q[j++];    //把 tmp中的结果拿回 q中     for (i = l, j = 0; i <= r; i++, j++) {        q[i] = tmp[j];    }}</code></pre><h4 id="三、整数二分，浮点数二分"><a href="#三、整数二分，浮点数二分" class="headerlink" title="三、整数二分，浮点数二分"></a>三、整数二分，浮点数二分</h4><p>整数二分基本思路：</p><ol><li>确定中间值 mid = (l + r) / 2;</li><li>设定一个 check() 判断 mid 是否符合性质</li><li>符合性质时，若需将区间 [l, r] ，划分为 [l, mid],  [mid + 1, r] 则 r = mid, l = mid + 1；                                              若需将区间 [l, r] ，划分为[l, mid - 1], [mid, r] 则 l = mid, r = mid - 1，但此时需注意mid = (l + r + 1) / 2，否则会出现死循环；</li></ol><p>核心代码如下：</p><pre class=" language-c++"><code class="language-c++">//区间[l, r] ，划分为[l, mid], [mid + 1, r]时使用 int bsearch_1(int l, int r){    while(l < r) {        int mid = (l + r) / 2;        if(check(mid)) r = mid; //check()函数用来判断 mid是否符合性质        else l = mid + 1;     }    retrun 1;}//区间[l, r] ，划分为[l, mid - 1], [mid, r]时使用 int bsearch_1(int l, int r){    while(l < r) {        int mid = (l + r + 1) / 2;        if(check(mid)) l = mid; //check()函数用来判断 mid是否符合性质        else r = mid - 1;     }    return 1;}</code></pre><p>浮点数二分同整数二分，不需要考虑区间的划分问题，代码如下：</p><pre class=" language-c++"><code class="language-c++">while(r - 1 > 1e-8){    double mid = (l + r) / 2;    if(mid * mid >= x) r = mid;    else l = mid;}//常用两种写法for(int i = 0; i < 100; i ++) {    double mid = (l + r) / 2;    if(mid * mid >= x) r = mid;    else l = mid;}</code></pre><hr><h3 id="DAY-02"><a href="#DAY-02" class="headerlink" title="DAY_02"></a>DAY_02</h3><h4 id="四、高精度"><a href="#四、高精度" class="headerlink" title="四、高精度"></a>四、高精度</h4><h5 id="1、vector的使用"><a href="#1、vector的使用" class="headerlink" title="1、vector的使用"></a>1、vector的使用</h5><p>​<strong>1.1、vector说明：</strong>  </p><ul><li>vector是向量类型，可以容纳许多类型的数据，因此也被称为容器</li><li>(可以理解为动态数组，是封装好了的类）</li><li>进行<code>vector</code>操作前应添加头文件<code>#include &lt;vector&gt;</code></li></ul><p>​<strong>1.2、vector初始化：</strong></p><pre class=" language-c"><code class="language-c">方式一：<span class="token comment" spellcheck="true">//定义具有10个整型元素的向量（尖括号为元素类型名，它可以是任何合法的数据类型），不具有初值，其值不确定</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c">方式二：<span class="token comment" spellcheck="true">//定义具有10个整型元素的向量，且给出的每个元素初值为1</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c">方式三：<span class="token comment" spellcheck="true">//用向量b给向量a赋值，a的值完全等价于b的值</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c">方式四：<span class="token comment" spellcheck="true">//将向量b中从0-2（共三个）的元素赋值给a，a的类型为int型</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span>begin<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c">方式五：<span class="token comment" spellcheck="true">//从数组中获得初值</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2、顺序访问vector的元素"><a href="#2、顺序访问vector的元素" class="headerlink" title="2、顺序访问vector的元素"></a>2、顺序访问vector的元素</h5><pre class=" language-c++"><code class="language-c++">string a;vector<int> A; cin >> a;; for(int i = a.size() - 1; i >= 0; i --) {    cout << a[i] << " ";    A.push_back(a[i] - '0');}printf("\n");for(int i = 0; i <= A.size() - 1; i ++) {    cout << A[i] <<" ";}return 0;</code></pre><h5 id="3、两数相加"><a href="#3、两数相加" class="headerlink" title="3、两数相加"></a>3、两数相加</h5><pre class=" language-c++"><code class="language-c++">vector<int> add(vector<int> &A, vector<int>  &B) {    vector<int> C;    int t = 0;    for(int i = 0; i <= A.size() || i <= B.size(); i ++) {        if(i < A.size()) t += A[i];        if(i < B.size()) t += B[i];        C.push_back( t % 10);        t /= 10;    }    if(t) C.push_back(1);    return C;} </code></pre><h5 id="4、两数相减"><a href="#4、两数相减" class="headerlink" title="4、两数相减"></a>4、两数相减</h5><pre class=" language-c++"><code class="language-c++">bool judge(vector<int> &A, vector<int>  &B) {    //判断 A, B的大小（假定 A,B为正整数）    if(A.size() > B.size()) return A.size() > B.size();    for(int i = A.size() - 1; i >= 0; i --) {        if(A[i] > B[i])         return A[i] > B[i];    }    return true;}vector<int> sub(vector<int> &A, vector<int> &B) {    vector<int> C;    int t = 0;    for(int i = 0; i < A.size() - 1; i ++) {        t = A[i] - t;        if(i < B.size()) t -= B[i];        C.push_back((t + 10) % 10);        if(t < 0) t = 1;        else t = 0;    }     return C;} </code></pre><h5 id="5、两数相乘"><a href="#5、两数相乘" class="headerlink" title="5、两数相乘"></a>5、两数相乘</h5><pre class=" language-c++"><code class="language-c++">vector<int> mul(vector<int> &A, int b) {    vector<int> C;    int t = 0;    for(int i = 0; i < A.size() || t; i ++) {        if(i < A.size()) t += A[i] * b;        C.push_back(t % 10);        t /= 10;    }    return C;}</code></pre><h5 id="6、两数相除"><a href="#6、两数相除" class="headerlink" title="6、两数相除"></a>6、两数相除</h5><pre class=" language-c++"><code class="language-c++">vector<int> div(vector<int> &A, int b, int &r) {    vector<int> C;    r = 0;    for(int i = A.size() - 1; i >= 0; i --) {        r = r * 10 + A[i];        C.push_back(r / b);        r %= b;    }    reverse(C.begin(), C.end());    //去除前导 0    while(C.size() > 1 && C.back() == 0) C.pop_back();     return C;}</code></pre><h4 id="五、前缀和-公式-思想"><a href="#五、前缀和-公式-思想" class="headerlink" title="五、前缀和(公式+思想)"></a>五、前缀和(公式+思想)</h4><h5 id="1、数组前缀和"><a href="#1、数组前缀和" class="headerlink" title="1、数组前缀和"></a>1、数组前缀和</h5><p>主要是将一段纯数字的字符串从 l 到 r 之间的某一段进行相加操作，其中核心是将字符串初始化，然后按照区间计算公式生成即可，代码如下：</p><pre class=" language-c++"><code class="language-c++">scanf("%d%d", &n, &m);for(int i = 1; i <= n; i ++) {    scanf("%d", &a[i]);}//前缀和初始化 for(int i = 1; i <= n; i++) {    s[i] = s[i - 1] + a[i]; }while(m --) {    int l, r;    scanf("%d%d", &l, &r);    printf("%d\n", s[r] - s[l - 1]); //区间和的计算 }return 0;</code></pre><h5 id="2、二维数组前缀和"><a href="#2、二维数组前缀和" class="headerlink" title="2、二维数组前缀和"></a>2、二维数组前缀和</h5><p>求灰色部分的所有数字和，即（X1, Y1) 到 （X2, Y2)之间</p><h4 id="六、差分"><a href="#六、差分" class="headerlink" title="六、差分"></a>六、差分</h4><h5 id="1、数组差分"><a href="#1、数组差分" class="headerlink" title="1、数组差分"></a>1、数组差分</h5><p>从 l 到 r 这个区间之内每个数都加上 c，核心代码如下：</p><pre class=" language-c++"><code class="language-c++">void insert(int l, int r, int c) {    b[l] += c;    b[r + 1] -= c;}int main() {    scanf("%d%d", &n, &m);    for(int i = 1; i <= n; i ++) scanf("%d", &a[i]);    for(int i = 1; i <= n; i ++) insert(i ,i ,a[i]);    while(m --) {        int l, r, c;        scanf("%d%d%d", &l, &r, &c);        insert(l, r, c);    }    for(int i = 1; i <= n; i ++) b[i] += b[i - 1];    for(int i = 1; i <= n; i ++) printf("%d ", b[i]);     return 0;} </code></pre><h5 id="2、二维差分"><a href="#2、二维差分" class="headerlink" title="2、二维差分"></a>2、二维差分</h5><p>如上</p><hr><h3 id="DAY-03"><a href="#DAY-03" class="headerlink" title="DAY_03"></a>DAY_03</h3><h5 id="七、双指针算法"><a href="#七、双指针算法" class="headerlink" title="七、双指针算法"></a>七、双指针算法</h5><pre class=" language-c++"><code class="language-c++">//最长连续不重复子序列 int n;int a[N], s[N];void longestSub() {    cin >> n;    for(int i = 0; i < n; i ++) cin >> a[i];        int res = 0;    for(int i = 0,j = 0; i < n; i ++) {        s[a[i]] ++;        while(s[a[i]] > 1) {            s[a[j]] --;            j ++;        }        res = max(res, i - j + 1);    }    cout << res << endl;}//输入一段话，输出每个单词 void aAddb() {    char str[100];    gets(str);    int n = strlen(str);    for(int i = 0; str[i]; i ++) {        int j = i;        while(j < n && str[j] != ' ') j ++;                //输入一段话，输出每个单词         for(int k = i; k < j; k ++) cout << str[k];        cout << endl;        i = j;     }}</code></pre><h5 id="八、位运算"><a href="#八、位运算" class="headerlink" title="八、位运算"></a>八、位运算</h5><p>即操作系统中的位运算（类似补码，反码，移码和原码的操作）</p><pre class=" language-c++"><code class="language-c++">//简单位运算void posOper() {    int n = 10;// n 的二进制表示中，第 K 位是几    for(int i = 3; i >= 0; i --) cout << (n >> i & 1); } //二进制中 1的个数 int lowbit(int x) {    // x = 1010; lowbit(x) = 10; || x = 101000; lowbit(x) = 1000;     return x & -x;} void onesNum() {    int n; cin >> n;    while(n --) {        int x;        cin >> x;        int res = 0;        while(x) x -= lowbit(x), res ++; //每次减去 x中的最后一位 1         cout << res << " ";    }}</code></pre><h5 id="九、离散化"><a href="#九、离散化" class="headerlink" title="九、离散化"></a>九、离散化</h5><p>主要是指在一组数据中，存在较为稀疏切每个数字之间差值较大的情况，对此进行离散化处理</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<vector>#include<algorithm>using namespace std;const int N = 3000010;//求区间和 typedef pair<int, int> PII;int n, m;int a[N], s[N];vector<int> alls;vector<PII> add, query;//二分 int find(int x) {    int l = 0, r = alls.size() - 1;    while(l < r) {        int mid = (l + r) / 2;        if(alls[mid] >= x) r = mid;        else l = mid + 1;    }} int main() {    cin >> n >> m;    for (int i = 0; i < n; i ++) {        int x, c;        cin >> x >> c;        add.push_back({x, c});        alls.push_back(x);    }    for (int i = 0; i < m; i ++) {        int l, r;        cin >> l >> r;        query.push_back({l, r});                alls.push_back(l);        alls.push_back(r);    }        //去重    sort(alls.begin(), alls.end());    alls.erase(alls.begin(), alls.end());        //处理插入    for(auto item : add) {        int x = find(item.first);        a[x] += item.second;    }         //预处理前缀和    for (int i = 0; i <= alls.size(); i ++) s[i] = s[i - 1] +a[i];        //处理询问    for (auto item : query) {        int l = find(item.first), r = find(item.second);        cout << s[r] - s[l - 1] << endl;    }     return 0;}</code></pre><h5 id="十、区间合并"><a href="#十、区间合并" class="headerlink" title="十、区间合并"></a>十、区间合并</h5><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<algorithm>#include<vector> using namespace std;const int N = 100010;//将 n个有交集的区间进行合并，输出为合并后的区间个数 typedef pair<int, int> PII; //存入区间的左右端点 int n;vector<PII> segs; //左右端点 void merge(vector<PII>, &segs) {    vector<PII> res;        sort(segs.begin(), segs.end());        int st = -2e9, ed = -2e9; //左右端点边界范围     for(auto seg : segs) {        if(ed < segs.first) {            if (st != -2e9) res.push_back({st, ed});            st = seg.first, ed = seg.second;        }        else ed = max(ed, seg.second);    }     if (st != -2e9) res.push_back({st, ed});    segs = res;}int main() {    cin >> n;    for (int i = 0; i <= n; i ++) {        int l, r;        cin >> l >> r;        segs.push_back({l, r});    }        merge(segs);        cout << segs.size() << endl;        return 0;}</code></pre><h3 id="DAY-04"><a href="#DAY-04" class="headerlink" title="DAY_04"></a>DAY_04</h3><h4 id="1、单链表"><a href="#1、单链表" class="headerlink" title="1、单链表"></a>1、单链表</h4><p><img src="D:\C语言\acwing\第二章：数据结构\笔记图片\单链表.png"></p><pre class=" language-c++"><code class="language-c++">//数组模拟单链表 #include<iostream>using namespace std;const int N = 1000010;/*实现一个单链表，链表初始为空，支持三种操作：（1）向链表头插入一个数（2）删除第 k个插入的数后面的数（3）在第 k个插入的数（下标为k-1的点）后面插入一个数 *///head 代表头结点//e[N]代表节点 i的值，ne[N]代表节点 i的 next指针是多少 //idx存储当前已经用到那个点，类似指针 int head, e[N], ne[N], idx;//初始化void init() {    head = -1;    idx = 0;} //把 x插入头结点 void add_to_head(int x) {    e[idx] = x;    ne[idx] = head;    head = idx;    idx ++;} //把 x插入next为 k的后面  void add(int k, int x) {    e[idx] = x;    ne[idx] = ne[k];    ne[k] = idx;    idx++;} //将下标为 k的点后面的点删除void remove(int k) {    ne[k] = ne[ne[k]];} int main() {    int m;    cin >> m;    init();    while(m --) {        int k, x;        char op;                cin >> op;        if (op == 'H') {            cin >> x;            add_to_head(x);        } else if (op == 'D') {            cin >> k;            remove(k);        } else {            cin >> k >> x;            add(k, x);        }    }         for(int i = head; i >= 0; i = ne[i]) printf("%d ", e[i]);        return 0;} </code></pre><h4 id="2、双链表"><a href="#2、双链表" class="headerlink" title="2、双链表"></a>2、双链表</h4><h3 id="DAY-05"><a href="#DAY-05" class="headerlink" title="DAY_05"></a>DAY_05</h3><h4 id="1、深度优先遍历（DFS）"><a href="#1、深度优先遍历（DFS）" class="headerlink" title="1、深度优先遍历（DFS）"></a>1、深度优先遍历（DFS）</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;const int N = 100010;//求全排列 int n; // 全排列个数 1-n  int path[N]; // 每次深度优先遍历完全排列的集合bool st[N];   void dfs(int u) {    if (u == n) { // 到最深处         for (int i = 0; i < n; i ++) cout << path[i] << " ";        puts("");        return;    }    //其他情况     for (int i = 1; i <= n; i ++) {        if(!st[i]) { //若发现某个数没有使用过，可以进行排列             path[u] = i;            st[i] = true;            dfs(u + 1); // 逐层递进直到最后一层            st[i] = false; // 每次深度优先遍历之后，回溯到之前的状态，                      }    }}int main() {    cin >> n;    dfs(0);    return 0;}</code></pre><h4 id="2、广度优先遍历（BFS"><a href="#2、广度优先遍历（BFS" class="headerlink" title="2、广度优先遍历（BFS)"></a>2、广度优先遍历（BFS)</h4><h4 id="3、树与图的存储"><a href="#3、树与图的存储" class="headerlink" title="3、树与图的存储"></a>3、树与图的存储</h4><h4 id="4、树图的深度优先遍历"><a href="#4、树图的深度优先遍历" class="headerlink" title="4、树图的深度优先遍历"></a>4、树图的深度优先遍历</h4><h4 id="5、树图的广度优先遍历"><a href="#5、树图的广度优先遍历" class="headerlink" title="5、树图的广度优先遍历"></a>5、树图的广度优先遍历</h4><h4 id="6、拓扑排序"><a href="#6、拓扑排序" class="headerlink" title="6、拓扑排序"></a>6、拓扑排序</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo添加豆瓣小插件</title>
      <link href="/2022/120847658.html"/>
      <url>/2022/120847658.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo添加豆瓣小插件"><a href="#hexo添加豆瓣小插件" class="headerlink" title="hexo添加豆瓣小插件"></a>hexo添加豆瓣小插件</h1><h2 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h2><p>hexo-douban 目前升级到了 2.x 版本，将原先由插件客户端自行获取数据的逻辑抽到了一个隐藏的服务端中进行，以统一解决数据获取、数据缓存、风控对抗等问题，提高页面生成的成功率和效率。</p><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><pre class=" language-java"><code class="language-java">$ npm install hexo<span class="token operator">-</span>douban <span class="token operator">--</span>save</code></pre><h2 id="3、配置"><a href="#3、配置" class="headerlink" title="3、配置"></a>3、配置</h2><p>将下面的配置写入站点的配置文件 <code>_config.yml</code> 里(不是主题的配置文件).</p><pre class=" language-java"><code class="language-java">douban<span class="token operator">:</span>  id<span class="token operator">:</span> <span class="token number">162448367</span>  book<span class="token operator">:</span>    path<span class="token operator">:</span> books<span class="token operator">/</span>index<span class="token punctuation">.</span>html    title<span class="token operator">:</span> <span class="token string">'This is my book title'</span>    quote<span class="token operator">:</span> <span class="token string">'This is my book quote'</span>  movie<span class="token operator">:</span>    path<span class="token operator">:</span> movies<span class="token operator">/</span>index<span class="token punctuation">.</span>html    title<span class="token operator">:</span> <span class="token string">'This is my movie title'</span>    quote<span class="token operator">:</span> <span class="token string">'This is my movie quote'</span>  game<span class="token operator">:</span>    path<span class="token operator">:</span> games<span class="token operator">/</span>index<span class="token punctuation">.</span>html    title<span class="token operator">:</span> <span class="token string">'This is my game title'</span>    quote<span class="token operator">:</span> <span class="token string">'This is my game quote'</span>  timeout<span class="token operator">:</span> <span class="token number">10000</span> </code></pre><ul><li><strong>user</strong>: 你的豆瓣ID(纯数字格式，不是自定义的域名</li><li><strong>path</strong>: 生成页面后的路径，默认生成在 //yourblog/books/index.html 等下面。如需自定义路径，则可以修改这里。</li><li><strong>title</strong>: 该页面的标题。</li><li><strong>quote</strong>: 写在页面开头的一段话,支持html语法。</li><li><strong>timeout</strong>: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul><p>如果只想显示某一个页面(比如movie)，那就把其他的配置项注释掉即可。</p><h2 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h2><pre class=" language-java"><code class="language-java">$ hexo douban <span class="token operator">-</span>hUsage<span class="token operator">:</span> hexo doubanDescription<span class="token operator">:</span>Generate pages from doubanOptions<span class="token operator">:</span>  <span class="token operator">-</span>b<span class="token punctuation">,</span> <span class="token operator">--</span>books   Generate douban books only  <span class="token operator">-</span>g<span class="token punctuation">,</span> <span class="token operator">--</span>games   Generate douban games only  <span class="token operator">-</span>m<span class="token punctuation">,</span> <span class="token operator">--</span>movies  Generate douban movies only</code></pre><p>如果不加参数，那么默认参数为<code>-bgm</code>。</p><p><strong>需要注意的是</strong>，通常大家都喜欢用<code>hexo d</code>来作为<code>hexo deploy</code>命令的简化，但是当安装了<code>hexo douban</code>之后，就不能用<code>hexo d</code>了，因为<code>hexo douban</code>跟<code>hexo deploy</code>的前缀都是<code>hexo d</code>。</p><p>第一次使用 hexo douban 时，后台会异步进行数据获取，一般需要等待一段时间才能查到数据（大约五分钟）。</p><p>由于数据是分阶段获取，当第一次成功生成页面时其实只获取了图书、电影或游戏的简略信息。后台会慢慢更新详细信息，如果有需要可以再多等等一段时间。时间视你的数据数量而定，平均一个资源会花6s。例如如果你有 100 个想读、100个已读、100个在读的图书，则大约需要等待 300*6/60= 30 分钟。当然，如果你喜欢的条目别人已经提前录入过，那获取这个条目时间就可以节约掉。</p><p>后续如果你的豆瓣数据更新了，hexo douban 同样也会自动进行更新（同样需要等待一段时间才会查到更新数据），不过出于安全考虑，一个用户id<strong>每小时至多只会同步一次</strong>。</p><h2 id="5、升级"><a href="#5、升级" class="headerlink" title="5、升级"></a>5、升级</h2><p>我会不定期更新一些功能或者修改一些Bug，所以如果想使用最新的特性，可以用下面的方法来更新:</p><ol><li>修改package.json内hexo-douban的版本号至最新</li><li>重新安装最新版本<code>npm install hexo-douban --save</code></li></ol><p>或者使用<code>npm install hexo-douban --update --save</code>直接更新。</p><h2 id="6、显示"><a href="#6、显示" class="headerlink" title="6、显示"></a>6、显示</h2><p>如果上面的配置和操作都没问题，就可以在生成站点之后打开 <code>//yourblog/books</code> 和 <code>//yourblog/movies</code>, <code>//yourblog/games</code>, 来查看结果。</p><h2 id="7、菜单"><a href="#7、菜单" class="headerlink" title="7、菜单"></a>7、菜单</h2><p>如果上面的显示没有问题就可以在主题的配置文件 <code>_config.yml</code> 里添加如下配置来为这些页面添加菜单链接.</p><pre class=" language-java"><code class="language-java">menu<span class="token operator">:</span>  Home<span class="token operator">:</span> <span class="token operator">/</span>  Archives<span class="token operator">:</span> <span class="token operator">/</span>archives  Books<span class="token operator">:</span> <span class="token operator">/</span>books     #This is your books page  Movies<span class="token operator">:</span> <span class="token operator">/</span>movies   #This is your movies page  Games<span class="token operator">:</span> <span class="token operator">/</span>games   #This is your games page</code></pre><h2 id="8、主题兼容"><a href="#8、主题兼容" class="headerlink" title="8、主题兼容"></a>8、主题兼容</h2><p>对于使用 hexo-theme-butterfly 等使用 <code>pjax</code> 进行渲染的主题，需要在 <code>_config.yml</code> 中将豆瓣页进行排除，否则 js 会失效导致页面异常 <a href="https://github.com/mythsman/hexo-douban/issues/108">@ISSUE 108</a> :</p><pre class=" language-java"><code class="language-java">pjax<span class="token operator">:</span>  enable<span class="token operator">:</span> <span class="token boolean">true</span>  exclude<span class="token operator">:</span>    <span class="token operator">-</span> <span class="token operator">/</span>movies<span class="token operator">/</span>    <span class="token operator">-</span> <span class="token operator">/</span>books<span class="token operator">/</span>    <span class="token operator">-</span> <span class="token operator">/</span>games<span class="token operator">/</span></code></pre><h2 id="9、接口"><a href="#9、接口" class="headerlink" title="9、接口"></a>9、接口</h2><p>如果有非hexo环境的部署需求（例如我自己就是用的 Ghost ，简单效果页:<a href="https://blog.mythsman.com/douban">豆瓣</a>），或者仅仅想对自己的豆瓣数据进行备份，可以尝试使用下面的接口，复用后端维护的数据提取服务 <a href="https://github.com/mythsman/mouban">mouban</a>：</p><pre class=" language-java"><code class="language-java"># 将 <span class="token punctuation">{</span>your_douban_id<span class="token punctuation">}</span> 改为你的豆瓣数字ID（此处为我个人的豆瓣ID）# 用户录入<span class="token operator">/</span>更新https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mouban<span class="token punctuation">.</span>mythsman<span class="token punctuation">.</span>com<span class="token operator">/</span>guest<span class="token operator">/</span>check_user<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">248222891</span># 查询用户的读书评论https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mouban<span class="token punctuation">.</span>mythsman<span class="token punctuation">.</span>com<span class="token operator">/</span>guest<span class="token operator">/</span>user_book<span class="token operator">?</span>id<span class="token operator">=</span><span class="token punctuation">{</span>your_douban_id<span class="token punctuation">}</span><span class="token operator">&amp;</span>action<span class="token operator">=</span>wishhttps<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mouban<span class="token punctuation">.</span>mythsman<span class="token punctuation">.</span>com<span class="token operator">/</span>guest<span class="token operator">/</span>user_book<span class="token operator">?</span>id<span class="token operator">=</span><span class="token punctuation">{</span>your_douban_id<span class="token punctuation">}</span><span class="token operator">&amp;</span>action<span class="token operator">=</span><span class="token keyword">do</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mouban<span class="token punctuation">.</span>mythsman<span class="token punctuation">.</span>com<span class="token operator">/</span>guest<span class="token operator">/</span>user_book<span class="token operator">?</span>id<span class="token operator">=</span><span class="token punctuation">{</span>your_douban_id<span class="token punctuation">}</span><span class="token operator">&amp;</span>action<span class="token operator">=</span>collect# 查询用户的电影评论https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mouban<span class="token punctuation">.</span>mythsman<span class="token punctuation">.</span>com<span class="token operator">/</span>guest<span class="token operator">/</span>user_movie<span class="token operator">?</span>id<span class="token operator">=</span><span class="token punctuation">{</span>your_douban_id<span class="token punctuation">}</span><span class="token operator">&amp;</span>action<span class="token operator">=</span>wishhttps<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mouban<span class="token punctuation">.</span>mythsman<span class="token punctuation">.</span>com<span class="token operator">/</span>guest<span class="token operator">/</span>user_movie<span class="token operator">?</span>id<span class="token operator">=</span><span class="token punctuation">{</span>your_douban_id<span class="token punctuation">}</span><span class="token operator">&amp;</span>action<span class="token operator">=</span><span class="token keyword">do</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mouban<span class="token punctuation">.</span>mythsman<span class="token punctuation">.</span>com<span class="token operator">/</span>guest<span class="token operator">/</span>user_movie<span class="token operator">?</span>id<span class="token operator">=</span><span class="token punctuation">{</span>your_douban_id<span class="token punctuation">}</span><span class="token operator">&amp;</span>action<span class="token operator">=</span>collect# 查询用户的游戏评论https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mouban<span class="token punctuation">.</span>mythsman<span class="token punctuation">.</span>com<span class="token operator">/</span>guest<span class="token operator">/</span>user_game<span class="token operator">?</span>id<span class="token operator">=</span><span class="token punctuation">{</span>your_douban_id<span class="token punctuation">}</span><span class="token operator">&amp;</span>action<span class="token operator">=</span>wishhttps<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mouban<span class="token punctuation">.</span>mythsman<span class="token punctuation">.</span>com<span class="token operator">/</span>guest<span class="token operator">/</span>user_game<span class="token operator">?</span>id<span class="token operator">=</span><span class="token punctuation">{</span>your_douban_id<span class="token punctuation">}</span><span class="token operator">&amp;</span>action<span class="token operator">=</span><span class="token keyword">do</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mouban<span class="token punctuation">.</span>mythsman<span class="token punctuation">.</span>com<span class="token operator">/</span>guest<span class="token operator">/</span>user_game<span class="token operator">?</span>id<span class="token operator">=</span><span class="token punctuation">{</span>your_douban_id<span class="token punctuation">}</span><span class="token operator">&amp;</span>action<span class="token operator">=</span>collect</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> matery主题优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet</title>
      <link href="/2022/11295.html"/>
      <url>/2022/11295.html</url>
      
        <content type="html"><![CDATA[<h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><h4 id="1-Servlet技术"><a href="#1-Servlet技术" class="headerlink" title="1.Servlet技术"></a>1.Servlet技术</h4><h4 id="2-ServletConfig类"><a href="#2-ServletConfig类" class="headerlink" title="2.ServletConfig类"></a>2.ServletConfig类</h4><p>​ServletConfig类其实就是Servlet的配置信息类</p><h5 id="a-ServletConfig类的三大作用："><a href="#a-ServletConfig类的三大作用：" class="headerlink" title="a)ServletConfig类的三大作用："></a>a)ServletConfig类的三大作用：</h5><p>​</p><h4 id="3-ServletContext类"><a href="#3-ServletContext类" class="headerlink" title="3.ServletContext类"></a>3.ServletContext类</h4><h5 id="3-1-什么是ServletContext"><a href="#3-1-什么是ServletContext" class="headerlink" title="3.1 什么是ServletContext?"></a>3.1 什么是ServletContext?</h5><p>​① ServletContext是一个接口，表示Servlet上下文对象；</p><p>​② 一个web工程，只有一个ServletContext对象实例；</p><p>​③ ServletContext对象是一个域对象（tip：域对象是指在一定范围内可以数据共享的对象）</p><p>​④ ServletContext是在web工程部署是创建，在web工程停止时销毁</p><p>Map和域对象的区别</p><table><thead><tr><th></th><th>存储数据</th><th>取出数据</th><th>删除数据</th></tr></thead><tbody><tr><td>Map</td><td>put()</td><td>get()</td><td>remove()</td></tr><tr><td>域对象</td><td>setAttribute()</td><td>getAttribute()</td><td>removeAttribute()</td></tr></tbody></table><h5 id="3-2-ServletContext类的四个作用"><a href="#3-2-ServletContext类的四个作用" class="headerlink" title="3.2  ServletContext类的四个作用"></a>3.2  ServletContext类的四个作用</h5><p>​㈠、获取web.xml中配置的上下文参数context-parma（Tip：用户名和密码等数据）</p><p>​㈡、获取当前工程的路径</p><p>​㈢、获取当前工程在服务器硬盘上的绝对路径</p><p>​㈣、像Map一样存储数据</p><h4 id="4-常见响应码说明"><a href="#4-常见响应码说明" class="headerlink" title="4.常见响应码说明"></a>4.常见响应码说明</h4><p>​200表示请求成功</p><p>​302表示重定向</p><p>​404表示服务器已收到请求，但是所请求的数据不存在（请求地址错误）</p><p>​500表示服务器已收到请求，但服务器内部错误（代码出现错误）</p><p>​</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-Plus</title>
      <link href="/2022/11296.html"/>
      <url>/2022/11296.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h1><h3 id="1、快速入门"><a href="#1、快速入门" class="headerlink" title="1、快速入门"></a>1、快速入门</h3><p>官网地址：<a href="https://baomidou.com/pages/24112f/#%E7%89%B9%E6%80%A7">https://baomidou.com/pages/24112f/#%E7%89%B9%E6%80%A7</a></p><p>使用第三方组件：</p><ol><li>导入对应的依赖</li><li>研究依赖如何配置</li><li>代码如何编写</li><li>提高扩展能力</li></ol><h3 id="2、使用步骤"><a href="#2、使用步骤" class="headerlink" title="2、使用步骤"></a>2、使用步骤</h3><h4 id="1、建一张表"><a href="#1、建一张表" class="headerlink" title="1、建一张表"></a>1、建一张表</h4><p>现有一张 <code>User</code> 表，其表结构如下：</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>email</th></tr></thead><tbody><tr><td>1</td><td>Jone</td><td>18</td><td><a href="mailto:test1@baomidou.com">test1@baomidou.com</a></td></tr><tr><td>2</td><td>Jack</td><td>20</td><td><a href="mailto:test2@baomidou.com">test2@baomidou.com</a></td></tr><tr><td>3</td><td>Tom</td><td>28</td><td><a href="mailto:test3@baomidou.com">test3@baomidou.com</a></td></tr><tr><td>4</td><td>Sandy</td><td>21</td><td><a href="mailto:test4@baomidou.com">test4@baomidou.com</a></td></tr><tr><td>5</td><td>Billie</td><td>24</td><td><a href="mailto:test5@baomidou.com">test5@baomidou.com</a></td></tr></tbody></table><p>2、其对应的数据库 Schema 脚本如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    age <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其对应的数据库 Data 脚本如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Jone'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'test1@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'test2@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'test3@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Sandy'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'test4@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'Billie'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'test5@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2、添加依赖"><a href="#2、添加依赖" class="headerlink" title="2、添加依赖"></a>2、添加依赖</h4><p>引入 Spring Boot Starter 父工程：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0+ 版本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre><p>引入 <code>spring-boot-starter</code>、<code>spring-boot-starter-test</code>、<code>mybatis-plus-boot-starter</code>、<code>h2</code> 依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>最新版本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h4 id="3、添加配置"><a href="#3、添加配置" class="headerlink" title="3、添加配置"></a>3、添加配置</h4><p>在 <code>application.yml</code> 配置文件中添加 H2 数据库的相关配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># DataSource Config</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.h2.Driver    <span class="token key atrule">schema</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/schema<span class="token punctuation">-</span>h2.sql    <span class="token key atrule">data</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/data<span class="token punctuation">-</span>h2.sql    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>mem<span class="token punctuation">:</span>test    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> test</code></pre><p>在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.baomidou.mybatisplus.samples.quickstart.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置MybatisConfig</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>codel<span class="token punctuation">.</span>mybatis_plus<span class="token punctuation">.</span>myconfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>MybatisPlusInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span>PaginationInnerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisConfig</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 最新版  分页插件   没有配置这个分页插件的是不可以进行分页的</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> MybatisPlusInterceptor <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    MybatisPlusInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PaginationInnerInterceptor paginationInnerInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    paginationInnerInterceptor<span class="token punctuation">.</span><span class="token function">setMaxLimit</span><span class="token punctuation">(</span>500L<span class="token punctuation">)</span><span class="token punctuation">;</span>    paginationInnerInterceptor<span class="token punctuation">.</span><span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span>paginationInnerInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这是分页拦截器</span>    <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4、编码"><a href="#4、编码" class="headerlink" title="4、编码"></a>4、编码</h4><p>编写实体类 <code>User.java</code>（此处使用了 <a href="https://www.projectlombok.org/">Lombok (opens new window)</a>简化代码）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>编写 Mapper 包下的 <code>UserMapper</code>接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="5、开始测试"><a href="#5、开始测试" class="headerlink" title="5、开始测试"></a>5、开始测试</h4><p>添加测试类，进行功能测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"----- selectAll method test ------"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> userList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、配置日志"><a href="#3、配置日志" class="headerlink" title="3、配置日志"></a>3、配置日志</h3><pre class=" language-yml"><code class="language-yml"># 配置日志mybatis-plus:  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</code></pre><p>![](C:\Users\Bumble\Pictures\笔记图片\屏幕截图 2022-07-21 123555.png)</p><h3 id="4、CURD拓展"><a href="#4、CURD拓展" class="headerlink" title="4、CURD拓展"></a>4、CURD拓展</h3><h3 id="5、分页查询"><a href="#5、分页查询" class="headerlink" title="5、分页查询"></a>5、分页查询</h3><ol><li><p>配置拦截器组件即可（在高版本的SpringBoot中, 会提示这种写法<strong>已过时</strong>, 所以采用另一种写法 <strong>MybatisPlusInterceptor</strong> ）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> MybatisPlusInterceptor <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    MybatisPlusInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>H2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>直接使用page对象即可</p><pre class=" language-java"><code class="language-java">当前第 <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">"color: #0e8c8c;font-size: larger;"</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>current<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> 页总计 <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">"color: #0e8c8c;font-size: larger;"</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>pages<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> 页共 <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">"color: #0e8c8c;font-size: larger;"</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>total<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> 条记录</code></pre></li></ol><h3 id="6、遇到的错误"><a href="#6、遇到的错误" class="headerlink" title="6、遇到的错误"></a>6、遇到的错误</h3><ol><li><p><strong>遇到的错误</strong>：java.sql.SQLSyntaxErrorException: Unknown column ‘employee_no’ in ‘field list’</p><p><strong>错误原因</strong>：mybatis-plus自动生成的字段与数据库中的字段不一致导致</p><p><strong>改正方法</strong>：在使用驼峰命名法时，将数据库中的名称改为和mybatis-plus生成的字段一致即可</p></li><li><p><strong>错误</strong>：明明可以查到数据，但是返回空</p><p><strong>原因</strong>：因为你没有开启驼峰命名，比如你的数据表字段叫 category_id 你在实体也使用 category_id ,就会导致你的数据查询日志有记录，但是你的数据没有封装到实体，导致list是空值 null</p><p><strong>改正方法</strong>：使用驼峰命名 category_id 对应 categoryId 即可完美解决</p></li></ol><p>​</p>]]></content>
      
      
      
        <tags>
            
            <tag> mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合</title>
      <link href="/2022/112942096.html"/>
      <url>/2022/112942096.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h1><h4 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h4><ul><li>spring框架及以interface21框架为原型经过重新设计，并不断丰富其内涵，于2004年3月24日发布了1.0正式版本</li><li>开发人：Rod Johnson</li><li>spring理念：使现有技术更加容易使用，整合了现有的技术框架</li><li>SSH：Struct2 + Spring + Hibernate</li><li>SSM：SpringMVC + Spring + MyBites</li><li>官网：<a href="https://spring.io/projects/spring-framework#overview">https://spring.io/projects/spring-framework#overview</a></li><li>官方下载地址：<a href="http://rep.spring.io/release/org/springframework/spring">http://rep.spring.io/release/org/springframework/spring</a></li><li>Github：<a href="https://github.com/spring:projects/spring-framework">https://github.com/spring:projects/spring-framework</a></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h4><ul><li>Spring是一个开源的免费的框架</li><li>Spring是一个轻量级、非入侵式的框架</li><li>控制反转（IOC），面向切面编程（AOP）</li><li>支持事务的处理，对框架整合的支持</li></ul><p>总结：Spring是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架</p><h4 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h4><h4 id="1-4、拓展"><a href="#1-4、拓展" class="headerlink" title="1.4、拓展"></a>1.4、拓展</h4><ul><li><p>Spring Boot</p><ol><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速的开发单个微服务</li></ol></li><li><p>Spring Clude</p><ol><li>基于SpringBoot实现</li></ol></li></ul><p>学习SpringBoot必须完全掌握spring和SpringMVC</p><p>弊端：发展太久，违背了原来简化的理念。配置十分繁琐，人称 “ 配置地狱 ”</p><h2 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h2><ol><li><h5 id="UserDao接口"><a href="#UserDao接口" class="headerlink" title="UserDao接口"></a>UserDao接口</h5></li><li><h5 id="UserDaoImpl实现类"><a href="#UserDaoImpl实现类" class="headerlink" title="UserDaoImpl实现类"></a>UserDaoImpl实现类</h5></li><li><h5 id="UserService业务接口"><a href="#UserService业务接口" class="headerlink" title="UserService业务接口"></a>UserService业务接口</h5></li><li><h5 id="UserServiceImpl业务实现接口"><a href="#UserServiceImpl业务实现接口" class="headerlink" title="UserServiceImpl业务实现接口"></a>UserServiceImpl业务实现接口</h5></li></ol><p>我们使用一个set接口去实现用户的所有需求</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//利用set实现动态注入</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>set注入之后，程序不再具有主动性，而是变成被动的接受对象 ！</li></ul><p>系统的耦合性大大降低，可以更加专注的实现业务层管理，这是IOC的基本原理</p><h2 id="3、HelloSpring"><a href="#3、HelloSpring" class="headerlink" title="3、HelloSpring"></a>3、HelloSpring</h2><ol><li>spring官方网址：<a href="https://docs.spring.io/">https://docs.spring.io</a></li></ol><h2 id="4、IOC创建对象的方式"><a href="#4、IOC创建对象的方式" class="headerlink" title="4、IOC创建对象的方式"></a>4、IOC创建对象的方式</h2><ol><li><h5 id="使用无参构造对象创建函数，默认方式"><a href="#使用无参构造对象创建函数，默认方式" class="headerlink" title="使用无参构造对象创建函数，默认方式!"></a>使用无参构造对象创建函数，默认方式!</h5></li><li><h5 id="使用有参构造对象创建函数"><a href="#使用有参构造对象创建函数" class="headerlink" title="使用有参构造对象创建函数"></a>使用有参构造对象创建函数</h5><ol><li><p>下标赋值</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--第一种方式：下标赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>类型赋值</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--第二种方式：类型赋值，不建议使用，--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>直接赋值 </p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--第三种：直接赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol><p>总结：在配置文件加载的时候，容器中的对象就已经初始化过了</p></li></ol><h2 id="5、spring配置说明"><a href="#5、spring配置说明" class="headerlink" title="5、spring配置说明"></a>5、spring配置说明</h2><h4 id="5-1、别名"><a href="#5-1、别名" class="headerlink" title="5.1、别名"></a>5.1、别名</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--别名，若添加别名，也可以通过别名获取数据--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="5-2、Bean的配置"><a href="#5-2、Bean的配置" class="headerlink" title="5.2、Bean的配置"></a>5.2、Bean的配置</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--id：bean的唯一标识符，相当于我们学过的对象名class：bean对象所对应的全限定名: 包名 + 类型name：相当于别名，空格，逗号，分号皆可用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.UserSecond<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userT u2,u3;u4<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="5-4、import"><a href="#5-4、import" class="headerlink" title="5.4、import"></a>5.4、import</h4><p>import主要用于团队开发，可将多个配置文件放置在一个里面。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beans.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beans2.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beans3.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h2 id="6、依赖注入"><a href="#6、依赖注入" class="headerlink" title="6、依赖注入"></a>6、依赖注入</h2><h4 id="6-1、构造器注入"><a href="#6-1、构造器注入" class="headerlink" title="6.1、构造器注入"></a>6.1、构造器注入</h4><h4 id="6-2、set注入【重点】"><a href="#6-2、set注入【重点】" class="headerlink" title="6.2、set注入【重点】"></a>6.2、set注入【重点】</h4><ul><li>依赖注入：set注入<ul><li>依赖：bean对象的创建方式依赖于容器！</li><li>注入：bean对象中的所有属性，由容器注入！</li></ul></li></ul><p>【环境搭建】</p><ol><li><p>复杂类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>真实对象测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobby<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> card<span class="token punctuation">;</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> game<span class="token punctuation">;</span>    <span class="token keyword">private</span> String wife<span class="token punctuation">;</span>    <span class="token keyword">private</span> Properties info<span class="token punctuation">;</span></code></pre></li><li><p>ApplicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.Student<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姗宝<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"ApplicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h4 id="6-3、拓展注入"><a href="#6-3、拓展注入" class="headerlink" title="6.3、拓展注入"></a>6.3、拓展注入</h4><p>注意：p命名和c命名都受xml的约束</p><pre class=" language-xml"><code class="language-xml">xmlns:p="http://www.springframework.org/schema/p"xmlns:c="http://www.springframework.org/schema/c"</code></pre><h4 id="6-4、Bean的作用域"><a href="#6-4、Bean的作用域" class="headerlink" title="6.4、Bean的作用域"></a>6.4、Bean的作用域</h4><p>![](C:\Users\Bumble\Pictures\笔记图片\屏幕截图 2022-01-26 180055.png)</p><ol><li><p>单例模式（spring默认机制）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>19<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>原型模式：每从容器中get的时候，都会产生一个新对象！</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.something.DefaultAccountService<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>其余的request, session, application只能在web开发中使用！</p></li></ol><h2 id="7、Bean的自动装配"><a href="#7、Bean的自动装配" class="headerlink" title="7、Bean的自动装配"></a>7、Bean的自动装配</h2><ul><li>自动装配是Spring满足bean依赖的一种方式</li><li>Spring会在上下文中自动寻找，并且自动给bean装配属性</li></ul><p>在spring中有三种装配方式</p><ol><li>在xml中显示配置</li><li>在java中显示配置</li><li>隐式的自动装配Bean【重点】</li></ol><h4 id="7-1、测试"><a href="#7-1、测试" class="headerlink" title="7.1、测试"></a>7.1、测试</h4><pre class=" language-java"><code class="language-java">ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>People people <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"people"</span><span class="token punctuation">,</span>People<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>people<span class="token punctuation">.</span><span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>people<span class="token punctuation">.</span><span class="token function">getCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="7-2、ByName的自动装配"><a href="#7-2、ByName的自动装配" class="headerlink" title="7.2、ByName的自动装配"></a>7.2、ByName的自动装配</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--ByName装配：会在容器上下文中寻找，和自己对象set方法后面的相对应的beanid--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="7-3、ByType的自动装配"><a href="#7-3、ByType的自动装配" class="headerlink" title="7.3、ByType的自动装配"></a>7.3、ByType的自动装配</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--ByType装配：会在容器上下文中寻找，和自己对象属性类型相同的bean--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>小结：</p><ul><li>byname的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致</li><li>bytype的时候，需要保证所有bean的class唯一，并切这个bean需要和自动注入的属性的类型一致</li></ul><h4 id="7-4、使用注解实现自动装配"><a href="#7-4、使用注解实现自动装配" class="headerlink" title="7.4、使用注解实现自动装配"></a>7.4、使用注解实现自动装配</h4><p>使用注解须知：</p><ol><li><p>导入约束：xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;">http://www.springframework.org/schema/context"</a></p></li><li><p>配置注解的支持：<a href="context:annotation-config/">context:annotation-config/</a></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p><strong>@Autowried</strong></p><p>如果@Autowried自动装配的环境比较复杂，自动装配无法通过一个注解（Autowried）完成的时候，我们可以使用 @Qualifier(value = “xxx”) 去配置@Autowried的使用，指定一个卫衣的bean对象注入!</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"dog111"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span></code></pre></li><li><p><strong>@Resource注解</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">people</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cat2"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><p>小结：</p><p>**@Resource  **和 **@Autowried **的区别：</p><ul><li>都是用来实现自动装配的，都可以放在属性字段上！</li><li>@Autowried通过byType的方式实现，而且必须要求这个对象存在【常用】</li><li>@Resource通过byName的方式实现，如果找不到名字，则通过byType实现！，如果两种方式都找不到，程序就会报错！</li><li>执行顺序不同：@Autowried通过byType的方式实现，@Resource通过byName的方式实现</li></ul><h2 id="8、Spring注解开发"><a href="#8、Spring注解开发" class="headerlink" title="8、Spring注解开发"></a>8、Spring注解开发</h2><ol><li><p>bean</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//等价于 &lt;bean id="user" class="com.shan.pojo.User"/></span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>属性如何注入</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//相当于 &lt;property name="name" value="姗宝"/></span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"姗宝"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>衍生的注解</p><p>@Component有几个衍生注解</p><ul><li><p>dao【@Repository】</p></li><li><p>services【@Service】</p></li><li><p>controller【@Controller】</p><p>四个注解功能都是一样的，都是代表某个类注册到Spring中，配置Bean</p></li></ul></li><li><p>自动装配</p><p>@Autowried：自动装配类型，名字</p><p>@Nullable：字段标记了这个注解，说明这个字段可以为null</p><p>@Resource：自动装配通过名字，类型</p></li><li><p>作用域</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//相当于 &lt;property name="name" value="姗宝"/></span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"姗宝"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>小结</p><p>xml与注解：</p><ul><li>xml是万能的，适用于任何场合，维护简单方便</li><li>注解不是自己的类使用不了，维护相对复杂</li></ul><p>xml与注解的最佳实践：</p><ul><li><p>xml用来管理bean</p></li><li><p>注解只负责完成属性的注入</p></li><li><p>必须要让注解生效</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--必须指定需要扫描的包，这个包下所有注解都会生效--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ol><h2 id="9、使用java的方式配置Bean"><a href="#9、使用java的方式配置Bean" class="headerlink" title="9、使用java的方式配置Bean"></a>9、使用java的方式配置Bean</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这个注解表示这个类已经放到 Spring容器中</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"姗宝"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@Configuration是一个配置类，等价于 beans.xml</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.shan"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShanConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这个注解相当于一个 bean标签，id = "getName"，class = "getUser()"</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>ShanConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"getUser"</span><span class="token punctuation">,</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="10、代理模式"><a href="#10、代理模式" class="headerlink" title="10、代理模式"></a>10、代理模式</h2><p>SpringAOP </p><p>代理模式分类：</p><ul><li>静态代理</li><li>动态代理</li></ul><h4 id="10-1、静态代理"><a href="#10-1、静态代理" class="headerlink" title="10.1、静态代理"></a>10.1、静态代理</h4><p>角色分析：</p><ul><li>抽象角色：一般会使用接口或抽象类</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，做一些附属操作</li><li>客户：访问代理对象的人</li></ul><p>代码步骤：</p><ul><li><p>接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reclaim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>真实角色</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Host</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房东要出租房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reclaim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房东要回收房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>代理角色</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Host host<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>Host host<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> host<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        host<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中介带你看房！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"交钱，签合同！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>客户端访问代理角色</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Host host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Proxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>代理模式的好处：</p><ul><li>可以使真实角色的操作更加纯粹，不需要再去关注一些公共的业务</li><li>公共业务交给代理角色，实现了业务的分工</li><li>公共业务实现集中拓展时，方便集中管理</li></ul><p>缺点：</p><ul><li>一个真实角色会产生一个代理角色，代码量会翻倍，开发效率会变低</li></ul><h4 id="10-2、动态代理"><a href="#10-2、动态代理" class="headerlink" title="10.2、动态代理"></a>10.2、动态代理</h4><ul><li>动态代理和静态代理的角色一样</li><li>动态代理的代理类是自动生成的，不是我们直接写好的</li><li>动态代理分为两大类：基于接口的动态代理，基于类的动态代码<ul><li>基于接口 —– JDK动态代理【我们在这里使用】</li><li>基于类：cglib</li><li>java字节码实现：javasist</li></ul></li></ul><p>需要了解两个类：Proxy（处理），InvocationHandler（调动处理）</p><p>动态代理的好处：</p><ul><li>可以使真实角色的操作更加纯粹，不需要再去关注一些公共的业务</li><li>公共业务交给代理角色，实现了业务的分工</li><li>公共业务实现集中拓展时，方便集中管理</li><li>一个动态代理类的代理是一个接口，一般就是对应的一类业务</li><li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可！</li></ul><h2 id="11、AOP"><a href="#11、AOP" class="headerlink" title="11、AOP"></a>11、AOP</h2><h4 id="11-1-AOP的定义"><a href="#11-1-AOP的定义" class="headerlink" title="11.1 AOP的定义"></a>11.1 AOP的定义</h4><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/6016335">面向切面编程</a>，通过<a href="https://baike.baidu.com/item/%E9%A2%84%E7%BC%96%E8%AF%91/3191547">预编译</a>方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031">函数式编程</a>的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p><h4 id="11-2、AOP在Spring中的作用"><a href="#11-2、AOP在Spring中的作用" class="headerlink" title="11.2、AOP在Spring中的作用"></a>11.2、AOP在Spring中的作用</h4><p>提供事务声明，允许用户自定义切面</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能，即使与我们的业务逻辑无关，但是我们需要关注的部分，就是横切关注点。比如日志，安全，缓存，事务等。。。。。。</li><li>切面（ASPECT）：横切关注点，模块化的的特殊对象，即，他是一个类。</li><li>通知（Advice）：切面必须要完成的工作，即为类中的一个方法。</li><li>目标（Target）：被通知的对象</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>切入点（PointCut）：切面通知，执行的“地点”的定义</li><li>连接点（JointPoint）：与切入点匹配的执行点</li></ul><h4 id="11-3、使用Spring实现AOP"><a href="#11-3、使用Spring实现AOP" class="headerlink" title="11.3、使用Spring实现AOP"></a>11.3、使用Spring实现AOP</h4><p>方式一：使用Spring的API接口【主要SpringAPI接口实现】</p><p>方式二：自定义类实现【主要是切面定义】</p><p>方法三：使用注解实现</p><h1 id="2、Mybatis"><a href="#2、Mybatis" class="headerlink" title="2、Mybatis"></a>2、Mybatis</h1><p>环境：</p><ul><li>JDK1.8</li><li>Mysql</li><li>maven</li><li>IDEA</li></ul><p>回顾：</p><ul><li>JDBC</li><li>Mysql</li><li>java基础</li><li>Maven</li><li>Junit</li></ul><h2 id="1、Mybatis简介"><a href="#1、Mybatis简介" class="headerlink" title="1、Mybatis简介"></a>1、Mybatis简介</h2><h3 id="1-1、如何获得Mybatis"><a href="#1-1、如何获得Mybatis" class="headerlink" title="1.1、如何获得Mybatis?"></a>1.1、如何获得Mybatis?</h3><ul><li><p>maven仓库</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>GitHub：<a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p></li><li><p>中文文档：<a href="https://mybaties.org/mybatis-3/zh/index.html">https://mybaties.org/mybatis-3/zh/index.html</a></p></li></ul><h3 id="1-2、持久性"><a href="#1-2、持久性" class="headerlink" title="1.2、持久性"></a>1.2、持久性</h3><p>数据持久化</p><ul><li>是指将程序的数据在持久状态和瞬时状态转化的过程</li><li>内存：<strong>断电即失</strong></li><li>数据库：io文件持久化</li></ul><p>为什么需要持久化</p><ul><li>有一些对象，不需要丢弃</li><li>内存太贵</li></ul><h3 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h3><p>Dao层，Service层，Controller层</p><ul><li>完成持久工作的代码块</li><li>层界限明显</li></ul><h3 id="1-4、为什么需要Mybatis"><a href="#1-4、为什么需要Mybatis" class="headerlink" title="1.4、为什么需要Mybatis"></a>1.4、为什么需要Mybatis</h3><ul><li>帮助程序员将数据存入数据库中</li><li>方便</li><li>简化框架，自动化</li><li>更容易上手，简单易学</li></ul><p><strong>最重要的一点：使用的人多！</strong></p><h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p>思路：搭建环境 —&gt; 导入Mybatis —&gt; 编写程序 —&gt; 测试数据</p><h4 id="2-1、搭建环境"><a href="#2-1、搭建环境" class="headerlink" title="2.1、搭建环境"></a>2.1、搭建环境</h4><p>搭建数据库</p><p>新建一个普通的maven项目</p><ol><li>创建项目</li><li>删除src包</li><li>导入maven依赖</li></ol><h4 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shan<span class="token punctuation">.</span>Units<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUnits</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用 Mybatis第一步，获取 sqlSessionFactory对象</span>        String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//SqlSession完全包含了面向数据库执行 SQL的所有命令</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h4><ul><li><p>pojo层</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPwd</span><span class="token punctuation">(</span>String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", pwd='"</span> <span class="token operator">+</span> pwd <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>Dao接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>接口类实现（由之前的UserDaoImpl转变为一个UserMapper.xml文件）</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org/DTD Mapper 3.0"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.Dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h4><p>注意点：</p><ol><li><p>org.apache.ibatis.binding.BindingException: Type interface com.shan.Dao.UserDao is not known to the MapperRegistry.</p><p>解决方法：需在mybatis-config.xml中注册Mapper.xml</p></li><li><p>com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure</p><p>The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.</p><p>解决方案：在配置数据库url中加上<strong>useSSL=false&amp;</strong></p></li></ol><h2 id="3、增删改查"><a href="#3、增删改查" class="headerlink" title="3、增删改查"></a>3、增删改查</h2><h4 id="3-1、namespace"><a href="#3-1、namespace" class="headerlink" title="3.1、namespace"></a>3.1、namespace</h4><p>namespace中的包名要和接口层的包名一致</p><h4 id="3-2、select-查询"><a href="#3-2、select-查询" class="headerlink" title="3.2、select(查询)"></a>3.2、select(查询)</h4><ul><li>id：就是对应的namespace中的方法名</li><li>resultType：SQL语句执行的返回值</li><li>parameterType：参数类型！</li></ul><ol><li><p>编写接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据 ID查询用户</span>User <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>编写对应的SQL语句</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--根据 ID查询用户--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserByID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUnits<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><h4 id="3-3、insert-增加"><a href="#3-3、insert-增加" class="headerlink" title="3.3、insert(增加)"></a>3.3、insert(增加)</h4><ol><li><p>编写接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//新增用户</span>    <span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>编写SQL语句</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into mybatis.user(id, name, pwd) VALUES (#{id}, #{name}, #{pwd})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取 SqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUnits<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"姗宝四号"</span> <span class="token punctuation">,</span><span class="token string">"456789"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提交事务</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭资源</span>    <span class="token punctuation">}</span></code></pre></li></ol><h4 id="3-4、update-修改"><a href="#3-4、update-修改" class="headerlink" title="3.4、update(修改)"></a>3.4、update(修改)</h4><ol><li><p>编写接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//修改用户</span>    <span class="token keyword">int</span> <span class="token function">UpdateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>编写SQL</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UpdateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shan.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update mybatis.user set name=#{name},pwd=#{pwd} where id=#{id};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">UpdateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUnits<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">UpdateUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"姗宝"</span><span class="token punctuation">,</span><span class="token string">"111111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><h4 id="3-5、delete-删除"><a href="#3-5、delete-删除" class="headerlink" title="3.5、delete(删除)"></a>3.5、delete(删除)</h4><ol><li><p>编写接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//删除用户</span>    <span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>编写SQL</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from mybatis.user where id=#{id};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUnits<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><ul><li><strong>增删改查需要提交事务sqlSession.commit();</strong></li></ul><h4 id="3-6、Map"><a href="#3-6、Map" class="headerlink" title="3.6、Map"></a>3.6、Map</h4><p>假设我们的数据库或者实体类中的参数字段过多，我们应当考虑Map。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser2<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into mybatis.user(id, name, pwd) VALUES (#{userid}, #{username}, #{password})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">addUser2</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUnits<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userid"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"shanbao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"222222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-7、模糊查询"><a href="#3-7、模糊查询" class="headerlink" title="3.7、模糊查询"></a>3.7、模糊查询</h4><ol><li>Java代码执行时，传递通配符%{value}%</li></ol><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserLike</span><span class="token punctuation">(</span><span class="token string">"%李%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li><p>在SQL拼接中使用通配符</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mybatis<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">"%"</span><span class="token comment" spellcheck="true">#{value}"%";</span></code></pre></li></ol><p>Map传递参数,直接在sql中取出key即可! 【parameterType=“map”】</p><p>对象传递参数,直接在sql中取对象的属性即可! 【parameterType=“Object”】</p><p>只有一个基本类型参数的情况下,可以直接在sql中取到!</p><p>多个参数用Map, 或者注解!</p><h2 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h2><h4 id="4-1、核心配置文件"><a href="#4-1、核心配置文件" class="headerlink" title="4.1、核心配置文件"></a>4.1、核心配置文件</h4><p>mybatis-config.xml<br>MyBatis的配置文件包含了会深深影响MyBatis行为的设置和属性信息。<br>configuration（配置）<br>properties（属性）<br>settings（设置）<br>typeAliases（类型别名）<br>typeHandlers（类型处理器）<br>objectFactory（对象工厂）<br>plugins（插件）<br>environments（环境配置）<br>environment（环境变量）<br>transactionManager（事务管理器）<br>dataSource（数据源）<br>databaseIdProvider（数据库厂商标识）<br>mappers（映射器）</p><h4 id="4-2、环境变量-environments"><a href="#4-2、环境变量-environments" class="headerlink" title="4.2、环境变量(environments)"></a>4.2、环境变量(environments)</h4><p>MyBatis可以配置成适应多种环境</p><p>不过要记住:尽管可以配置多个环境,但每个SqlSessionFactory实例只能选择一种环境。</p><p>学会使用配置成适应多种环境</p><p>Mybatis默认的事务管理器就是JDBC, 连接池 : POOLED</p><h4 id="4-3、属性-properties"><a href="#4-3、属性-properties" class="headerlink" title="4.3、属性(properties)"></a>4.3、属性(properties)</h4><p>这些属性可以在外部进行配置，并可以进行动态替换。</p><p>既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。【db.properties】</p><p>编写一个配置文件</p><p>db.properties</p><p>driver=com.mysql.jdbc.Driver<br>url=jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;userUnicode=true&amp;characterEncoding=UTF-8<br>username=root<br>password=20010223</p><p>在核心配置文件中引入</p><!--引入外部配置文件--><pre><code>&lt;properties resource="db.properties"&gt;    &lt;property name="username" value="root"/&gt;    &lt;property name="password" value="20010223"/&gt;&lt;/properties&gt;</code></pre><p>可以直接引入外部配置文件<br>可以在其中增加一些属性配置<br>如果两个文件有同一个字段,优先使用外部配置文件的！</p><h4 id="4-4类型别名-typeAliases"><a href="#4-4类型别名-typeAliases" class="headerlink" title="4.4类型别名(typeAliases)"></a>4.4类型别名(typeAliases)</h4><p>类型别名是为java类型设置一个短的名字</p><p>存在的意义仅在于用来减少类完全限定名的冗余</p><!--可以给实体类起别名--><typealiases>    <typealias type="com.Ananhyle.pojo.User" alias="User"></typealias></typealiases><p>也可以指定一个包名, MyBatis会在包名下搜索需要的Java Bean, 比如:</p><p>扫描实体类的包, 它的默认别名就为这个类的包名,首字母小写!</p><!--可以给实体类起别名--><pre><code>&lt;typeAliases&gt;    &lt;package name="com.Ananhyle.pojo"/&gt;&lt;/typeAliases&gt;</code></pre><p>在实体类比较少的时候,使用第一种方式。</p><p>如果实体类十分多,建议使用第二种。</p><p>第一种可以DIY别名，第二种则不行，如果非要改,需要在实体上增加注释</p><p>@Alias(“user”)<br>public class User {}</p><h4 id="4-5、设置-settings"><a href="#4-5、设置-settings" class="headerlink" title="4.5、设置(settings)"></a>4.5、设置(settings)</h4><p>这是MyBatis中极为重要的调整设置,它们会改变MyBatis的运行时行为</p><h4 id="4-6其他配置"><a href="#4-6其他配置" class="headerlink" title="4.6其他配置"></a>4.6其他配置</h4><p>typeHandlers(类型处理器)<br>objectFactory(对象工厂)<br>[plugins (插件)]</p><h4 id="4-7、映射器-mappers"><a href="#4-7、映射器-mappers" class="headerlink" title="4.7、映射器(mappers)"></a>4.7、映射器(mappers)</h4><p>MapperRegistry: 注册绑定我们的Mapper文件;</p><p>方式一:</p><!--每一个Mapper.XML都需要在Mybotis核心配置文件中注册!--><mappers>    <mapper resource="com/Ananhyle/dao/UserMapper.xml"></mapper></mappers><p>方式二:使用class文件绑定注册</p><!--每一个Mapper.XML都需要在Mybotis核心配置文件中注册!--><mappers>    <mapper class="com.Ananhyle.dao.UserMapper"></mapper></mappers><p>注意点:</p><p>接口和他的Mapper配置文件必须同名!<br>接口和他的Mapper配置文件必须在同一个包下!<br>方式三:使用扫描包进行注入绑定</p><!--每一个Mapper.XML都需要在Mybotis核心配置文件中注册!--><mappers>    <package name="com.Ananhyle.dao"></package></mappers><p>注意点:</p><p>接口和他的Mapper配置文件必须同名!<br>接口和他的Mapper配置文件必须在同一个包下!<br>练习:</p><p>将数据库配置文件外部引入<br>实体类别名<br>保证UserMapper接口和UserMapper.xml改为一致! 并且放在同一个包下!</p><h4 id="4-8、生命周期和作用域-Scope"><a href="#4-8、生命周期和作用域-Scope" class="headerlink" title="4.8、生命周期和作用域(Scope)"></a>4.8、生命周期和作用域(Scope)</h4><p>生命周期,和作用域,是至关重要的，以为错误的使用会导致非常严重的并发问题。</p><p>SqlSessionFactoryBuilder:</p><p>一旦创建了 SqlSessionFactory, 就不再需要它了<br>局部变量<br>SqlSessionFactory:</p><p>说白了就是可以想象为 : 数据库连接池，没有任何里有丢弃它或重新创建另一个实例。</p><p>因此 SqlSessionFactory的最佳作用域是应用作用域。</p><p>最简单的就是使用单例模式或者静态单例模式。</p><p>SqlSession</p><p>连接到连接池的一个请求!<br>SqlSession的实例不是线程安全的，因此是不能被共享的,所以它的最佳的作用域是请求或方法作用域。<br>用完之后需要赶紧关闭，否则资源被占用!<br>这里面的每一个Mapper,就代表一个具体的业务!</p><h2 id="5、解决属性名和字段不一致的问题"><a href="#5、解决属性名和字段不一致的问题" class="headerlink" title="5、解决属性名和字段不一致的问题"></a>5、解决属性名和字段不一致的问题</h2><h4 id="5-1、问题"><a href="#5-1、问题" class="headerlink" title="5.1、问题"></a>5.1、问题</h4><p>数据库中的字段</p><p>新建一个项目, 拷贝之前的, 测试实体类字段不一致的情况</p><p>public class User {<br>    private int id;<br>    private String name;<br>    private String password;<br>}</p><p>测试出现问题</p><p>//select * from mybatis.user where id = #{id}<br>//类型处理器<br>//select id,name,pwd  from mybatis.user where id = #{id}</p><p>解决方法:</p><p>起别名</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.Ananhyle.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,name,pwd as password from mybatis.user where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h4 id="5-2、resultMap"><a href="#5-2、resultMap" class="headerlink" title="5.2、resultMap"></a>5.2、resultMap</h4><p>结果集映射</p><p>idnamepwd<br>idnamepassword</p><!--结果集映射--><pre><code>&lt;resultMap id="UserMap" type="User"&gt;    &lt;!--column数据库中的字段, property实体类中的属性--&gt;    &lt;result column="id" property="id"/&gt;    &lt;result column="name" property="name"/&gt;    &lt;result column="pwd" property="password"/&gt;&lt;/resultMap&gt;&lt;select id="getUserById" resultMap="UserMap"&gt;    select * from mybatis.user where id = #{id}&lt;/select&gt;</code></pre><p>resultMap元素是MyBatis中最重要最强大的元素<br>ResultMap的设计思想是, 对于简单的语句根本不需要配置显式的结果映射, 而对于复杂一点的语句只需要描述它们的关系就行了。<br>ResultMap 最优秀的地方在于，虽然已经对它相当了解了,但是根本不需要显式地用到。<br>如果世界总是那么简单就好了</p><h2 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h2><h4 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6.1、日志工厂"></a>6.1、日志工厂</h4><p>如果一个数据库操作,出现了异常,我们需要排错。日志就是最好的助手!</p><p>曾经: sout、debug</p><p>现在: 日志工厂！</p><p>如果一个数据库出现</p><p>SLF4J<br>LOG4J 【掌握】<br>LOG4J2<br>JDK_LOGGING<br>COMMONS_LOGGING<br>STDOUT_LOGGING 【掌握】<br>NO_LOGGING<br>在Mybatis中具体使用哪个日志实现,在设置中设定！</p><p>STDOUT_LOGGING标准日志输出</p><p>在mybatis核心文件中，配置我们的日志!</p><settings>    <setting name="logImpl" value="STDOUT_LOGGING"></setting></settings><h4 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h4><p>什么是Log4j?</p><p>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件<br>我们也可以控制每一条日志的输出格式；<br>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程<br>通过配置文件来灵活地进行配置，而不需要修改应用的代码<br>1、先导入log4j的包</p><!-- https://mvnrepository.com/artifact/log4j/log4j --><dependency>    <groupid>log4j</groupid>    <artifactid>log4j</artifactid>    <version>1.2.17</version></dependency><p>2、log4j.properties</p><p>log4j.properties<br>#将等级为DEBUG的日志信息输出到console和file两个目的地<br>log4j.rootLogger=DEBUG,console,file</p><p>#控制台输出的相关设置<br>log4j.appender.console=org.apache.log4j.ConsoleAppender<br>log4j.appender.console.Target=System.out<br>log4j.appender.console.Threshold=DEBUG<br>log4j.appender.console.layout=org.apache.log4j.PatternLayout<br>log4j.appender.console.layout.ConversionPattern=[%c]-%m%n</p><p>#文件输出的相关配置<br>log4j.appender.file=org.apache.log4j.RollingFileAppender<br>log4j.appender.file.File=./log/Ananhyle.log<br>log4j.appender.file.MaxFileSize=10mb<br>log4j.appender.file.Threshold=DEBUG<br>log4j.appender.file.layout=org.apache.log4j.PatternLayout<br>log4j.appender.file.layout.ConversionPattern=[%p][%d{yy-MM-dd}【%c】%m%n</p><p>#日志输出级别<br>log4j.logger.org.mybatis=DEBUG<br>log4j.logger.java.sql=DEBUG<br>log4j.logger.java.sql.Statement=DEBUG<br>log4j.logger.java.sql.ResultSet=DEBUG<br>log4j.logger.java.sql.PreparedStatement=DEBUG</p><p>3.配置log4j为日志的实现</p><settings>    <setting name="logImpl" value=""></setting></settings><p>4.Log4j的使用!,直接测试运行刚才的查询</p><p>简单使用</p><p>1.在要使用Log4j的类中,导入包 import org.apache.log4j.Logger;</p><p>2.日志对象,参数为当前类的class</p><p>static Logger logger = Logger.getLogger(UserDaoTest.class);</p><p>3.日志级别</p><p>logger.info(“info:进入了testLog4j”);<br>logger.debug(“debug:进入了testLog4j”);<br>logger.error(“error:进入了testLog4j”);</p><h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2><p>思考:为什么要分页?</p><p>减少数据处理量</p><h4 id="7-1、使用Limit分页"><a href="#7-1、使用Limit分页" class="headerlink" title="7.1、使用Limit分页"></a>7.1、使用Limit分页</h4><p>使用Limit分页</p><p>语法:SELECT * from user limit startIndex.pageSize;</p><p>使用Mybatis实现分页，核心SQL</p><p>1.接口</p><p>//分页<br>List<user> getUserByLimit(Map&lt;String,Integer&gt; map);</user></p><p>2.Mapper.XML</p><!--分页--><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByLimit<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user limit #{startIndex},#{pageSize}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>3.测试</p><p>@Test<br>public void getUserByLimit(){<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</p><pre><code>HashMap&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;();map.put("startIndex",1);map.put("pageSize",2);List&lt;User&gt; userList = mapper.getUserByLimit(map);for (User user : userList){    System.out.println(user);}sqlSession.close();</code></pre><p>}</p><h4 id="7-2、RowBounds分页"><a href="#7-2、RowBounds分页" class="headerlink" title="7.2、RowBounds分页"></a>7.2、RowBounds分页</h4><p>不再使用SQL实现分页</p><p> 1.接口</p><p>//分页2<br>List<user> getUserByRowBounds();</user></p><p> 2.mapper.xml</p><!--分页2--><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByRowBounds<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select *  from mybatis.user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p> 3.测试</p><p>@Test<br>public void getUserByRowBounds(){<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();</p><pre><code>//RowBounds实现RowBounds rowBounds = new RowBounds(1, 2);//通过Java代码层面实现分页List&lt;User&gt; userList = sqlSession.selectList("com.Ananhyle.dao.UserMapper.getUserByRowBounds",null,rowBounds);for (User user : userList) {    System.out.println(user);}sqlSession.close();</code></pre><p>}</p><h4 id="7-3、分页插件"><a href="#7-3、分页插件" class="headerlink" title="7.3、分页插件"></a>7.3、分页插件</h4><p>了解即可，万一以后公司的架构师,说要使用,你需要知道它是什么东西!</p><h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><h4 id="8-1、面向接口编程"><a href="#8-1、面向接口编程" class="headerlink" title="8.1、面向接口编程"></a>8.1、面向接口编程</h4><p>·大家之前都学过面向对象编程,也学习过接口,但在真正的开发中,很多时候我们会选择面向接口编程</p><p>-根本原因: 解耦 ,可拓展,提高复用,分层开发中,上层不用管具体的实现,大家都遵守共同的标准,使得开发变得容易,规范性更好</p><p>-在一个面向对象的系统中,系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下,各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了;</p><p>-而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信,大到各模块之间的交互,在系统设计之初都是要着重考虑的,这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p><p>关于接口的理解</p><p>·接口从层次的理解,应是定义(规范,约束)与实现(名实分离的原则)的分离。</p><p>·接口的本身反映了系统设计人员对系统的抽象理解。</p><p>-接口应有两类</p><p> -第一类是对一个个体的抽象,它可对应为一个抽象体(abstract class);</p><p> -第二类是对一个个体某一方面的抽象,即形成一个抽象面(interface) ;</p><p>·一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p><p>三个面向区别</p><p>-面向对象是指,我们需要考虑问题时，以对象为单位，考虑它的属性及方法.</p><p>-面向过程是指，我们考虑问题时，以一个具体的流程(事务过程)为单位，考虑它的实现.</p><p>-接口设计与非接口设计是针对复用技术而言的，与面向对象(过程)不是一个问题.更多的体现就是对系统整体的架构</p><h4 id="8-2、使用注解开发"><a href="#8-2、使用注解开发" class="headerlink" title="8.2、使用注解开发"></a>8.2、使用注解开发</h4><p>1.注解在接口上实现</p><p>@Select(“select * from user”)<br>List<user> getUsers();</user></p><p>2.需要再核心配置文件中绑定接口!</p><!--绑定接口--><mappers>        <mapper class="com.Ananhyle.dao.UserMapper"></mapper></mappers><p>3.测试</p><p>本质:反射机制实现</p><p>底层:动态代理!</p><p>Mybatis详细的执行流程!</p><h4 id="8-3、CRUD"><a href="#8-3、CRUD" class="headerlink" title="8.3、CRUD"></a>8.3、CRUD</h4><p>我们可以在工具类创建的时候实现自动提交事务!</p><p>public static SqlSession getSqlSession(){<br>    return sqlSessionFactory.openSession(true);<br>}</p><p>编写接口，增加注解</p><p>public interface UserMapper {</p><pre><code>@Select("select * from user")List&lt;User&gt; getUsers();//方法存在多个参数，所有的参数前面必须加上 @Param("id")注解@Select("select * from user where id = #{id}")User getUserByID(@Param("id") int id);@Insert("insert into user(id,name,pwd) values (#{id},#{name},#{password})")int addUser(User user);@Update("update user set name=#{name},pwd=#{password} where id = #{id}")int updateUser(User user);@Delete("delete from user where id = #{id}")int deleteUser(@Param("id") int id);</code></pre><p>}</p><p>测试类</p><p>【注意:我们必须要将接口注册绑定到我们的核心配置文件中!】</p><h4 id="8-4、关于-Param-注解"><a href="#8-4、关于-Param-注解" class="headerlink" title="8.4、关于@Param()注解"></a>8.4、关于@Param()注解</h4><p>基本类型的参数或者String类型,需要加上<br>引用类型不需要加<br>如果只有一个基本类型的话, 可以忽略, 但是建议大家都加上<br>我们在SQL中引用的就是我们这里的@Param()中设定的属性名!</p><p><strong>#{} 和 ${}区别</strong></p><h2 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h2><p>Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.<br>Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.</p><p>java library<br>plugs<br>build tools<br>with one annotation your class<br>使用步骤:</p><p>1.在IDEA中安装Lombok插件!</p><p>2.在项目中导入lombok的jar包</p><!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --><dependency>    <groupid>org.projectlombok</groupid>    <artifactid>lombok</artifactid>    <version>1.18.10</version>    <scope>provided</scope></dependency><p>3.在实体类上加注解即可!</p><p>@Data<br>@AllArgsConstructor<br>@NoArgsConstructor</p><p>@Getter and @Setter    ***<br>@FieldNameConstants<br>@ToString***<br>@EqualsAndHashCode***<br>@AllArgsConstructor***<br>, @RequiredArgsConstructor and @NoArgsConstructor   ***<br>@Log, @Log4j, @Log4j2, @Slf4j, @XSlf4j, @CommonsLog, @JBossLog, @Flogger, @CustomLog<br>@Data***<br>@Builder<br>@SuperBuilder<br>@Singular<br>@Delegate<br>@Value<br>@Accessors***<br>@Wither<br>@With<br>@SneakyThrows</p><p>说明:</p><p>@Data: 无参构造, get、set、tostring、hashcode,equals<br>@AllArgsConstructor<br>@NoArgsConstructor</p><h2 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h2><p>多个学生,对应一个老师</p><p>对于学生这边而言, 关联 … 多个学生, 关联一个老师【多对一】</p><p>对于老师而言, 集合 , 一个老师,有很多学生【一对多】</p><p>SQL</p><p>CREATE TABLE <code>teacher</code> (<br>    <code>id</code> INT(10) NOT NULL,<br>    <code>name</code> VARCHAR(30) DEFAULT NULL,<br>    PRIMARY KEY (<code>id</code>)<br>) ENGINE=INNODB DEFAULT CHARSET=utf8</p><p>INSERT INTO teacher(<code>id</code>, <code>name</code>) VALUES (1, ‘秦老师’); </p><p>CREATE TABLE <code>student</code> (<br>    <code>id</code> INT(10) NOT NULL,<br>    <code>name</code> VARCHAR(30) DEFAULT NULL,<br>    <code>tid</code> INT(10) DEFAULT NULL,<br>    PRIMARY KEY (<code>id</code>),<br>    KEY <code>fktid</code> (<code>tid</code>),<br>    CONSTRAINT <code>fktid</code> FOREIGN KEY (<code>tid</code>) REFERENCES <code>teacher</code> (<code>id</code>)<br>) ENGINE=INNODB DEFAULT CHARSET=utf8<br>INSERT INTO <code>student</code> (<code>id</code>, <code>name</code>, <code>tid</code>) VALUES (1, ‘小明’, 1);<br>INSERT INTO <code>student</code> (<code>id</code>, <code>name</code>, <code>tid</code>) VALUES (2, ‘小红’, 1);<br>INSERT INTO <code>student</code> (<code>id</code>, <code>name</code>, <code>tid</code>) VALUES (3, ‘小张’, 1);<br>INSERT INTO <code>student</code> (<code>id</code>, <code>name</code>, <code>tid</code>) VALUES (4, ‘小李’, 1);<br>INSERT INTO <code>student</code> (<code>id</code>, <code>name</code>, <code>tid</code>) VALUES (5, ‘小王’, 1);</p><p>测试环境搭建<br>导入lombok<br>新建实体类Teacher,Student<br>建立Mapper接口<br>建立Mapper,XML文件<br>在核心配置文件中绑定注册我们的Mapper接口或者文件! 【方式很多，随心选】<br>测试查询是否能够成功!<br>按照查询嵌套处理</p><!--     思路:        1.查询所有的学生信息        2.根据查询出来的学生的tid, 寻找对应的老师! --><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudent<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><resultmap id="StudentTeacher" type="Student">    <result property="id" column="id">    <result property="name" column="name">    <!--复杂的属性,我们需要单独处理            对象:    association            集合:    collection        -->    <association property="teacher" column="tid" javatype="Teacher" select="getTeacher"></association></result></result></resultmap><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from teacher where id = #{id};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>按照结果嵌套处理</p><!--按照结果嵌套处理--><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select s.id sid,s.name sname,t.name tname    from student s,teacher t    where s.tid = t.id;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><resultmap id="StudentTeacher2" type="Student">    <result property="id" column="sid">    <result property="name" column="sname">    <association property="teacher" javatype="Teacher">        <result property="name" column="tname">    </result></association></result></result></resultmap><p>回顾Mysql 多对一查询方式:</p><p>子查询<br>联表查询</p><h2 id="11、一对多处理"><a href="#11、一对多处理" class="headerlink" title="11、一对多处理"></a>11、一对多处理</h2><p>比如:一个老师拥有多个学生!</p><p>对于老师而言,就是一对多的关系!</p><p>环境搭建<br>1.环境搭建, 和刚才一样</p><p>实体类</p><p>@Data<br>public class Student {</p><pre><code>private int id;private String name;private int tid;</code></pre><p>}<br>@Data<br>public class Teacher {</p><pre><code>private int id;private String name;//一个老师拥有多个学生private List&lt;Student&gt; students;</code></pre><p>}<br>按照结果嵌套处理</p><!--按结果嵌套查询--><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select s.id sid, s.name sname, t.name tname, t.id tid    from student s,teacher t    where s.tid = t.id and t.id = #{tid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><resultmap id="TeacherStudent" type="Teacher">    <result property="id" column="tid">    <result property="name" column="tname">    <!--复杂的属性,我们需要单独处理            对象:    association            集合:    collection<pre><code>        javaType=&quot;&quot; 指定属性的类型;        集合中的泛型信息,我们使用ofType获取    --&gt;&lt;collection property=&quot;students&quot; ofType=&quot;Student&quot;&gt;    &lt;result property=&quot;id&quot; column=&quot;sid&quot;/&gt;    &lt;result property=&quot;name&quot; column=&quot;sname&quot;/&gt;    &lt;result property=&quot;tid&quot; column=&quot;tid&quot;/&gt;&lt;/collection&gt;</code></pre></resultMap><p>按照查询嵌套处理</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.teacher where id = #<span class="token entity" title="&#123;">&amp;#123;</span>tid<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><resultMap id="TeacherStudent2" type="Teacher">    <collection property="students" javaType="ArrayList" ofType="Student"  select="getStudentByTeacherId" column="id"/></resultMap><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.student where tid = #<span class="token entity" title="&#123;">&amp;#123;</span>tid<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>小结<br>关联 - association 【多对一】<br>集合 - collection 【一对多】<br>javaType &amp; ofType<br>JavaType用来指定实体类中属性的类型<br>ofType 用来指定映射到List或者集合中的pojo类型，泛型中的约束类型!<br>注意点:</p><p>保证SQL的可读性, 尽量保证通俗易懂<br>注意一对多和多对一中, 属性名和字段的问题!<br>如果问题不好排查错误, 可以使用日志, 建议使用 Log4j<br>面试高频<br>Mysql引擎<br>InnoDB底层原理<br>索引<br>索引优化!</p><h2 id="12、动态SQL"><a href="#12、动态SQL" class="headerlink" title="12、动态SQL"></a>12、动态SQL</h2><h4 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>blog<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客标题'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>author<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'博客作者'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>views<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'浏览量'</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8</code></pre><p>创建一个工程</p><ol><li><p>导包</p></li><li><p>编写配置文件</p></li><li><p>编写实体类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date create_time<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> views<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>编写对应的 Mapper 接口和 Mapper.xml 文件</p></li></ol><h4 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.se.pojo.Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog where 1=1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and title=#<span class="token entity" title="&#123;">&amp;#123;</span>title<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and author=#<span class="token entity" title="&#123;">&amp;#123;</span>author<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h4 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim(where,set)"></a>trim(where,set)</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            title=#<span class="token entity" title="&#123;">&amp;#123;</span>title<span class="token entity" title="&#125;">&amp;#125;</span>,        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            author=#<span class="token entity" title="&#123;">&amp;#123;</span>author<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    where id=#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><h4 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose(when,otherwise)"></a>choose(when,otherwise)</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.se.pojo.Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                title = #<span class="token entity" title="&#123;">&amp;#123;</span>title<span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and author=#<span class="token entity" title="&#123;">&amp;#123;</span>author<span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>                and views=#<span class="token entity" title="&#123;">&amp;#123;</span>views<span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>动态SQL本质还是SQL语句，只是我们可以在SQL层面，去执行一个逻辑代码</strong></p><p>ifwherechoosewhenset</p><h4 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h4><p><img src="C:\Users\Bumble\AppData\Roaming\Typora\typora-user-images\image-20220210155903464.png" alt="image-20220210155903464"></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogForeach<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.se.pojo.Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and (<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            id = #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h4 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h4><p>有的时候，我们会将一些功能的部分抽取出来，方便复用</p><ol><li><p>使用SQL标签抽取公共的部分</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        title=#<span class="token entity" title="&#123;">&amp;#123;</span>title<span class="token entity" title="&#125;">&amp;#125;</span>,    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        author=#<span class="token entity" title="&#123;">&amp;#123;</span>author<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre></li><li><p>在需要使用的地方使用include标签引用即可</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.se.pojo.Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ol><p><strong>动态SQL就是在拼接SQL语句，我们只需要保证SQL正确性，按照SQL的格式，进行排列组合即可！</strong></p><h2 id="13、缓存"><a href="#13、缓存" class="headerlink" title="13、缓存"></a>13、缓存</h2><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><p>查询:连接数据库，耗资源! 一次查询的结果,给他暂存在一个可以直接取到的地方! –&gt;内存 : 缓存</p><p>我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</p><p>1、什么是缓存[Cache ]?</p><p>存在内存中的临时数据。</p><p>将用户经常查询的数据放在缓存(内存)中,用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询,从缓存中查询,从而提高查询效率,解决了高并发系统的性能问题。</p><p>2、为什么使用缓存?。</p><p> 减少和数据库的交互次数,减少系统开销,提高系统效率。</p><p>3、什么样的数据能使用缓存?。</p><p> 经常查询并且不经常改变的数据。 【可以使用缓存】</p><h4 id="2、Mybatis缓存"><a href="#2、Mybatis缓存" class="headerlink" title="2、Mybatis缓存"></a>2、Mybatis缓存</h4><ul><li><p>MyBatis包含了一个非常强大的查询缓存特性,它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p></li><li><p>MyBatis系统中默认定义了两级缓存:一级缓存和二级缓存</p><ul><li>默认情况下，只有一级缓存开启。(SqlSession级别的缓存,也称为本地缓存)</li><li>二级缓存需要手动开启和配置,他说基于namespace级别的缓存</li><li>为了提高扩展性,MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li><li></li></ul></li></ul><h4 id="3、一级缓存"><a href="#3、一级缓存" class="headerlink" title="3、一级缓存"></a>3、一级缓存</h4><ul><li>一级缓存也叫本地缓存。 sqlSession</li><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要相同的数据，直接从缓存中拿，没必须再去查询数据库;</li><li></li></ul><p>测试步骤：</p><p> 1.开启日志!</p><p> 2.测试在一个Sesion中查询两次相同记录</p><p> 3.查看日志输出</p><p>缓存失效的情况：</p><p> 1.增删改操作，可能会改变原来的数据，所以必定会刷新缓存!</p><p> 2.查询不同的Mapper.xml</p><p> 3.查询不同的东西</p><p> 4.手动清理缓存！</p><p><strong>小结:一级缓存默认是开启的，只在一次sqlSession中有效，也就是拿到连接到关闭连接这个区间段!</strong></p><p><strong>一级缓存相当于一个Map。</strong></p><h4 id="4、二级缓存"><a href="#4、二级缓存" class="headerlink" title="4、二级缓存"></a>4、二级缓存</h4><ul><li><p>二级缓存也叫全局缓存,一级缓存作用域太低了,所以诞生了二级缓存</p></li><li><p>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</p></li><li><p>工作机制</p><ul><li>一个会话查询一条数据,这个数据就会放在当前会话的一级缓存中;</li><li>如果当前会话关闭了,这个会话对应的一级缓存就没了;但是我们想要的是，会话关闭了,一级缓存中的数据被保存到二级缓存中</li><li>新的会话查询信息，就可以从二级缓存中获取内容;</li><li>不同的mapper查出的数据会放在自己对应的缓存(map)中;</li></ul></li></ul><h4 id="5、小结"><a href="#5、小结" class="headerlink" title="5、小结"></a>5、小结</h4><ul><li>只要开启了二级缓存,在同一个Mapper下就有效</li><li>所有的数据都会先放在一级缓存中;</li><li>只有当会话提交, 或者关闭的时候,才会提交到二级缓存中!</li></ul><h4 id="6、自定义缓存"><a href="#6、自定义缓存" class="headerlink" title="6、自定义缓存"></a>6、自定义缓存</h4><ol><li><p>导包</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.caches<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在Mapper中指定使我们的ehcache缓存实现！</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--在当前xml中使用二级缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.caches.ehcache.EhcacheCache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>ehcache.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://ehcache.org/ehcache.xsd<span class="token punctuation">"</span></span>     <span class="token attr-name">updateCheck</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--   diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：   user.home – 用户主目录   user.dir – 用户当前工作目录   java.io.tmpdir – 默认临时文件路径 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./tmpdir/Tmp_EhCache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span>        <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span>        <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span>        <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>259200<span class="token punctuation">"</span></span>        <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cloud_user<span class="token punctuation">"</span></span>        <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span>        <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span>        <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span>        <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--   defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。 --></span><span class="token comment" spellcheck="true">&lt;!--  name:缓存名称。  maxElementsInMemory:缓存最大数目  maxElementsOnDisk：硬盘最大缓存个数。  eternal:对象是否永久有效，一但设置了，timeout将不起作用。  overflowToDisk:是否保存到磁盘，当系统当机时  timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。  timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。  diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.  diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。  diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。  memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。  clearOnFlush：内存数量最大时是否清除。  memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。  FIFO，first in first out，这个是大家最熟的，先进先出。  LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。  LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">></span></span></code></pre></li></ol><h1 id="3、SpringMVC"><a href="#3、SpringMVC" class="headerlink" title="3、SpringMVC"></a>3、SpringMVC</h1><p>SSM：Mybatis + Spring + SpringMVC</p><p><strong>MVC三层架构</strong></p><p>SpringMVC + Vue + SpringBoot + SpringCloud + Linux</p><p>MVC：模型（dao，services），视图（jsp），控制（Servlet）</p><h2 id="1、SpringMVC的特点："><a href="#1、SpringMVC的特点：" class="headerlink" title="1、SpringMVC的特点："></a>1、SpringMVC的特点：</h2><ol><li>轻量级，简单易学</li><li>高效，基于请求响应的MVC框架</li><li>和spring的兼容性好</li><li>约定大于配置</li><li>功能强大：RESTful，数据验证，格式化，本地化，主题等</li><li>简洁灵活</li></ol><p><img src="C:\Users\Bumble\AppData\Roaming\Typora\typora-user-images\image-20220211105218043.png" alt="image-20220211105218043"></p><p>运行SpringMVC可能遇到的问题</p><ol><li>查看控制台输出，看一下是否少了jar包</li><li>若jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖</li><li>重启Tomcat</li></ol><h2 id="2、解决乱码问题"><a href="#2、解决乱码问题" class="headerlink" title="2、解决乱码问题"></a>2、解决乱码问题</h2><p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p><p>以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置 .</p><p>修改了xml文件需要重启服务器！</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><p>但是我们发现 , 有些极端情况下.这个过滤器对get的支持不好 .</p><p>处理方法：</p><ol><li><p>修改tomcat配置文件 ：设置编码！</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>          <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>          <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li><li><p>自定义过滤器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>filter<span class="token punctuation">;</span> <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequestWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>UnsupportedEncodingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** 解决get和post请求 全部乱码的过滤器*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericEncodingFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//处理response的字符编码</span>       HttpServletResponse myResponse<span class="token operator">=</span><span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> response<span class="token punctuation">;</span>       myResponse<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转型为与协议相关对象</span>       HttpServletRequest httpServletRequest <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> request<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 对request包装增强</span>       HttpServletRequest myrequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRequest</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>       chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>myrequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//自定义request对象，HttpServletRequest的包装类</span><span class="token keyword">class</span> <span class="token class-name">MyRequest</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServletRequestWrapper</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> HttpServletRequest request<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//是否编码的标记</span>   <span class="token keyword">private</span> <span class="token keyword">boolean</span> hasEncode<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span>   <span class="token keyword">public</span> <span class="token function">MyRequest</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// super必须写</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对需要增强方法 进行覆盖</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> Map <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 先获得请求方式</span>       String method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// post请求</span>           <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 处理post乱码</span>               request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// get请求</span>           Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasEncode<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 确保get手动编码逻辑只运行一次</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span>String parameterName <span class="token operator">:</span> parameterMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   String<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parameterName<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>values <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                           <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// 处理get乱码</span>                               values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                                      <span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               hasEncode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> parameterMap<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//取一个值</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> String <span class="token function">getParameter</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       String<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>values <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取回参数的第一个值</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//取所有值</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterValues</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       String<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> values<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这个也是我在网上找的一些大神写的，一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！</p><p>配置过滤器</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.shan.filter.GenericEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre></li></ol><p><strong>然后在web.xml中配置这个过滤器即可！</strong></p><p>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p><h2 id="3、整合SSM"><a href="#3、整合SSM" class="headerlink" title="3、整合SSM"></a>3、整合SSM</h2><blockquote><p>环境要求</p></blockquote><p>环境：</p><ul><li>IDEA</li><li>MySQL 5.7.19</li><li>Tomcat 9</li><li>Maven 3.6</li></ul><p> 要求：</p><ul><li>需要熟练掌握MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识；</li></ul><blockquote><p>数据库环境</p></blockquote><p>创建一个存放书籍数据的数据库表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>ssmbuild<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>ssmbuild<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>books<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>books<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>bookID<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'书id'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>bookName<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'书名'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>bookCounts<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'数量'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>detail<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'描述'</span><span class="token punctuation">,</span><span class="token keyword">KEY</span> <span class="token punctuation">`</span>bookID<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>bookID<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token keyword">INSERT</span>  <span class="token keyword">INTO</span> <span class="token punctuation">`</span>books<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>bookID<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>bookName<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>bookCounts<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>detail<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Java'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'从入门到放弃'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'MySQL'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'从删库到跑路'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Linux'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'从进门到进牢'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>基本环境搭建</p></blockquote><p>1、新建一Maven项目！ssmbuild ， 添加web的支持</p><p>2、导入相关的pom依赖！</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--Junit--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--数据库驱动--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 数据库连接池 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mchange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--Servlet - JSP --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--Mybatis--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--Spring--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>3、Maven资源过滤设置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>4、建立基本结构和配置框架！</p><ul><li><p>com.kuang.pojo</p></li><li><p>com.kuang.dao</p></li><li><p>com.kuang.service</p></li><li><p>com.kuang.controller</p></li><li><p>mybatis-config.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration       PUBLIC "-//mybatis.org//DTD Config 3.0//EN"       "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ul><blockquote><p>Mybatis层编写</p></blockquote><p>1、数据库配置文件 <strong>database.properties</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span></code></pre><p>2、IDEA关联数据库</p><p>3、编写MyBatis的核心配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration       PUBLIC "-//mybatis.org//DTD Config 3.0//EN"       "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/kuang/dao/BookMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>4、编写数据库对应的实体类 com.kuang.pojo.Books</p><p>使用lombok插件！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Books</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> bookID<span class="token punctuation">;</span>   <span class="token keyword">private</span> String bookName<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> bookCounts<span class="token punctuation">;</span>   <span class="token keyword">private</span> String detail<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>5、编写Dao层的 Mapper接口！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Books<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookMapper</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//增加一个Book</span>   <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Books book<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//根据id删除一个Book</span>   <span class="token keyword">int</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//更新Book</span>   <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//根据id查询,返回一个Book</span>   Books <span class="token function">queryBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//查询全部Book,返回list集合</span>   List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>6、编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper       PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"       "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.dao.BookMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--增加一个Book--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      insert into ssmbuild.books(bookName,bookCounts,detail)      values (#<span class="token entity" title="&#123;">&amp;#123;</span>bookName<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>bookCounts<span class="token entity" title="&#125;">&amp;#125;</span>, #<span class="token entity" title="&#123;">&amp;#123;</span>detail<span class="token entity" title="&#125;">&amp;#125;</span>)   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--根据id删除一个Book--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteBookById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      delete from ssmbuild.books where bookID=#<span class="token entity" title="&#123;">&amp;#123;</span>bookID<span class="token entity" title="&#125;">&amp;#125;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--更新Book--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      update ssmbuild.books      set bookName = #<span class="token entity" title="&#123;">&amp;#123;</span>bookName<span class="token entity" title="&#125;">&amp;#125;</span>,bookCounts = #<span class="token entity" title="&#123;">&amp;#123;</span>bookCounts<span class="token entity" title="&#125;">&amp;#125;</span>,detail = #<span class="token entity" title="&#123;">&amp;#123;</span>detail<span class="token entity" title="&#125;">&amp;#125;</span>      where bookID = #<span class="token entity" title="&#123;">&amp;#123;</span>bookID<span class="token entity" title="&#125;">&amp;#125;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--根据id查询,返回一个Book--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBookById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from ssmbuild.books      where bookID = #<span class="token entity" title="&#123;">&amp;#123;</span>bookID<span class="token entity" title="&#125;">&amp;#125;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--查询全部Book--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryAllBook<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SELECT * from ssmbuild.books   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>7、编写Service层的接口和实现类</p><p>接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Books<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//BookService:底下需要去实现,调用dao层</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//增加一个Book</span>   <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Books book<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//根据id删除一个Book</span>   <span class="token keyword">int</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//更新Book</span>   <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//根据id查询,返回一个Book</span>   Books <span class="token function">queryBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//查询全部Book,返回list集合</span>   List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>实现类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>BookMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Books<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//调用dao层的操作，设置一个set接口，方便Spring管理</span>   <span class="token keyword">private</span> BookMapper bookMapper<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBookMapper</span><span class="token punctuation">(</span>BookMapper bookMapper<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>bookMapper <span class="token operator">=</span> bookMapper<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Books book<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">deleteBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">updateBook</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> Books <span class="token function">queryBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">queryBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>OK，到此，底层需求操作编写完毕！</strong></p><blockquote><p>Spring层</p></blockquote><p>1、配置<strong>Spring整合MyBatis</strong>，我们这里数据源使用c3p0连接池；</p><p>2、我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 配置整合mybatis --></span>   <span class="token comment" spellcheck="true">&lt;!-- 1.关联数据库文件 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:database.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 2.数据库连接池 --></span>   <span class="token comment" spellcheck="true">&lt;!--数据库连接池       dbcp 半自动化操作 不能自动连接       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）   --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 配置连接池属性 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment" spellcheck="true">&lt;!-- c3p0连接池的私有属性 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 关闭连接后不自动commit --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoCommitOnClose<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 获取连接超时时间 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkoutTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 当获取连接失败重试次数 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>acquireRetryAttempts<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 3.配置SqlSessionFactory对象 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 注入数据库连接池 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --></span>   <span class="token comment" spellcheck="true">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 注入sqlSessionFactory --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 给出需要扫描Dao接口包 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>3、<strong>Spring整合service层</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 扫描service相关的bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.service<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!--BookServiceImpl注入到IOC容器中--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BookServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.service.BookServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookMapper<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>   &lt;bean id="transactionManager"class="org.springframework.jdbc.datasource.DataSourceTransactionManager">       <span class="token comment" spellcheck="true">&lt;!-- 注入数据库连接池 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！</p><blockquote><p>SpringMVC层</p></blockquote><p>1、<strong>web.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>        <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--DispatcherServlet--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>           <span class="token comment" spellcheck="true">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--encodingFilter--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>          org.springframework.web.filter.CharacterEncodingFilter       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--Session过期时间--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><p>2、<strong>spring-mvc.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context.xsd   http://www.springframework.org/schema/mvc   https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 配置SpringMVC --></span>   <span class="token comment" spellcheck="true">&lt;!-- 1.开启SpringMVC注解驱动 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 2.静态资源默认servlet配置--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --></span>   &lt;beanclass="org.springframework.web.servlet.view.InternalResourceViewResolver">       &lt;property name="viewClass"value="org.springframework.web.servlet.view.JstlView" />       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 4.扫描web相关的bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.controller<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>3、<strong>Spring配置整合文件，applicationContext.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring-dao.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring-service.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring-mvc.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p><strong>配置文件，暂时结束！Controller 和 视图层编写</strong></p><p>1、BookController 类编写 ， 方法一：查询全部书籍</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Autowired</span>   <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"BookServiceImpl"</span><span class="token punctuation">)</span>   <span class="token keyword">private</span> BookService bookService<span class="token punctuation">;</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/allBook"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> String <span class="token function">list</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       List<span class="token operator">&lt;</span>Books<span class="token operator">></span> list <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token string">"allBook"</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>2、编写首页 <strong>index.jsp</strong></p><pre class=" language-jsp"><code class="language-jsp"><%@ page language="java" contentType="text/html; charset=UTF-8"pageEncoding="UTF-8" %><!DOCTYPE HTML><html><head>   <title>首页</title>   <style type="text/css">       a &#123;           text-decoration: none;           color: black;           font-size: 18px;      &#125;       h3 &#123;           width: 180px;           height: 38px;           margin: 100px auto;           text-align: center;           line-height: 38px;           background: deepskyblue;           border-radius: 4px;      &#125;   </style></head><body><h3>   <a href="$&#123;pageContext.request.contextPath&#125;/book/allBook">点击进入列表页</a></h3></body></html></code></pre><p>3、书籍列表页面 <strong>allbook.jsp</strong></p><pre class=" language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>   <title>书籍列表</title>   <meta name="viewport" content="width=device-width, initial-scale=1.0">   <!-- 引入 Bootstrap -->   <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"rel="stylesheet"></head><body><div class="container">   <div class="row clearfix">       <div class="col-md-12 column">           <div class="page-header">               <h1>                   <small>书籍列表 —— 显示所有书籍</small>               </h1>           </div>       </div>   </div>   <div class="row">       <div class="col-md-4 column">           <a class="btn btn-primary"href="$&#123;pageContext.request.contextPath&#125;/book/toAddBook">新增</a>       </div>   </div>   <div class="row clearfix">       <div class="col-md-12 column">           <table class="table table-hover table-striped">               <thead>               <tr>                   <th>书籍编号</th>                   <th>书籍名字</th>                   <th>书籍数量</th>                   <th>书籍详情</th>                   <th>操作</th>               </tr>               </thead>               <tbody>               <c:forEach var="book" items="$&#123;requestScope.get('list')&#125;">                   <tr>                       <td>$&#123;book.getBookID()&#125;</td>                       <td>$&#123;book.getBookName()&#125;</td>                       <td>$&#123;book.getBookCounts()&#125;</td>                       <td>$&#123;book.getDetail()&#125;</td>                       <td>                           <ahref="$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.getBookID()&#125;">更改</a> |                           <ahref="$&#123;pageContext.request.contextPath&#125;/book/del/$&#123;book.getBookID()&#125;">删除</a>                       </td>                   </tr>               </c:forEach>               </tbody>           </table>       </div>   </div></div></code></pre><p>4、BookController 类编写 ， 方法二：添加书籍</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toAddBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">toAddPaper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"addBook"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/addBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">addPaper</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>   bookService<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"redirect:/book/allBook"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>5、添加书籍页面：<strong>addBook.jsp</strong></p><pre class=" language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>   <title>新增书籍</title>   <meta name="viewport" content="width=device-width, initial-scale=1.0">   <!-- 引入 Bootstrap -->   <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"rel="stylesheet"></head><body><div class="container">   <div class="row clearfix">       <div class="col-md-12 column">           <div class="page-header">               <h1>                   <small>新增书籍</small>               </h1>           </div>       </div>   </div>   <form action="$&#123;pageContext.request.contextPath&#125;/book/addBook"method="post">      书籍名称：<input type="text" name="bookName"><br><br><br>      书籍数量：<input type="text" name="bookCounts"><br><br><br>      书籍详情：<input type="text" name="detail"><br><br><br>       <input type="submit" value="添加">   </form></div></code></pre><p>6、BookController 类编写 ， 方法三：修改书籍</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toUpdateBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">toUpdateBook</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   Books books <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>   model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span>books <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"updateBook"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/updateBook"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">updateBook</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span> Books book<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>   bookService<span class="token punctuation">.</span><span class="token function">updateBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>   Books books <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryBookById</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getBookID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">,</span> books<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"redirect:/book/allBook"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>7、修改书籍页面  <strong>updateBook.jsp</strong></p><pre class=" language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>   <title>修改信息</title>   <meta name="viewport" content="width=device-width, initial-scale=1.0">   <!-- 引入 Bootstrap -->   <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"rel="stylesheet"></head><body><div class="container">   <div class="row clearfix">       <div class="col-md-12 column">           <div class="page-header">               <h1>                   <small>修改信息</small>               </h1>           </div>       </div>   </div>   <form action="$&#123;pageContext.request.contextPath&#125;/book/updateBook"method="post">       <input type="hidden" name="bookID" value="$&#123;book.getBookID()&#125;"/>      书籍名称：<input type="text" name="bookName"value="$&#123;book.getBookName()&#125;"/>      书籍数量：<input type="text" name="bookCounts"value="$&#123;book.getBookCounts()&#125;"/>      书籍详情：<input type="text" name="detail" value="$&#123;book.getDetail() &#125;"/>       <input type="submit" value="提交"/>   </form></div></code></pre><p>8、BookController 类编写 ， 方法四：删除书籍</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/del/&amp;#123;bookId&amp;#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"bookId"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   bookService<span class="token punctuation">.</span><span class="token function">deleteBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token string">"redirect:/book/allBook"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>配置Tomcat，进行运行！</strong></p><p>到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！</p><h2 id="4、Ajax"><a href="#4、Ajax" class="headerlink" title="4、Ajax"></a>4、Ajax</h2><h1 id="4、遇到的问题"><a href="#4、遇到的问题" class="headerlink" title="4、遇到的问题"></a>4、遇到的问题</h1><h4 id="4-1、Page指令"><a href="#4-1、Page指令" class="headerlink" title="4.1、Page指令"></a>4.1、Page指令</h4><p>Page指令：非法出现多次出现的‘contentType‘具有不同的值（old：[text&#x2F;html； charset&#x3D;UTF-8]，new：[text&#x2F;html；charset&#x3D;UTF-8]）</p><p>错误原因：是因为拼接的jsp页面与现jsp页面Page指令不一致</p><p>修改方法：保持拼接jsp页面Page指令一致</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %></code></pre>--></result></result></resultmap>]]></content>
      
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2022/112933757.html"/>
      <url>/2022/112933757.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h3 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="#SpringSecurity"></a>#SpringSecurity</h3><h4 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h4><p>​以前对于安全框架不太熟悉，无论是Shiro还是Spring Security。现在Spring用的比较多，所以想好好学一下Spring Security。此篇博客算是在别人那里学习的基础上写的，目的是了解SpringSecurity、Oath2、JWT、SpringSecurity + Oath2、SpringSecurity + Oauth2 +JWT以及SpringSecurity + Oath2 + JWT整合SSO。</p><p>![](C:\Users\Bumble\Pictures\笔记图片\屏幕截图 2022-04-26 203840.png)</p><h4 id="2、Spring-Security"><a href="#2、Spring-Security" class="headerlink" title="2、Spring Security"></a>2、Spring Security</h4><h5 id="2-1、Spring-Security简介"><a href="#2-1、Spring-Security简介" class="headerlink" title="2.1、Spring Security简介"></a>2.1、Spring Security简介</h5><h6 id="2-1-1、安全框架"><a href="#2-1-1、安全框架" class="headerlink" title="2.1.1、安全框架"></a>2.1.1、安全框架</h6><p>安全框架就是解决系统安全的框架。如果没有安全框架，我们需要手动的处理每个资源的访问控制，这是非常麻烦的。使用了安全框架，我们可以通过配置的方式实现对资源的访问限制。</p><h6 id="2-1-2、常用安全框架"><a href="#2-1-2、常用安全框架" class="headerlink" title="2.1.2、常用安全框架"></a>2.1.2、常用安全框架</h6><p>Apache Shiro<br>一个功能强大且易于使用的Java安全框架，提供了认证、授权、加密、会话管理。<br>Spring Security<br>Spring家族的一员，是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring的IOC（控制反转）、DI（依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，为了减少企业系统安全控制编写大量重复代码的工作。</p><h6 id="2-1-3、关于Spring-Security"><a href="#2-1-3、关于Spring-Security" class="headerlink" title="2.1.3、关于Spring Security"></a>2.1.3、关于Spring Security</h6><p>Spring Security是一个高度自定义的安全框架。利用Spring IOC、DI和AOP的功能，为系统提供了声明式安全访问控制功能，减少了为系统安全而编写大量重复代码的工作。使用Spring Security的原因很多，但大部分都是发现了Java EE的Servlet规范或EJB规范中的安全功能缺乏典型的企业级应用场景，同时认识到他们在WAR或EAR级别无法移植。因此如果更换服务器环境，还有大量工作去重写配置应用程序。使用Spring Security解决了这些问题，也为你提供许多其他有用的、可定制的安全功能。应用程序的两个主要区域是认证和授权（访问控制）。这两点也是Spring Security重要的核心功能。认证是建立一个他声明的主体的过程，一个主体一般指用户，设备或者一些可以在你的应用程序中执行动作的其他系统，简单来说就是系统认为用户是否能登录。授权指确定一个主体是否允许在你的应用程序中执行一个动作的过程，简单来说就是系统判断用户是否有权限去执行某些操作。</p><h5 id="2-2、Spring-Security入门"><a href="#2-2、Spring-Security入门" class="headerlink" title="2.2、Spring Security入门"></a>2.2、Spring Security入门</h5><ol><li><p>创建工程</p><p>创建一个SpringBoot工程</p></li><li><p>添加依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0     https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.ycz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>springsecurity-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring security依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- web模块 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 测试包依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- security测试包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电影天堂爬虫各种错误分析</title>
      <link href="/2022/112941019.html"/>
      <url>/2022/112941019.html</url>
      
        <content type="html"><![CDATA[<h1 id="电影天堂爬虫各种错误分析"><a href="#电影天堂爬虫各种错误分析" class="headerlink" title="电影天堂爬虫各种错误分析"></a><strong>电影天堂爬虫各种错误分析</strong></h1><h2 id="1、request库"><a href="#1、request库" class="headerlink" title="1、request库"></a>1、request库</h2><p>默认会使用自己猜测的编码方式将抓取下来的网页进行解码，然后储存到text中，因为电影天堂的编码方式与request库猜测的编码方式不同，所以会出现乱码。</p><h2 id="2、map函数"><a href="#2、map函数" class="headerlink" title="2、map函数"></a>2、map函数</h2><p>map函数会自动将主域名添加到爬取的地址中，形成一个完整的网址</p><p>示例代码如下：</p><pre class=" language-Python"><code class="language-Python">movie_links = html.xpath("//table[@class='tbspan']//a/@href")movie_links = map(lambda url: BASE_URL + url, movie_links)</code></pre><h2 id="3、xpath去掉空格，换行符等"><a href="#3、xpath去掉空格，换行符等" class="headerlink" title="3、xpath去掉空格，换行符等"></a>3、xpath去掉空格，换行符等</h2><p>示例代码如下：</p><pre class=" language-Python"><code class="language-Python">item.xpath('normalize-space(./div[@class="tags"])')item.xpath('./div[@class="tags"]').strip()</code></pre><h2 id="4、字典"><a href="#4、字典" class="headerlink" title="4、字典"></a>4、字典</h2><p>字典中的数据不能连续访问，代码如下：</p><pre class=" language-Python"><code class="language-Python">info = {"name": "李白", "years": "唐"}print(info["name", "years"]) #连续访问会出错 print(info["name"])print(info["years"])</code></pre><h2 id="5、常见请求头信息："><a href="#5、常见请求头信息：" class="headerlink" title="5、常见请求头信息："></a>5、常见请求头信息：</h2><p>Accept： 表示客户端可以接受的数据类型；</p><p>Referer： 表示请求发起时，浏览器地址栏中的地址；</p><p>User-Agent：表示浏览器信息；</p><p>Host：表示请求时的服务器 ip 地址和端口号。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python网络爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery学习</title>
      <link href="/2022/112913.html"/>
      <url>/2022/112913.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jquery学习"><a href="#Jquery学习" class="headerlink" title="Jquery学习"></a>Jquery学习</h1><h2 id="1、什么是jQuery？"><a href="#1、什么是jQuery？" class="headerlink" title="1、什么是jQuery？"></a>1、什么是jQuery？</h2><h4 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h4><p>JavaScript是世界上最流行的脚本语言</p><h4 id="1-2、jQuery安装与获取："><a href="#1-2、jQuery安装与获取：" class="headerlink" title="1.2、jQuery安装与获取："></a>1.2、jQuery安装与获取：</h4><ol><li><p>Staticfile CDN</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre></li><li><p>百度CDN</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre></li><li><p>又拍云CDN</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://upcdn.b0.upaiyun.com/libs/jquery/jquery-2.0.2.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre></li><li><p>新浪CDN</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre></li><li><p>Google CDN  ( 不推荐使用Google CDN来获取版本，因为Google产品在中国很不稳定 )</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre></li><li><p>Microsoft CDN</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.0.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h2><h4 id="2-1、引入JavaScript"><a href="#2-1、引入JavaScript" class="headerlink" title="2.1、引入JavaScript"></a>2.1、引入JavaScript</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="2-2、基本语法入门"><a href="#2-2、基本语法入门" class="headerlink" title="2.2、基本语法入门"></a>2.2、基本语法入门</h4><p>jQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。</p><p>基础语法： <strong>$(*selector*).*action*()</strong></p><ul><li>美元符号定义 jQuery</li><li>选择符（selector）”查询”和”查找” HTML 元素</li><li>jQuery 的 action() 执行对元素的操作</li></ul><p>实例:</p><ul><li>$(this).hide() - 隐藏当前元素</li><li>$(“p”).hide() - 隐藏所有 <p>元素</p></li><li>$(“p.test”).hide() - 隐藏所有 class=”test” 的 <p>元素</p></li><li>$(“#test”).hide() - 隐藏 id=”test” 的元素</li></ul><p>jQuery 入口函数与 JavaScript 入口函数的区别：</p><ul><li>jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。</li><li>JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。</li></ul><h2 id="3、JQuery选择器"><a href="#3、JQuery选择器" class="headerlink" title="3、JQuery选择器"></a>3、JQuery选择器</h2><table><thead><tr><th>$(“*”)</th><th>选取所有元素</th></tr></thead><tbody><tr><td>$(this)</td><td>选取当前 HTML 元素</td></tr><tr><td>$(“p.intro”)</td><td>选取 class 为 intro 的 <p> 元素</p></td></tr><tr><td>$(“p:first”)</td><td>选取第一个 <p> 元素</p></td></tr><tr><td>$(“ul li:first”)</td><td>选取第一个 <ul> 元素的第一个 <li> 元素</li></ul></td></tr><tr><td>$(“ul li:first-child”)</td><td>选取每个 <ul> 元素的第一个 <li> 元素</li></ul></td></tr><tr><td>$(“[href]”)</td><td>选取带有 href 属性的元素</td></tr><tr><td>$(“a[target=’_blank’]”)</td><td>选取所有 target 属性值等于 “_blank” 的 <a> 元素</a></td></tr><tr><td>$(“a[target!=’_blank’]”)</td><td>选取所有 target 属性值不等于 “_blank” 的 <a> 元素</a></td></tr><tr><td>$(“:button”)</td><td>选取所有 type=”button” 的 <input> 元素 和 <button> 元素</button></td></tr><tr><td>$(“tr:even”)</td><td>选取偶数位置的 </td></tr><tr></tr><tr><td>$(“tr:odd”)</td><td>选取奇数位置的 </td></tr><tr></tr></tbody></table> 元素 元素<h2 id="4、jQuery事件"><a href="#4、jQuery事件" class="headerlink" title="4、jQuery事件"></a>4、jQuery事件</h2><h4 id="4-1、什么是事件"><a href="#4-1、什么是事件" class="headerlink" title="4.1、什么是事件"></a>4.1、什么是事件</h4><p>页面对不同访问者的响应叫做事件。</p><p>事件处理程序指的是当 HTML 中发生某些事件时所调用的方法。</p><p>实例：</p><ul><li>在元素上移动鼠标。</li><li>选取单选按钮</li><li>点击元素</li></ul><p>在事件中经常使用术语”触发”（或”激发”）例如： “当您按下按键时触发 keypress 事件”。</p><h4 id="4-2、常见的DOM事件"><a href="#4-2、常见的DOM事件" class="headerlink" title="4.2、常见的DOM事件"></a>4.2、常见的DOM事件</h4><table><thead><tr><th align="left">鼠标事件</th><th align="left">键盘事件</th><th align="left">表单事件</th><th align="left">文档/窗口事件</th></tr></thead><tbody><tr><td align="left">click</td><td align="left">keypress</td><td align="left">submit</td><td align="left">load</td></tr><tr><td align="left">seenter</td><td align="left">keyup</td><td align="left">focus</td><td align="left">scroll</td></tr><tr><td align="left">mouseleave</td><td align="left"></td><td align="left">blur</td><td align="left">unload</td></tr><tr><td align="left">hover</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h4 id="4-3、常见的jQuery事件方法"><a href="#4-3、常见的jQuery事件方法" class="headerlink" title="4.3、常见的jQuery事件方法"></a>4.3、常见的jQuery事件方法</h4><p><strong>$(document).ready()</strong></p><p>$(document).ready() 方法允许我们在文档完全加载完后执行函数。该事件方法在 jQuery 语法章节中已经提到过。</p><p><strong>click()</strong></p><p>click() 方法是当按钮点击事件被触发时会调用一个函数。</p><p>该函数在用户点击 HTML 元素时执行。</p><p>在下面的实例中，当点击事件在某个 </p><p> 元素上触发时，隐藏当前的 </p><p> 元素：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点我消失!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p><strong>dbclick()</strong></p><p>当双击元素时，会发生 dblclick 事件。</p><p>dblclick() 方法触发 dblclick 事件，或规定当发生 dblclick 事件时运行的函数</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dbclick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>双击我消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p><strong>mouseenter()</strong></p><p>当鼠标指针穿过元素时，会发生 mouseenter 事件。</p><p>mouseenter() 方法触发 mouseenter 事件，或规定当发生 mouseenter 事件时运行的函数：</p><p><strong>mouseleave()</strong></p><p>当鼠标指针离开元素时，会发生 mouseleave 事件。</p><p>mouseleave() 方法触发 mouseleave 事件，或规定当发生 mouseleave 事件时运行的函数：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#p1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseenter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您把键盘放在了id='p1'"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#p2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseleave</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您的鼠标离开了"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>鼠标在我上面会有弹窗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>鼠标在我上面也会有弹窗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p><strong>mousedown()</strong></p><p>当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。</p><p>mousedown() 方法触发 mousedown 事件，或规定当发生 mousedown 事件时运行的函数：</p><p><strong>mouseup()</strong></p><p>当在元素上松开鼠标按钮时，会发生 mouseup 事件。</p><p>mouseup() 方法触发 mouseup 事件，或规定当发生 mouseup 事件时运行的函数：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mousedown</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"鼠标在该段落上按下！"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#b2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseup</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"鼠标在段落上松开。"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我有弹窗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我也有弹窗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p><strong>hover()</strong></p><p>hover()方法用于模拟光标悬停事件。</p><p>当鼠标移动到元素上时，会触发指定的第一个函数(mouseenter);当鼠标移出这个元素时，会触发指定的第二个函数(mouseleave)。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#p3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span>            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你鼠标放上面了"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"拜拜，你鼠标离开了"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p><strong>focus()</strong></p><p>当元素获得焦点时，发生 focus 事件。</p><p>当通过鼠标点击选中元素或通过 tab 键定位到元素时，该元素就会获得焦点。</p><p>focus() 方法触发 focus 事件，或规定当发生 focus 事件时运行的函数：</p><p><strong>blur()</strong></p><p>当元素失去焦点时，发生 blur 事件。</p><p>blur() 方法触发 blur 事件，或规定当发生 blur 事件时运行的函数：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span> <span class="token string">"#cccccc"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span> <span class="token string">"#ffffff"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Email: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p><strong>keypress,keydown,keyup的区别:</strong></p><ul><li>1.keydown：在键盘上按下某键时发生,一直按着则会不断触发（opera浏览器除外）, 它返回的是键盘代码;</li><li>2.keypress：在键盘上按下一个按键，并产生一个字符时发生, 返回ASCII码。注意: <em>*<em>shift</em>、*alt</em>、<em>ctrl</em>**  等键按下并不会产生字符，所以监听无效 ,换句话说, 只有按下能在屏幕上输出字符的按键时keypress事件才会触发。若一直按着某按键则会不断触发。</li><li>3.keyup：用户松开某一个按键时触发, 与keydown相对, 返回键盘代码.</li></ul><p>按Enter键提交表单</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token comment" spellcheck="true">//方法一</span>    <span class="token comment" spellcheck="true">// $(document).keydown(function (event) {</span>    <span class="token comment" spellcheck="true">//     if(event.keyCode === 13){</span>    <span class="token comment" spellcheck="true">//         $("#submit").trigger("click")</span>    <span class="token comment" spellcheck="true">//     }</span>    <span class="token comment" spellcheck="true">// });</span>        <span class="token comment" spellcheck="true">//方法二</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> e <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event <span class="token operator">||</span> arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>caller<span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">===</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#submit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user-name-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    邮  箱：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h2 id="5、jQuery-显示-x2F-隐藏"><a href="#5、jQuery-显示-x2F-隐藏" class="headerlink" title="5、jQuery 显示/隐藏"></a>5、jQuery 显示/隐藏</h2><h4 id="5-1、hide-与-show"><a href="#5-1、hide-与-show" class="headerlink" title="5.1、hide() 与 show()"></a>5.1、hide() 与 show()</h4><p><strong>语法:</strong></p><p>$(<em>selector</em>).hide(<em>speed,callback</em>);</p><p>$(<em>selector</em>).show(<em>speed,callback</em>);</p><p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是隐藏或显示完成后所执行的函数名称。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".ex .hide"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token string">".ex"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">"linear"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hide()方法已完成"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#show"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".ex"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">"linear"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"show()方法已完成"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--css--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">div<span class="token class">.ex</span> </span><span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#a1bbe8</span><span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">button<span class="token attribute">[type = button]</span></span><span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#bdecbd</span><span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我折叠<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        站点名：Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        网  址：https://www.Google.com/    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>第二个参数是一个字符串，表示过渡使用哪种缓动函数。（译者注：jQuery自身提供”linear” 和 “swing”，其他可以使用相关的插件）。</p><p><strong>自定义动画：linearswing</strong></p><ol><li>linear：每一步的距离和前一步都是相同的，也就是等速</li><li>swing：速度会加快然后最后一点距离再减速</li></ol><h4 id="5-2、toggle"><a href="#5-2、toggle" class="headerlink" title="5.2、toggle()"></a>5.2、toggle()</h4><p><strong>语法:</strong></p><p>$(<em>selector</em>).toggle(<em>speed,callback</em>);</p><p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是隐藏或显示完成后所执行的函数名称。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".but"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".parg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">,</span> <span class="token string">"linear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>but<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>银魂<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    江户时代末期，被称为“天人”的异星人来袭。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    地球人与天人之间的战争瞬即爆发，为数众多的武士和攘夷派志士都参与与天人的战斗。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    幕府见识到天人强大的实力后，擅自与天人签订不平等条约，准许他们入国。其后更颁布了“废刀令”，夺走了武士的刀。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    自此，天人横行霸道，幕府成为了“傀儡政权”。在这样的时代，有一个武士与同伴愉快地过着异想天开的生活。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p><strong>对于可选的 callback 参数，有以下说明：</strong></p><ol><li>$(<em>selector</em>)选中的元素的个数为n个，则callback函数会执行n次；当 callback 函数加上括号时，函数      立即执行，只会调用一次， 如果不加括号，元素显示或隐藏后调用函数，才会调用多次。</li><li>callback函数名后加括号，会立刻执行函数体，而不是等到显示/隐藏完成后才执行；</li><li>callback既可以是函数名，也可以是匿名函数；</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".but"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".parg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">"fast"</span><span class="token punctuation">,</span> <span class="token string">"linear"</span><span class="token punctuation">,</span> popalter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">popalter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"toggle()方法已完成"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>but<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>银魂<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxxxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h2 id="6、jQuery-淡入-x2F-淡出"><a href="#6、jQuery-淡入-x2F-淡出" class="headerlink" title="6、jQuery 淡入/淡出"></a>6、jQuery 淡入/淡出</h2><h4 id="6-1、jQuery-Fading-方法"><a href="#6-1、jQuery-Fading-方法" class="headerlink" title="6.1、jQuery Fading 方法"></a>6.1、jQuery Fading 方法</h4><p>通过 jQuery，您可以实现元素的淡入淡出效果。</p><p>jQuery 拥有下面四种 fade 方法：</p><ul><li>fadeIn()</li><li>fadeOut()</li><li>fadeToggle()</li><li>fadeTo()</li></ul><h4 id="6-2、jQuery-fadeIn-方法"><a href="#6-2、jQuery-fadeIn-方法" class="headerlink" title="6.2、jQuery fadeIn() 方法"></a>6.2、jQuery fadeIn() 方法</h4><p>jQuery fadeIn() 用于淡入已隐藏的元素。</p><p><strong>语法:</strong></p><p>$(<em>selector</em>).fadeIn(<em>speed,callback</em>);</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。.</p><p>可选的 callback 参数是 fading 完成后所执行的函数名称。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#slow-in"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">,</span> <span class="token string">"swing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击进入淡入效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slow-in<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="6-3、jQuery-fadeOut-方法用于淡出可见元素。"><a href="#6-3、jQuery-fadeOut-方法用于淡出可见元素。" class="headerlink" title="6.3、jQuery fadeOut() 方法用于淡出可见元素。"></a>6.3、jQuery fadeOut() 方法用于淡出可见元素。</h4><p><strong>语法:</strong></p><p>$(<em>selector</em>).fadeOut(<em>speed,callback</em>);</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是 fading 完成后所执行的函数名称。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#slow-out"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">,</span> <span class="token string">"swing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击进入淡出效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slow-out<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="6-4、jQuery-fadeToggle-方法"><a href="#6-4、jQuery-fadeToggle-方法" class="headerlink" title="6.4、jQuery fadeToggle() 方法"></a>6.4、jQuery fadeToggle() 方法</h4><p>jQuery fadeToggle() 方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换。</p><p>如果元素已淡出，则 fadeToggle() 会向元素添加淡入效果。</p><p>如果元素已淡入，则 fadeToggle() 会向元素添加淡出效果。</p><p><strong>语法:</strong></p><p>$(<em>selector</em>).fadeToggle(<em>speed,callback</em>);</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是 fading 完成后所执行的函数名称。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#slow-toggle"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">,</span> <span class="token string">"swing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>淡入/淡出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slow-toggle<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="6-5、jQuery-fadeTo-方法"><a href="#6-5、jQuery-fadeTo-方法" class="headerlink" title="6.5、jQuery fadeTo() 方法"></a>6.5、jQuery fadeTo() 方法</h4><p>jQuery fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）。</p><p><strong>语法:</strong></p><p>$(<em>selector</em>).fadeTo(<em>speed,opacity,callback</em>);</p><p>必需的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>fadeTo() 方法中必需的 opacity 参数将淡入淡出效果设置为给定的不透明度（值介于 0 与 1 之间）。</p><p>可选的 callback 参数是该函数完成后所执行的函数名称。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#slow-to"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token string">"swing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击进入淡入效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slow-to<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">80</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="7、jQuery滑动"><a href="#7、jQuery滑动" class="headerlink" title="7、jQuery滑动"></a>7、jQuery滑动</h2><h4 id="7-1、jQuery-滑动方法"><a href="#7-1、jQuery-滑动方法" class="headerlink" title="7.1、jQuery 滑动方法"></a>7.1、jQuery 滑动方法</h4><p>通过 jQuery，您可以在元素上创建滑动效果。</p><p>jQuery 拥有以下滑动方法：</p><ul><li>slideDown()</li><li>slideUp()</li><li>slideToggle()</li></ul><h4 id="7-2、slideDown-方法"><a href="#7-2、slideDown-方法" class="headerlink" title="7.2、slideDown()方法"></a>7.2、slideDown()方法</h4><p>jQuery slideDown() 方法用于向下滑动元素。</p><p><strong>语法:</strong></p><p>$(<em>selector</em>).slideDown(<em>speed,callback</em>);</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是滑动完成后所执行的函数名称。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#flip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--css--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token id">#panel</span>,<span class="token id">#flip</span>    </span><span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#e5eecc</span><span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px <span class="token hexcode">#c3c3c3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token id">#panel</span>    </span><span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我滑下面板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="7-2、slideUp-方法"><a href="#7-2、slideUp-方法" class="headerlink" title="7.2、slideUp()方法"></a>7.2、slideUp()方法</h4><p>jQuery slideUp() 方法用于向上滑动元素。</p><p><strong>语法:</strong></p><p>$(<em>selector</em>).slideUp(<em>speed,callback</em>);</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是滑动完成后所执行的函数名称。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#flip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--css--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token id">#panel</span>,<span class="token id">#flip</span>    </span><span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#e5eecc</span><span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px <span class="token hexcode">#c3c3c3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token id">#panel</span>    </span><span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我收起面板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="7-3、slideToggle-方法"><a href="#7-3、slideToggle-方法" class="headerlink" title="7.3、slideToggle()方法"></a>7.3、slideToggle()方法</h4><p>jQuery slideToggle() 方法可以在 slideDown() 与 slideUp() 方法之间进行切换。</p><p>如果元素向下滑动，则 slideToggle() 可向上滑动它们。</p><p>如果元素向上滑动，则 slideToggle() 可向下滑动它们。</p><p>$(<em>selector</em>).slideToggle(<em>speed,callback</em>);</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是滑动完成后所执行的函数名称。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#flip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token id">#panel</span>,<span class="token id">#flip</span>    </span><span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#e5eecc</span><span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px <span class="token hexcode">#c3c3c3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token id">#panel</span>    </span><span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示/隐藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="8、jQuery自定义动画【重点】"><a href="#8、jQuery自定义动画【重点】" class="headerlink" title="8、jQuery自定义动画【重点】"></a>8、jQuery自定义动画【重点】</h2><h4 id="8-1、animate-方法"><a href="#8-1、animate-方法" class="headerlink" title="8.1、animate() 方法"></a>8.1、animate() 方法</h4><p>jQuery animate() 方法用于创建自定义动画。</p><p><strong>语法：</strong></p><p>$(<em>selector</em>).animate({<em>params</em>}<em>,speed,callback</em>);</p><p>必需的 params 参数定义形成动画的 CSS 属性。</p><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是动画完成后所执行的函数名称。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span><span class="token string">'250px'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>开始动画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#98bf21</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="8-2、jQuery-animate-操作多个属性"><a href="#8-2、jQuery-animate-操作多个属性" class="headerlink" title="8.2、jQuery animate() - 操作多个属性"></a>8.2、jQuery animate() - 操作多个属性</h4><p>请注意，生成动画的过程中可同时使用多个属性：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      left<span class="token punctuation">:</span><span class="token string">'250px'</span><span class="token punctuation">,</span>      opacity<span class="token punctuation">:</span><span class="token string">'0.5'</span><span class="token punctuation">,</span>      height<span class="token punctuation">:</span><span class="token string">'150px'</span><span class="token punctuation">,</span>      width<span class="token punctuation">:</span><span class="token string">'150px'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>开始动画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#98bf21</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><strong>可以用 animate() 方法来操作所有 CSS 属性吗？</strong></p><p>是的，几乎可以！不过，需要记住一件重要的事情：当使用 animate() 时，必须使用 Camel 标记法书写所有的属性名，</p><p>比如，必须使用 paddingLeft 而不是 padding-left，使用 marginRight 而不是 margin-right，等等。</p><p>同时，色彩动画并不包含在核心 jQuery 库中。如果需要生成颜色动画，您需要从 <strong><a href="http://jquery.com/download/">jquery.com</a></strong> 下载 <strong><a href="http://plugins.jquery.com/color/">颜色动画</a></strong> 插件。</p><h4 id="8-3、jQuery-animate-使用相对值"><a href="#8-3、jQuery-animate-使用相对值" class="headerlink" title="8.3、jQuery animate() - 使用相对值"></a>8.3、jQuery animate() - 使用相对值</h4><p>也可以定义相对值（该值相对于元素的当前值）。需要在值的前面加上 += 或 -=：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      left<span class="token punctuation">:</span><span class="token string">'250px'</span><span class="token punctuation">,</span>      height<span class="token punctuation">:</span><span class="token string">'+=150px'</span><span class="token punctuation">,</span>      width<span class="token punctuation">:</span><span class="token string">'+=150px'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> </code></pre><h4 id="8-4、jQuery-animate-使用预定义的值"><a href="#8-4、jQuery-animate-使用预定义的值" class="headerlink" title="8.4、jQuery animate() - 使用预定义的值"></a>8.4、jQuery animate() - 使用预定义的值</h4><p>您甚至可以把属性的动画值设置为 “show”、”hide” 或 “toggle”：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      height<span class="token punctuation">:</span><span class="token string">'toggle'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> </code></pre><h4 id="8-5、jQuery-animate-使用队列功能"><a href="#8-5、jQuery-animate-使用队列功能" class="headerlink" title="8.5、jQuery animate() - 使用队列功能"></a>8.5、jQuery animate() - 使用队列功能</h4><p>默认地，jQuery 提供针对动画的队列功能。</p><p>这意味着如果您在彼此之后编写多个 animate() 调用，jQuery 会创建包含这些方法调用的”内部”队列。然后逐一运行这些 animate 调用。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> div<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>height<span class="token punctuation">:</span><span class="token string">'300px'</span><span class="token punctuation">,</span>opacity<span class="token punctuation">:</span><span class="token string">'0.4'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token string">'300px'</span><span class="token punctuation">,</span>opacity<span class="token punctuation">:</span><span class="token string">'0.8'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>height<span class="token punctuation">:</span><span class="token string">'100px'</span><span class="token punctuation">,</span>opacity<span class="token punctuation">:</span><span class="token string">'0.4'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token string">'100px'</span><span class="token punctuation">,</span>opacity<span class="token punctuation">:</span><span class="token string">'0.8'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"slow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> </code></pre><p>下面的例子把 </p><div> 元素往右边移动了 100 像素，然后增加文本的字号：<p></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            div<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span><span class="token string">"250px"</span><span class="token punctuation">,</span>height<span class="token punctuation">:</span><span class="token string">"150px"</span><span class="token punctuation">,</span>width<span class="token punctuation">:</span><span class="token string">"200px"</span><span class="token punctuation">,</span>fontSize<span class="token punctuation">:</span><span class="token string">"2em"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"slow"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="8-6、停止动画-jQuery-stop-方法"><a href="#8-6、停止动画-jQuery-stop-方法" class="headerlink" title="8.6、停止动画  jQuery stop() 方法"></a>8.6、停止动画  jQuery stop() 方法</h4><p>jQuery stop() 方法用于停止动画或效果，在它们完成之前。</p><p>stop() 方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画。</p><p><strong>语法:</strong></p><p>$(<em>selector</em>).stop(<em>stopAll,goToEnd</em>);</p><p>可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即仅停止活动的动画，允许任何排入队列的动画向后执行。</p><p>可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。</p><p>因此，默认地，stop() 会清除在被选元素上指定的当前动画。</p><p>下面的例子演示 stop() 方法，不带参数：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#flip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#stop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--css--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token id">#panel</span>,<span class="token id">#flip</span>    </span><span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#e5eecc</span><span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px <span class="token hexcode">#c3c3c3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token id">#panel</span>    </span><span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>停止滑动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我向下滑动面板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>下面的例子演示 stop() 方法，带参数：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span><span class="token string">'100px'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>fontSize<span class="token punctuation">:</span><span class="token string">'3em'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#stop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#stop2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#stop3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>开始<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>停止<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stop2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>停止所有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stop3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>停止动画，但完成动作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点击 "开始" 按钮开始动画。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点击 "停止" 按钮停止当前激活的动画，但之后我们能再动画队列中再次激活。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点击 "停止所有" 按钮停止当前动画，并清除动画队列，所以元素的所有动画都会停止。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点击 "停止动画，但完成动作" 快速完成动作，并停止它。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> </code></pre><p>动画队列停止动画测试，只停止当前正在进行的动画，停止当前动画后，队列中的下一个动画开始进行：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#flip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#stop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token id">#panel</span>,<span class="token id">#flip</span></span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#e5eecc</span><span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px <span class="token hexcode">#c3c3c3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#panel</span></span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>停止滑动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我向下滑动面板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="9、jQuery-Callback-方法"><a href="#9、jQuery-Callback-方法" class="headerlink" title="9、jQuery Callback 方法"></a>9、jQuery Callback 方法</h2><p>Callback 函数在当前动画 100% 完成之后执行。</p><h4 id="9-1、jQuery-动画的问题"><a href="#9-1、jQuery-动画的问题" class="headerlink" title="9.1、jQuery 动画的问题"></a>9.1、jQuery 动画的问题</h4><p>许多 jQuery 函数涉及动画。这些函数也许会将 <em>speed</em> 或 <em>duration</em> 作为可选参数。</p><p>例子：*$(“p”).hide(“slow”)*</p><p><em>speed</em> 或 <em>duration</em> 参数可以设置许多不同的值，比如 “slow”, “fast”, “normal” 或毫秒。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"段落现在被隐藏了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>隐藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我们段落内容，点击“隐藏”按钮我就会消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>以下实例没有回调函数，警告框会在隐藏效果完成前弹出：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"现在段落被隐藏了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>隐藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落，内容很少<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h2 id="10、jQuery链"><a href="#10、jQuery链" class="headerlink" title="10、jQuery链"></a>10、jQuery链</h2><p>通过 jQuery，可以把动作/方法链接在一起。</p><p>Chaining 允许我们在一条语句中运行多个 jQuery 方法（在相同的元素上）。</p><h4 id="10-1、jQuery-方法链接"><a href="#10-1、jQuery-方法链接" class="headerlink" title="10.1、jQuery 方法链接"></a>10.1、jQuery 方法链接</h4><p>直到现在，我们都是一次写一条 jQuery 语句（一条接着另一条）。</p><p>不过，有一种名为链接（chaining）的技术，允许我们在相同的元素上运行多条 jQuery 命令，一条接着另一条。</p><p><strong>提示：</strong> 这样的话，浏览器就不必多次查找相同的元素。</p><p>如需链接一个动作，您只需简单地把该动作追加到之前的动作上。</p><p>下面的例子把 css()、slideUp() 和 slideDown() 链接在一起。”p1” 元素首先会变为红色，然后向上滑动，再然后向下滑动：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#p1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>菜鸟教程!!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>如果需要，我们也可以添加多个方法调用。</p><p><strong>提示：</strong>当进行链接时，代码行会变得很长。不过，jQuery 语法不是很严格；您可以按照希望的格式来写，包含换行和缩进。</p><p>如下书写也可以很好地运行：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#p1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="11、jQuery-HTML"><a href="#11、jQuery-HTML" class="headerlink" title="11、jQuery HTML"></a>11、jQuery HTML</h2><h3 id="11-1、jQuery捕获"><a href="#11-1、jQuery捕获" class="headerlink" title="11.1、jQuery捕获"></a>11.1、jQuery捕获</h3><p>jQuery 捕获是指 jQuery 拥有可操作HTML元素和属性的强大方法</p><p><strong>jQuery DOM操作</strong></p><ul><li>Query 中非常重要的部分，就是操作 DOM 的能力。</li><li>jQuery 提供一系列与 DOM 相关的方法，这使访问和操作元素和属性变得很容易。</li><li>DOM = Document Object Model（文档对象模型）</li><li>DOM 定义访问 HTML 和 XML 文档的标准：”W3C 文档对象模型独立于平台和语言的界面，允许程序和脚本动态访问和更新文档的内容、结构以及样式。”</li></ul><p><strong>获得内容 - text()、html() 以及 val()</strong></p><p>三个简单实用的用于 DOM 操作的 jQuery 方法：</p><ul><li><p>text() - 设置或返回所选元素的文本内容</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Text: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>html() - 设置或返回所选元素的内容（包括 HTML 标记）</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Text: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>val() - 设置或返回表单字段的值</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Text: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><p><strong>获取属性 - attr()</strong></p><p>jQuery attr() 方法用于获取属性值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Val: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#href"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>attr</strong> 和 <strong>prop</strong> 的区别介绍：</p><ul><li>对于 HTML 元素本身就带有的固有属性，在处理时，使用 <strong>prop</strong> 方法。</li><li>对于 HTML 元素我们自己自定义的 DOM 属性，在处理时，使用 <strong>attr</strong> 方法。</li></ul><p>实例 1：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.runoob.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>菜鸟教程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>这个例子里 <strong><a></a></strong><a> 元素的 DOM 属性有: <strong>href、target</strong> 和 <strong>class</strong>，这些属性就是 <strong></strong></a><strong><a></a></strong><a> 元素本身就带有的属性，也是 W3C 标准里就包含有这几个属性，或者说在 IDE 里能够智能提示出的属性，这些就叫做固有属性。处理这些属性时，建议使用 <strong>prop</strong> 方法。</a></p><a><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link1<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nofollow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></a><p><a>这个例子里 <strong></strong></a><strong><a></a></strong><a> 元素的 DOM 属性有: <strong>href、id</strong> 和 <strong>action</strong>，很明显，前两个是固有属性，而后面一个 <strong>action</strong> 属性是我们自己自定义上去的，**</a><a>** 元素本身是没有这个属性的。这种就是自定义的 DOM 属性。处理这些属性时，建议使用 <strong>attr</strong> 方法。</a></p><a><!--===========================================================================--><p><strong>prop()函数的结果:</strong></p><p>   1.如果有相应的属性，返回指定属性值。</p><p>   2.如果没有相应的属性，返回值是空字符串。</p><p><strong>attr()函数的结果:</strong></p><p>   1.如果有相应的属性，返回指定属性值。</p><p>   2.如果没有相应的属性，返回值是 undefined。</p><p>对于HTML元素本身就带有的固有属性，在处理时，使用prop方法。</p><p>对于HTML元素我们自己自定义的DOM属性，在处理时，使用 attr 方法。</p><p>具有 true 和 false 两个属性的属性，如 checked, selected 或者 disabled 使用prop()</p></a><h3 id="11-2、jQuery设置内容和属性"><a></a><a href="#11-2、jQuery设置内容和属性" class="headerlink" title="11.2、jQuery设置内容和属性"></a>11.2、jQuery设置内容和属性</h3><p><strong>设置内容 - text()、html() 以及 val()</strong></p><p>我们将使用前一章中的三个相同的方法来设置内容：</p><ul><li>text() - 设置或返回所选元素的文本内容</li><li>html() - 设置或返回所选元素的内容（包括 HTML 标记）</li><li>val() - 设置或返回表单字段的值</li></ul><p><strong>text()、html() 以及 val() 的回调函数</strong></p><p>上面的三个 jQuery 方法：text()、html() 以及 val()，同样拥有回调函数。</p><p>回调函数有两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。然后以函数新值返回您希望使用的字符串。</p><p><strong>设置属性 - attr()</strong></p><p>jQuery attr() 方法也用于设置/改变属性值。</p><p>下面的例子演示如何改变（设置）链接中 href 属性的值：</p><p>$(“button”).click(function(){  $(“#runoob”).attr(“href”,”<a href="http://www.runoob.com/jquery&quot;">http://www.runoob.com/jquery"</a>); })</p><p>attr() 方法也允许您同时设置多个属性。</p><p>下面的例子演示如何同时设置 href 和 title 属性：</p><p>$(“button”).click(function(){    $(“#runoob”).attr({        “href” : “<a href="http://www.runoob.com/jquery&quot;">http://www.runoob.com/jquery"</a>,        “title” : “jQuery 教程”    }); });</p><hr><p><strong>attr() 的回调函数</strong></p><p>jQuery 方法 attr()，也提供回调函数。回调函数有两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。然后以函数新值返回您希望使用的字符串。</p><p>下面的例子演示带有回调函数的 attr() 方法：</p><p>$(“button”).click(function(){  $(“#runoob”).attr(“href”, function(i,origValue){    return origValue + “/jquery”;   }); });</p><h3 id="11-3、jQuery添加元素"><a href="#11-3、jQuery添加元素" class="headerlink" title="11.3、jQuery添加元素"></a>11.3、jQuery添加元素</h3><p><strong>添加新的 HTML 内容</strong></p><p>我们将学习用于添加新内容的四个 jQuery 方法：</p><ul><li>append() - 在被选元素的结尾插入内容</li><li>prepend() - 在被选元素的开头插入内容</li><li>after() - 在被选元素之后插入内容</li><li>before() - 在被选元素之前插入内容</li></ul><p>**append()方法 **  </p><p> (jQuery append() 方法在被选元素的结尾插入内容（仍然在该元素的内部）。)</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#paragraph"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/br>我是添加后的段落"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ol"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;li>WORLD&lt;/li>"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>paragraph<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ol<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>HELLO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我增加段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我增加列表项目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p><strong>prepend()方法</strong></p><p>jQuery prepend() 方法在被选元素的开头插入内容。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#paragraph"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string">"&lt;/br>我是添加后的段落"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ol"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string">"&lt;li>WORLD&lt;/li>"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>paragraph<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ol<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>HELLO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我增加段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我增加列表项目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p><strong>通过 append() 和 prepend() 方法添加若干新元素</strong></p><p>在上面的例子中，我们只在被选元素的开头/结尾插入文本/HTML。</p><p>不过，append() 和 prepend() 方法能够通过参数接收无限数量的新元素。可以通过 jQuery 来生成文本/HTML（就像上面的例子那样），或者通过 JavaScript 代码和 DOM 元素。</p><p>在下面的例子中，我们创建若干个新元素。这些元素可以通过 text/HTML、jQuery 或者 JavaScript/DOM 来创建。然后我们通过 append() 方法把这些新元素追加到文本中（对 prepend() 同样有效）：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">appendText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> text1 <span class="token operator">=</span> <span class="token string">"&lt;p>文本一&lt;/p>"</span> <span class="token comment" spellcheck="true">//使用 html 标签</span>                <span class="token keyword">var</span> text2 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;p>&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"文本二"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//使用 jQuery 创建文本</span>                <span class="token keyword">var</span> text3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//使用 DOM 创建文本</span>        text3<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"文本三"</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>text1<span class="token punctuation">,</span>text2<span class="token punctuation">,</span>text3<span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>本段落显示追加文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>appendText()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p><strong>jQuery after() 和 before() 方法</strong></p><p>jQuery after() 方法在被选元素之后插入内容。</p><p>jQuery before() 方法在被选元素之前插入内容。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#bt1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">"&lt;b>之前&lt;/b>"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#bt2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">"&lt;b>之后&lt;/b>"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/lesson-02/imgs/01.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1920<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1080<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>倪克斯神谕<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前面增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bt2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>后面增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p><strong>通过 after() 和 before() 方法添加若干新元素</strong></p><p>after() 和 before() 方法能够通过参数接收无限数量的新元素。可以通过 text/HTML、jQuery 或者 JavaScript/DOM 来创建新元素。</p><p>在下面的例子中，我们创建若干新元素。这些元素可以通过 text/HTML、jQuery 或者 JavaScript/DOM 来创建。然后我们通过 after() 方法把这些新元素插到文本中（对 before() 同样有效）：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">appendImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> img1 <span class="token operator">=</span> <span class="token string">"&lt;li>文本一&lt;/li>"</span>        <span class="token keyword">var</span> img2 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;li>&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"文本二"</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> img3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span>        img3<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"文本三"</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ol"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>img1<span class="token punctuation">,</span>img2<span class="token punctuation">,</span>img3<span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgs/01.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>350<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>倪克斯神谕<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>此处显示添加的文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>appendImg()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p><strong>总结：</strong></p><p>append/prepend 是在选择元素内部嵌入。</p><p>after/before 是在元素外面追加。</p><h3 id="11-4、jQuery删除元素"><a href="#11-4、jQuery删除元素" class="headerlink" title="11.4、jQuery删除元素"></a>11.4、jQuery删除元素</h3><p><strong>删除元素/内容</strong></p><p>如需删除元素和内容，一般可使用以下两个 jQuery 方法：</p><ul><li>remove() - 删除被选元素（及其子元素）</li><li>empty() - 从被选元素中删除子元素</li></ul><p><strong>jQuery remove() 方法</strong></p><p>jQuery remove() 方法删除被选元素及其子元素。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">disappear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.dis</span></span><span class="token punctuation">{</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px red<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#98bf21</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">p</span><span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> large<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">button<span class="token attribute">[type = button]</span></span><span class="token punctuation">{</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dis<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点击按钮我会消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disappear()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p><strong>jQuery empty() 方法</strong></p><p>jQuery empty() 方法删除被选元素的子元素。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">disappear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.dis</span></span><span class="token punctuation">{</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px red<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#98bf21</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">p</span><span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> large<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">button<span class="token attribute">[type = button]</span></span><span class="token punctuation">{</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dis<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点击按钮我会消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disappear()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p><strong>过滤被删除的元素</strong></p><p>jQuery remove() 方法也可接受一个参数，允许您对被删元素进行过滤。</p><p>该参数可以是任何 jQuery 选择器的语法。</p><p>下面的例子删除 class=”italic” 的所有 </p><p> 元素：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">disappear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">".dis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.dis</span></span><span class="token punctuation">{</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px red<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#98bf21</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">p</span><span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> large<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">button<span class="token attribute">[type = button]</span></span><span class="token punctuation">{</span>        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dis<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点击按钮我会消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点击按钮我不会消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disappear()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p><strong>小总结：</strong></p><p>假如你扔掉了一瓶水，那就是 <strong>remove</strong>。</p><p>假如你倒掉了一瓶水，那就是 <strong>empty</strong>。</p><h3 id="11-5、jQuery-css类"><a href="#11-5、jQuery-css类" class="headerlink" title="11.5、jQuery css类"></a>11.5、jQuery css类</h3><p><strong>jQuery 操作 CSS</strong></p><p>jQuery 拥有若干进行 CSS 操作的方法。我们将学习下面这些：</p><ul><li>addClass() - 向被选元素添加一个或多个类</li><li>removeClass() - 从被选元素删除一个或多个类</li><li>toggleClass() - 对被选元素进行添加/删除类的切换操作</li><li>css() - 设置或返回样式属性</li></ul><p><strong>jQuery addClass() 方法</strong></p><p>下面的例子展示如何向不同的元素添加 class 属性。当然，在添加类时，您也可以选取多个元素：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h1,h2,h3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"important"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.important</span>    </span><span class="token punctuation">{</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span>xx-large<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.blue</span>    </span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标题 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>标题 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是另外一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是一些重要的文本!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>为元素添加 class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p><strong>jQuery removeClass() 方法</strong></p><p>下面的例子演示如何在不同的元素中删除指定的 class 属性：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h1,h2,h3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"important"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.important</span>    </span><span class="token punctuation">{</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span>xx-large<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.blue</span>    </span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标题 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>标题 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是另外一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>important<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一些重要的文本!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>为元素添加 class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p><strong>jQuery toggleClass() 方法</strong></p><p>下面的例子将展示如何使用 jQuery toggleClass() 方法。该方法对被选元素进行添加/删除类的切换操作：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h1,h2,h3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"important"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.important</span>    </span><span class="token punctuation">{</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span>xx-large<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.blue</span>    </span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标题 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>标题 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是另外一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是一些重要的文本!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>为元素添加 class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h3 id="11-6、jQuery-css-方法"><a href="#11-6、jQuery-css-方法" class="headerlink" title="11.6、jQuery css()方法"></a>11.6、jQuery css()方法</h3><p><strong>返回 CSS 属性</strong></p><p>如需返回指定的 CSS 属性的值，请使用如下语法：</p><p>css(“<em>propertyname</em>“);</p><p>下面的例子将返回首个匹配元素的 background-color 值：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>back<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> blue</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我获取颜色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p><strong>设置 CSS 属性</strong></p><p>如需设置指定的 CSS 属性，请使用如下语法：</p><p>css(“<em>propertyname</em>“,”<em>value</em>“);</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"background-color"</span><span class="token punctuation">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>back<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> blue</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我获取颜色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h3 id="11-7、jQuery尺寸"><a href="#11-7、jQuery尺寸" class="headerlink" title="11.7、jQuery尺寸"></a>11.7、jQuery尺寸</h3><p><strong>jQuery 尺寸方法</strong></p><p>jQuery 提供多个处理尺寸的重要方法：</p><ul><li>width()</li><li>height()</li><li>innerWidth()</li><li>innerHeight()</li><li>outerWidth()</li><li>outerHeight()</li></ul><p><strong>jQuery 尺寸</strong></p><p><img src="https://www.runoob.com/images/img_jquerydim.gif" alt="jQuery Dimensions"></p><p><strong>jQuery width() 和 height() 方法</strong></p><p>width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）。</p><p>height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）。</p><p>下面的例子返回指定的 </p><div> 元素的宽度和高度：<p></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> txt<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    txt<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"div 的宽度是: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>    txt<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"div 的高度是: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">3</span>px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid blue<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>显示 div 元素的尺寸<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>width() - 返回元素的宽度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>height() - 返回元素的高度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><hr><p><strong>jQuery innerWidth() 和 innerHeight() 方法</strong></p><p>innerWidth() 方法返回元素的宽度（包括内边距）。</p><p>innerHeight() 方法返回元素的高度（包括内边距）。</p><p>下面的例子返回指定的 </p><div> 元素的 inner-width/height：<p></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> txt<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    txt<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"div 宽度: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>    txt<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"div 高度: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>    txt<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"div 宽度，包含内边距: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">innerWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>    txt<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"div 高度，包含内边距: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">innerHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">3</span>px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid blue<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>显示 div 元素的尺寸<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>innerWidth() - 返回元素的宽度 (包含内边距)。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>innerHeight() - 返回元素的高度 (包含内边距)。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><hr><p><strong>jQuery outerWidth() 和 outerHeight() 方法</strong></p><p>outerWidth() 方法返回元素的宽度（包括内边距和边框）。</p><p>outerHeight() 方法返回元素的高度（包括内边距和边框）。</p><p>下面的例子返回指定的 </p><div> 元素的 outer-width/height：<p></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> txt<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    txt<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"div 宽度: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>    txt<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"div 高度: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>    txt<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"div 宽度，包含内边距和边框: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outerWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>    txt<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"div 高度，包含内边距和边框: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outerHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">3</span>px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid blue<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>显示 div 元素的尺寸<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>outerWidth() - 返回元素的宽度 (包含内边距和边框)。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>outerHeight() - 返回元素的高度 (包含内边距和边框)。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>唯一需要注意的地方，设置了 box-sizing 后，width() 获取的是 css 设置的 width 减去 padding 和 border 的值。</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.test</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span>border-box<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>width() 获取为: 60</li><li>innerWidth() 获取值为: 80</li><li>outWidth() 获取值为: 100</li></ul><h2 id="12、jQuery遍历"><a href="#12、jQuery遍历" class="headerlink" title="12、jQuery遍历"></a>12、jQuery遍历</h2><h3 id="12-1、什么是遍历？"><a href="#12-1、什么是遍历？" class="headerlink" title="12.1、什么是遍历？"></a>12.1、什么是遍历？</h3><p>jQuery 遍历，意为”移动”，用于根据其相对于其他元素的关系来”查找”（或选取）HTML 元素。以某项选择开始，并沿着这个选择移动，直到抵达您期望的元素为止。</p><p>下图展示了一个家族树。通过 jQuery 遍历，您能够从被选（当前的）元素开始，轻松地在家族树中向上移动（祖先），向下移动（子孙），水平移动（同胞）。这种移动被称为对 DOM 进行遍历。</p><p><img src="https://www.runoob.com/images/img_travtree.png" alt="jQuery Dimensions"></p><p>图示解析：</p><ul><li><div> 元素是 <ul> 的父元素，同时是其中所有内容的祖先。<li><ul> 元素是 <li> 元素的父元素，同时是 <div> 的子元素</div></li><li>左边的 </li><li> 元素是 <span> 的父元素，<ul> 的子元素，同时是 <div> 的后代。<li><span> 元素是 </span></li><li> 的子元素，同时是 <ul> 和 <div> 的后代。<li>两个 </li><li> 元素是同胞（拥有相同的父元素）。</li><li>右边的 </li><li> 元素是 <b> 的父元素，<ul> 的子元素，同时是 <div> 的后代。<li><b> 元素是右边的 </b></li><li><b> 的子元素，同时是 <ul> 和 <div> 的后代。</div></ul><p><strong>遍历 DOM</strong></p><p>jQuery 提供了多种遍历 DOM 的方法。</p><p>遍历方法中最大的种类是树遍历（tree-traversal）。</p><p>下一章会讲解如何在 DOM 树中向上、下以及同级移动。</p><h3 id="12-2、jQuery-遍历-祖先"><a href="#12-2、jQuery-遍历-祖先" class="headerlink" title="12.2、jQuery 遍历 - 祖先"></a>12.2、jQuery 遍历 - 祖先</h3><hr><p>祖先是父、祖父或曾祖父等等。</p><p>通过 jQuery，您能够向上遍历 DOM 树，以查找元素的祖先。</p><hr><p><strong>向上遍历 DOM 树</strong></p><p>这些 jQuery 方法很有用，它们用于向上遍历 DOM 树：</p><ul><li>parent()</li><li>parents()</li><li>parentsUntil()</li></ul><hr><p><strong>jQuery parent() 方法</strong></p><p>parent() 方法返回被选元素的直接父元素。</p><p>该方法只会向上一级对 DOM 树进行遍历。</p><p>下面的例子返回每个 <span> 元素的直接父元素：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"border"</span><span class="token punctuation">:</span><span class="token string">"2px solid red"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ancestors<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">500</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div (曾祖父元素)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>ul (祖父元素)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>li (父元素)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">500</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div (祖父元素)       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>p (父元素)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><hr><p><strong>jQuery parents() 方法</strong></p><p>parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 ()。</p><p>下面的例子返回所有 <span> 元素的所有祖先：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"border"</span><span class="token punctuation">:</span><span class="token string">"2px solid red"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ancestors<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>body (曾曾祖父元素)  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">500</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div (曾祖父元素)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>ul (祖父元素)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>li (父元素)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>您也可以使用可选参数来过滤对祖先元素的搜索。</p><p>下面的例子返回所有 <span> 元素的所有祖先，并且它是 </span></p><ul> 元素：<p></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"border"</span><span class="token punctuation">:</span><span class="token string">"2px solid red"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ancestors<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>body (great-great-grandparent)  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">500</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div (great-grandparent)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>ul (grandparent)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>li (direct parent)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><hr><p><strong>jQuery parentsUntil() 方法</strong></p><p>parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素。</p><p>下面的例子返回介于 <span> 与 </span></p><div> 元素之间的所有祖先元素：<p></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parentsUntil</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"border"</span><span class="token punctuation">:</span><span class="token string">"2px solid red"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ancestors<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> body (曾曾祖父元素)  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">500</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div (曾祖父元素)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>ul (祖父元素)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>li (父元素)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="12-3、jQuery-遍历-后代"><a href="#12-3、jQuery-遍历-后代" class="headerlink" title="12.3、jQuery 遍历 - 后代"></a>12.3、jQuery 遍历 - 后代</h3><p><strong>向下遍历 DOM 树</strong></p><p>下面是两个用于向下遍历 DOM 树的 jQuery 方法：</p><ul><li>children()</li><li>find()</li></ul><hr><p><strong>jQuery children() 方法</strong></p><p>children() 方法返回被选元素的所有直接子元素。</p><p>该方法只会向下一级对 DOM 树进行遍历。</p><p>下面的例子返回每个 </p><div> 元素的所有直接子元素：<p></p><p>您也可以使用可选参数来过滤对子元素的搜索。</p><p>下面的例子返回类名为 “1” 的所有 </p><p> 元素，并且它们是 </p><div> 的直接子元素：<p></p><hr><p><strong>jQuery find() 方法</strong></p><p>find() 方法返回被选元素的后代元素，一路向下直到最后一个后代。</p><p>下面的例子返回属于 </p><div> 后代的所有 <span> 元素：<p></p><h3 id="12-4、jQuery-遍历-同胞-siblings"><a href="#12-4、jQuery-遍历-同胞-siblings" class="headerlink" title="12.4、jQuery 遍历 - 同胞(siblings)"></a>12.4、jQuery 遍历 - 同胞(siblings)</h3><hr><p>同胞拥有相同的父元素。</p><p>通过 jQuery，您能够在 DOM 树中遍历元素的同胞元素。</p><hr><p><strong>在 DOM 树中水平遍历</strong></p><p>有许多有用的方法让我们在 DOM 树进行水平遍历：</p><ul><li>siblings()</li><li>next()</li><li>nextAll()</li><li>nextUntil()</li><li>prev()</li><li>prevAll()</li><li>prevUntil()</li></ul><hr><p><strong>jQuery siblings() 方法</strong></p><p>siblings() 方法返回被选元素的所有同胞元素。</p><p>下面的例子返回 </p><h2> 的所有同胞元素：<p></p><p>您也可以使用可选参数来过滤对同胞元素的搜索。</p><p>下面的例子返回属于 </p></h2><h2> 的同胞元素的所有 <p> 元素：</p><hr><p><strong>jQuery next() 方法</strong></p><p>next() 方法返回被选元素的下一个同胞元素。</p><p>该方法只返回一个元素。</p><p>下面的例子返回 </p></h2><h2> 的下一个同胞元素：<p></p><hr><p><strong>jQuery nextAll() 方法</strong></p><p>nextAll() 方法返回被选元素的所有跟随的同胞元素。</p><p>下面的例子返回 </p></h2><h2> 的所有跟随的同胞元素：<p></p><hr><p><strong>jQuery nextUntil() 方法</strong></p><p>nextUntil() 方法返回介于两个给定参数之间的所有跟随的同胞元素。</p><p>下面的例子返回介于 </p></h2><h2> 与 </h2><h6> 元素之间的所有同胞元素：<p></p><hr><p><strong>jQuery prev(), prevAll() &amp; prevUntil() 方法</strong></p><p>prev(), prevAll() 以及 prevUntil() 方法的工作方式与上面的方法类似，只不过方向相反而已：它们返回的是前面的同胞元素（在 DOM 树中沿着同胞之前元素遍历，而不是之后元素遍历）。</p></h6><h3 id="12-5、jQuery-遍历-过滤"><a href="#12-5、jQuery-遍历-过滤" class="headerlink" title="12.5、jQuery 遍历- 过滤"></a>12.5、jQuery 遍历- 过滤</h3><hr><p><strong>缩小搜索元素的范围</strong></p><p>三个最基本的过滤方法是：first(), last() 和 eq()，它们允许您基于其在一组元素中的位置来选择一个特定的元素。</p><p>其他过滤方法，比如 filter() 和 not() 允许您选取匹配或不匹配某项指定标准的元素。</p><hr><p><strong>jQuery first() 方法</strong></p><p>first() 方法返回被选元素的首个元素。</p><p>下面的例子选取首个 </p><div> 元素内部的第一个 <p> 元素：</p><hr><p><strong>jQuery last() 方法</strong></p><p>last() 方法返回被选元素的最后一个元素。</p><p>下面的例子选择最后一个 </p><div> 元素中的最后一个 <p> 元素：</p><hr><p><strong>jQuery eq() 方法</strong></p><p>eq() 方法返回被选元素中带有指定索引号的元素。</p><p>索引号从 0 开始，因此首个元素的索引号是 0 而不是 1。下面的例子选取第二个 </p><p> 元素（索引号 1）：</p><hr><p><strong>jQuery filter() 方法</strong></p><p>filter() 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。</p><p>下面的例子返回带有类名 “url” 的所有 </p><p> 元素：</p><hr><p><strong>jQuery not() 方法</strong></p><p>not() 方法返回不匹配标准的所有元素。</p><p>提示：not() 方法与 filter() 相反。</p><p>下面的例子返回不带有类名 “url” 的所有 </p><p> 元素：</p><h2 id="13、jQuery-Ajax"><a href="#13、jQuery-Ajax" class="headerlink" title="13、jQuery Ajax"></a>13、jQuery Ajax</h2><h3 id="13-1、什么是Ajax"><a href="#13-1、什么是Ajax" class="headerlink" title="13.1、什么是Ajax"></a>13.1、什么是Ajax</h3><p>AJAX 是与服务器交换数据的技术，它在不重载全部页面的情况下，实现了对部分网页的更新。</p><p>AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。</p><p>简短地说，在不重载整个网页的情况下，AJAX 通过后台加载数据，并在网页上进行显示。</p><p>使用 AJAX 的应用程序案例：谷歌地图、腾讯微博、优酷视频、人人网等等。</p><p>您可以在我们的 <a href="https://www.runoob.com/jquery/ajax-ajax.html">jQuery Ajax 参考手册</a>学会 jQuery Ajax 的具体应用。</p><p>您可以在我们的 <a href="https://www.runoob.com/ajax/">AJAX 教程</a>中学到更多有关 AJAX 的知识。</p><h3 id="13-2、关于-jQuery-与-AJAX"><a href="#13-2、关于-jQuery-与-AJAX" class="headerlink" title="13.2、关于 jQuery 与 AJAX"></a>13.2、关于 jQuery 与 AJAX</h3><p>jQuery 提供多个与 AJAX 有关的方法。</p><p>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON - 同时您能够把这些外部数据直接载入网页的被选元素中。</p><p><strong>如果没有 jQuery，AJAX 编程还是有些难度的。</strong>编写常规的 AJAX 代码并不容易，因为不同的浏览器对 AJAX 的实现并不相同。这意味着您必须编写额外的代码对浏览器进行测试。不过，jQuery 团队为我们解决了这个难题，我们只需要一行简单的代码，就可以实现 AJAX 功能。</p><h3 id="13-3、jQuery-AJAX-load-方法"><a href="#13-3、jQuery-AJAX-load-方法" class="headerlink" title="13.3、jQuery - AJAX load() 方法"></a>13.3、jQuery - AJAX load() 方法</h3><p><strong>jQuery load() 方法</strong></p><p>jQuery load() 方法是简单但强大的 AJAX 方法。</p><p>load() 方法从服务器加载数据，并把返回的数据放入被选元素中。</p><p><strong>语法:</strong></p><p>$(selector).load(URL,data,callback);</p><p>必需的 <em>URL</em> 参数规定您希望加载的 URL。</p><p>可选的 <em>data</em> 参数规定与请求一同发送的查询字符串键/值对集合。</p><p>可选的 <em>callback</em> 参数是 load() 方法完成后所执行的函数名称。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点击按钮这个段落不会变<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这个段落内容会改变<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>也可以把 jQuery 选择器添加到 URL 参数。</p><p>下面的例子把 “demo_test.txt” 文件中 id=”p1” 的元素的内容，加载到指定的 </p><div> 元素中：<p></p><pre class=" language-txt"><code class="language-txt">这是一个 TXT 文档<div id="p1">    <p>这是 id="p1" 的段落</p></div></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"test.txt #p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点击按钮这个段落不会变<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这个段落内容会改变<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。回调函数可以设置不同的参数：</p><ul><li><em>responseTxt</em> - 包含调用成功时的结果内容</li><li><em>statusTXT</em> - 包含调用的状态</li><li><em>xhr</em> - 包含 XMLHttpRequest 对象</li></ul><p>下面的例子会在 load() 方法完成后显示一个提示框。如果 load() 方法已成功，则显示”外部内容加载成功！”，而如果失败，则显示错误消息：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"test.txt #p1"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>responseTxt<span class="token punctuation">,</span> statusTxt<span class="token punctuation">,</span> xhr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>statusTxt <span class="token operator">===</span> <span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"外部内容加载成功"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>statusTxt <span class="token operator">===</span> <span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Error:"</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>status <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点击按钮这个段落不会变<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这个段落内容会改变<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>为了避免多页面情形下的代码重复，可以利用 load() 方法，将重复的部分（例如导航栏）放入单独的文件，使用下列方法进行导入：</p><pre class=" language-html"><code class="language-html">//1.当前文件中要插入的地方使用此结构：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>include<span class="token punctuation">"</span></span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>***.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>//2.***.html中放入内容，用html格式仅仅因为会有编辑器的书写辅助。。//3.代码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".include"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> $includeObj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>            $includeObj<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//加载的文件内容写入到当前标签后面并移除当前标签</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>或者在index文件里只写重复部分，剩下的一股脑放各自单独文件 load() 进来~</code></pre><h3 id="13-4、jQuery-AJAX-get-和-post-方法"><a href="#13-4、jQuery-AJAX-get-和-post-方法" class="headerlink" title="13.4、jQuery - AJAX get() 和 post() 方法"></a>13.4、jQuery - AJAX get() 和 post() 方法</h3><p>jQuery get() 和 post() 方法用于通过 HTTP GET 或 POST 请求从服务器请求数据。</p><hr><p><strong>HTTP 请求：GET vs. POST</strong></p><p>两种在客户端和服务器端进行请求-响应的常用方法是：GET 和 POST。</p><ul><li><em>GET</em> - 从指定的资源请求数据</li><li><em>POST</em> - 向指定的资源提交要处理的数据</li></ul><p>GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据。</p><p>POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据。</p><p>如需学习更多有关 GET 和 POST 以及两方法差异的知识，请阅读我们的 <a href="https://www.runoob.com/tags/html-httpmethods.html">HTTP 方法 - GET 对比 POST</a>。</p><hr><p><strong>jQuery $.get() 方法</strong></p><p>$.get() 方法通过 HTTP GET 请求从服务器上请求数据。</p><p><strong>语法：</strong></p><p>$.get(<em>URL</em>,<em>callback</em>);</p><p>必需的 <em>URL</em> 参数规定您希望请求的 URL。</p><p>可选的 <em>callback</em> 参数是请求成功后所执行的函数名。</p><p>下面的例子使用 $.get() 方法从服务器上的一个文件中取回数据：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/try/ajax/demo_test.php"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据: "</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"\n状态: "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>$.get() 的第一个参数是我们希望请求的 URL（”demo_test.php”）。</p><p>第二个参数是回调函数。第一个回调参数存有被请求页面的内容，第二个回调参数存有请求的状态。</p><p><strong>提示：</strong> 这个 PHP 文件 (“demo_test.php”) 类似这样：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">'这是个从PHP文件中读取的数据。'</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p><strong>jQuery $.post() 方法</strong></p><p>$.post() 方法通过 HTTP POST 请求向服务器提交数据。</p><p><strong>语法:</strong></p><p>$.post(<em>URL,data,callback</em>);</p><p>必需的 <em>URL</em> 参数规定您希望请求的 URL。</p><p>可选的 <em>data</em> 参数规定连同请求发送的数据。</p><p>可选的 <em>callback</em> 参数是请求成功后所执行的函数名。</p><p>下面的例子使用 $.post() 连同请求一起发送数据：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/try/ajax/demo_test_post.php"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">"菜鸟教程"</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span><span class="token string">"http://www.runoob.com"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据: \n"</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"\n状态: "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>$.post() 的第一个参数是我们希望请求的 URL (“demo_test_post.php”)。</p><p>然后我们连同请求（name 和 url）一起发送数据。</p><p>“demo_test_post.php” 中的 PHP 脚本读取这些参数，对它们进行处理，然后返回结果。</p><p>第三个参数是回调函数。第一个回调参数存有被请求页面的内容，而第二个参数存有请求的状态。</p><p><strong>提示：</strong> 这个 PHP 文件 (“demo_test_post.php”) 类似这样：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?</span>    php <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'网站名: '</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">'URL 地址: '</span> <span class="token punctuation">.</span><span class="token variable">$url</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><h3 id="13-5、GET-和-POST-方法的区别："><a href="#13-5、GET-和-POST-方法的区别：" class="headerlink" title="13.5、GET 和 POST 方法的区别："></a>13.5、<strong>GET 和 POST 方法的区别</strong>：</h3><p><strong>1、发送的数据数量</strong></p><p>在 GET 中，只能发送有限数量的数据，因为数据是在 URL 中发送的。</p><p>在 POST 中，可以发送大量的数据，因为数据是在正文主体中发送的。</p><p><strong>2、安全性</strong></p><p>GET 方法发送的数据不受保护，因为数据在 URL 栏中公开，这增加了漏洞和黑客攻击的风险。</p><p>POST 方法发送的数据是安全的，因为数据未在 URL 栏中公开，还可以在其中使用多种编码技术，这使其具有弹性。</p><p><strong>3、加入书签中</strong></p><p>GET 查询的结果可以加入书签中，因为它以 URL 的形式存在；而 POST 查询的结果无法加入书签中。</p><p><strong>4、编码</strong></p><p>在表单中使用 GET 方法时，数据类型中只接受 ASCII 字符。</p><p>在表单提交时，POST 方法不绑定表单数据类型，并允许二进制和 ASCII 字符。</p><p><strong>5、可变大小</strong></p><p>GET 方法中的可变大小约为 2000 个字符。</p><p>POST 方法最多允许 8 Mb 的可变大小。</p><p><strong>6、缓存</strong></p><p>GET 方法的数据是可缓存的，而 POST 方法的数据是无法缓存的。</p><p><strong>7、主要作用</strong></p><p>GET 方法主要用于获取信息。而 POST 方法主要用于更新数据。</p></div></div></div></span></div></div></div></div></ul></b></li></div></ul></b></li></div></ul></li></div></ul></span></li></ul></li></ul></div></li></ul></div></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE知识点总结</title>
      <link href="/2022/112521.html"/>
      <url>/2022/112521.html</url>
      
        <content type="html"><![CDATA[<h2 id="JavaSE知识点总结"><a href="#JavaSE知识点总结" class="headerlink" title="JavaSE知识点总结"></a>JavaSE知识点总结</h2><h3 id="一、Java语言概述"><a href="#一、Java语言概述" class="headerlink" title="一、Java语言概述"></a>一、Java语言概述</h3><p>IDEA常用快捷键</p><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Alt+Enter</td><td>导入包，自动修正代码</td></tr><tr><td>Ctrl+Y</td><td>删除光标所在行</td></tr><tr><td>Ctrl+D</td><td>复制光标行所在内容，插入光标下面位置</td></tr><tr><td>Ctrl+Alt+L</td><td>格式化代码</td></tr><tr><td>Ctrl+/</td><td>单行注释，按两次取消注释</td></tr><tr><td>Ctrl+Shift+/</td><td>选中代码注释，多行注释，按两次取消注释</td></tr><tr><td>Alt+Ins</td><td>自动生成代码，toString，get，set等方法</td></tr><tr><td>Alt+Shift+上下箭头</td><td>移动当前行代码</td></tr></tbody></table><h3 id="二、程序设计基础"><a href="#二、程序设计基础" class="headerlink" title="二、程序设计基础"></a>二、程序设计基础</h3><h4 id="1、标识符"><a href="#1、标识符" class="headerlink" title="1、标识符"></a>1、标识符</h4><h4 id="2、关键字"><a href="#2、关键字" class="headerlink" title="2、关键字"></a>2、关键字</h4><h6 id="······1-static关键字："><a href="#······1-static关键字：" class="headerlink" title="······1.static关键字："></a>······1.static关键字：</h6><p>​1.1、static存在的意义：</p><p>​static的主要意义是在于创建独立于具体对象的域变量或者方法。以致于即使没有创建对象，也能使用属性和调用方法！</p><p>​static关键字还有一个比较关键的作用就是 用来形成静态代码块以优化程序性能。static块可以置于类中的任何地方，类中可以有多个static块。在类初次被加载的时候，会按照static块的顺序来执行每个static块，并且只会执行一次。</p><p>​为什么说static块可以用来优化程序性能，是因为它的特性:只会在类加载的时候执行一次。因此，很多时候会将一些只需要进行一次的初始化操作都放在static代码块中进行。</p><h4 id="3、常量，变量，作用域"><a href="#3、常量，变量，作用域" class="headerlink" title="3、常量，变量，作用域"></a>3、常量，变量，作用域</h4><h4 id="4、数据类型"><a href="#4、数据类型" class="headerlink" title="4、数据类型"></a>4、数据类型</h4><h4 id="5、运算符与表达式"><a href="#5、运算符与表达式" class="headerlink" title="5、运算符与表达式"></a>5、运算符与表达式</h4><h4 id="6、流程控制结构"><a href="#6、流程控制结构" class="headerlink" title="6、流程控制结构"></a>6、流程控制结构</h4><h4 id="7、方法初识"><a href="#7、方法初识" class="headerlink" title="7、方法初识"></a>7、方法初识</h4><h3 id="三、面向对象"><a href="#三、面向对象" class="headerlink" title="三、面向对象"></a>三、面向对象</h3><h5 id="1-面向对象三大特征："><a href="#1-面向对象三大特征：" class="headerlink" title="1.面向对象三大特征："></a>1.面向对象三大特征：</h5><p>​继承，多态，封装。</p><h5 id="（1）继承"><a href="#（1）继承" class="headerlink" title="（1）继承"></a>（1）继承</h5><ol><li><p>继承的概念：</p><p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p></li><li><p>类的继承格式：通过extend关键字可以申明一个类是从另一个类继承过来的</p></li><li><p>需要注意的是 Java 不支持多继承，但支持多重继承。</p><p><img src="C:\Users\Bumble\Desktop\1.png" alt="1"></p></li><li><p>继承的特性：</p><ul><li>子类拥有父类非 private 的属性、方法。</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。</li></ul></li><li><p>继承关键字：</p><ol><li><p>extends：只能继承一个类</p><p>示例代码如下：</p><pre class=" language-Java"><code class="language-Java">public class Animal {     private String name;       private int id;     public Animal(String myName, String myid) {         //初始化属性值    }     public void eat() {  //吃东西方法的具体实现  }     public void sleep() { //睡觉方法的具体实现  } }  public class Penguin  extends  Animal{ }</code></pre></li><li><p>implements：可以同时继承多个类</p><p>示例代码如下：</p><pre class=" language-Java"><code class="language-Java">public interface A {    public void eat();    public void sleep();} public interface B {    public void show();} public class C implements A,B {}</code></pre></li><li><p>super：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</p></li><li><p>this：指向自己的引用</p><pre class=" language-Java"><code class="language-Java">class Animal {  void eat() {    System.out.println("animal : eat");  }} class Dog extends Animal {  void eat() {    System.out.println("dog : eat");  }  void eatTest() {    this.eat();   // this 调用自己的方法    super.eat();  // super 调用父类方法  }} public class Test {  public static void main(String[] args) {    Animal a = new Animal();    a.eat();    Dog d = new Dog();    d.eatTest();  }}</code></pre></li></ol></li></ol><h5 id="（2）多态"><a href="#（2）多态" class="headerlink" title="（2）多态"></a>（2）多态</h5><p>多态存在的三个必要条件：</p><ol><li><p>继承l</p></li><li><p>重写</p></li><li><p>父类引用指向子类对象</p><pre class=" language-java"><code class="language-java">parent p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ol><p>多态的优点：</p><ul><li><ol><li>消除类型之间的耦合关系</li></ol></li><li><ol start="2"><li>可替换性</li></ol></li><li><ol start="3"><li>可扩充性</li></ol></li><li><ol start="4"><li>接口性</li></ol></li><li><ol start="5"><li>灵活性</li></ol></li><li><ol start="6"><li>简化性</li></ol></li></ul><h5 id="（3）封装"><a href="#（3）封装" class="headerlink" title="（3）封装"></a>（3）封装</h5><p>封装的优点：</p><ul><li><ol><li>良好的封装能够减少耦合。</li></ol></li><li><ol start="2"><li>类内部的结构可以自由修改。</li></ol></li><li><ol start="3"><li>可以对成员变量进行更精确的控制。</li></ol></li><li><ol start="4"><li>隐藏信息，实现细节。</li></ol></li></ul><h5 id="2-类和对象"><a href="#2-类和对象" class="headerlink" title="2.类和对象"></a>2.类和对象</h5><p>什么是类：</p><p>​• 类：是一组相关<strong>属性</strong>和<strong>行为</strong>的集合</p><p>​• 属性：是事务的信息状态</p><p>​• 行为：是事务能够做什么</p><p> 什么是对象：</p><p>​• 对象：是类的一个实例，必然具备该类事物的属性和行为</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
